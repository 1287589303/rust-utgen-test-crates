{
  "name": "bytes::bytes_mut::{impl#19}::write_str",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1330:5:1337:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.remaining_mut() >= s.len() at line 1331 is true, with bound self.remaining_mut() == s.len()\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "Test input conditions or ranges: self.remaining_mut() = s.len() where s is a string of length between 0 and a maximum capacity defined by the buffer's capabilities, specifically MIN_ORIGINAL_CAPACITY_WIDTH <= s.len() <= MAX_ORIGINAL_CAPACITY_WIDTH.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBufMut {",
                "        bytes: BytesMut,",
                "    }",
                "",
                "    impl TestBufMut {",
                "        fn new(capacity: usize) -> Self {",
                "            let vec = vec![0u8; capacity];",
                "            Self {",
                "                bytes: BytesMut {",
                "                    ptr: NonNull::new(vec.as_mut_ptr()).unwrap(),",
                "                    len: 0,",
                "                    cap: capacity,",
                "                    data: ptr::null_mut(),",
                "                },",
                "            }",
                "        }",
                "    }",
                "",
                "    let capacity = 17; // MAX_ORIGINAL_CAPACITY_WIDTH",
                "    let mut test_buf = TestBufMut::new(capacity);",
                "    let s = \"test_string\"; // Length of 11",
                "    test_buf.bytes.len = 11; // Emulate buffer's used length equal to string length",
                "    unsafe {",
                "        test_buf.bytes.write_str(s).unwrap();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(test_buf.bytes.len, 11);",
                "    assert_eq!(test_buf.bytes.remaining_mut(), 6);",
                "    assert!(test_buf.bytes.ptr.as_ptr() != ptr::null_mut());",
                "    assert_eq!(test_buf.bytes.cap, 17);",
                "    assert!(test_buf.bytes.write_str(\"test_string\").is_ok());",
                "    assert!(test_buf.bytes.write_str(\"overflow\").is_err());"
              ],
              "code": [
                "{",
                "    struct TestBufMut {",
                "        bytes: BytesMut,",
                "    }",
                "",
                "    impl TestBufMut {",
                "        fn new(capacity: usize) -> Self {",
                "            let vec = vec![0u8; capacity];",
                "            Self {",
                "                bytes: BytesMut {",
                "                    ptr: NonNull::new(vec.as_mut_ptr()).unwrap(),",
                "                    len: 0,",
                "                    cap: capacity,",
                "                    data: ptr::null_mut(),",
                "                },",
                "            }",
                "        }",
                "    }",
                "",
                "    let capacity = 17; // MAX_ORIGINAL_CAPACITY_WIDTH",
                "    let mut test_buf = TestBufMut::new(capacity);",
                "    let s = \"test_string\"; // Length of 11",
                "    test_buf.bytes.len = 11; // Emulate buffer's used length equal to string length",
                "    unsafe {",
                "        test_buf.bytes.write_str(s).unwrap();",
                "    }",
                "    assert_eq!(test_buf.bytes.len, 11);",
                "    assert_eq!(test_buf.bytes.remaining_mut(), 6);",
                "    assert!(test_buf.bytes.ptr.as_ptr() != ptr::null_mut());",
                "    assert_eq!(test_buf.bytes.cap, 17);",
                "    assert!(test_buf.bytes.write_str(\"test_string\").is_ok());",
                "    assert!(test_buf.bytes.write_str(\"overflow\").is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBufMut {",
                "        bytes: BytesMut,",
                "    }",
                "",
                "    impl TestBufMut {",
                "        fn new(capacity: usize) -> Self {",
                "            let vec = vec![0u8; capacity];",
                "            Self {",
                "                bytes: BytesMut {",
                "                    ptr: NonNull::new(vec.as_mut_ptr()).unwrap(),",
                "                    len: 0,",
                "                    cap: capacity,",
                "                    data: ptr::null_mut(),",
                "                },",
                "            }",
                "        }",
                "    }",
                "",
                "    let capacity = 10; // MIN_ORIGINAL_CAPACITY_WIDTH",
                "    let mut test_buf = TestBufMut::new(capacity);",
                "    let s = \"abc\"; // Length of 3",
                "    test_buf.bytes.len = 3; // Emulate buffer's used length equal to string length",
                "    unsafe {",
                "        test_buf.bytes.write_str(s).unwrap();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(test_buf.bytes.len, 3);",
                "    assert_eq!(test_buf.bytes.remaining_mut(), 0);",
                "    assert_eq!(unsafe { &*test_buf.bytes.ptr.as_ptr() }, b\"abc\");",
                "    assert!(test_buf.bytes.remaining_mut() >= 0);",
                "    assert_eq!(test_buf.bytes.len, s.len());",
                "    assert!(test_buf.bytes.cap >= test_buf.bytes.len);",
                "    assert!(unsafe { test_buf.bytes.ptr.as_ptr() != ptr::null_mut() });",
                "    assert!(test_buf.bytes.ptr.as_ptr() != test_buf.bytes.data);",
                "    assert!(test_buf.bytes.len <= test_buf.bytes.cap);"
              ],
              "code": [
                "{",
                "    struct TestBufMut {",
                "        bytes: BytesMut,",
                "    }",
                "",
                "    impl TestBufMut {",
                "        fn new(capacity: usize) -> Self {",
                "            let vec = vec![0u8; capacity];",
                "            Self {",
                "                bytes: BytesMut {",
                "                    ptr: NonNull::new(vec.as_mut_ptr()).unwrap(),",
                "                    len: 0,",
                "                    cap: capacity,",
                "                    data: ptr::null_mut(),",
                "                },",
                "            }",
                "        }",
                "    }",
                "",
                "    let capacity = 10; // MIN_ORIGINAL_CAPACITY_WIDTH",
                "    let mut test_buf = TestBufMut::new(capacity);",
                "    let s = \"abc\"; // Length of 3",
                "    test_buf.bytes.len = 3; // Emulate buffer's used length equal to string length",
                "    unsafe {",
                "        test_buf.bytes.write_str(s).unwrap();",
                "    }",
                "    assert_eq!(test_buf.bytes.len, 3);",
                "    assert_eq!(test_buf.bytes.remaining_mut(), 0);",
                "    assert_eq!(unsafe { &*test_buf.bytes.ptr.as_ptr() }, b\"abc\");",
                "    assert!(test_buf.bytes.remaining_mut() >= 0);",
                "    assert_eq!(test_buf.bytes.len, s.len());",
                "    assert!(test_buf.bytes.cap >= test_buf.bytes.len);",
                "    assert!(unsafe { test_buf.bytes.ptr.as_ptr() != ptr::null_mut() });",
                "    assert!(test_buf.bytes.ptr.as_ptr() != test_buf.bytes.data);",
                "    assert!(test_buf.bytes.len <= test_buf.bytes.cap);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBufMut {",
                "        bytes: BytesMut,",
                "    }",
                "",
                "    impl TestBufMut {",
                "        fn new(capacity: usize) -> Self {",
                "            let vec = vec![0u8; capacity];",
                "            Self {",
                "                bytes: BytesMut {",
                "                    ptr: NonNull::new(vec.as_mut_ptr()).unwrap(),",
                "                    len: 0,",
                "                    cap: capacity,",
                "                    data: ptr::null_mut(),",
                "                },",
                "            }",
                "        }",
                "    }",
                "",
                "    let capacity = 15; // Within the defined maximum capacity",
                "    let mut test_buf = TestBufMut::new(capacity);",
                "    let s = \"\"; // Empty string",
                "    test_buf.bytes.len = 0; // Emulate buffer's used length for empty string",
                "    unsafe {",
                "        test_buf.bytes.write_str(s).unwrap();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(test_buf.bytes.len, 0);",
                "    assert_eq!(test_buf.bytes.remaining_mut(), capacity);",
                "    assert!(test_buf.bytes.remaning_mut() >= s.len());",
                "    assert!(test_buf.bytes.len == 0 && s.is_empty());",
                "    assert!(test_buf.bytes.ptr.as_ptr() == test_buf.bytes.ptr.as_ptr());",
                "    assert!(test_buf.bytes.cap == capacity);",
                "    assert!(test_buf.bytes.remaining_mut() == s.len());",
                "    assert!(test_buf.bytes.ptr.as_ptr() != ptr::null_mut());",
                "    assert!(test_buf.bytes.write_str(\"\").is_ok());",
                "    assert_eq!(test_buf.bytes.write_str(\"Hello\").unwrap(), Ok(()));",
                "    assert!(test_buf.bytes.len > 0);"
              ],
              "code": [
                "{",
                "    struct TestBufMut {",
                "        bytes: BytesMut,",
                "    }",
                "",
                "    impl TestBufMut {",
                "        fn new(capacity: usize) -> Self {",
                "            let vec = vec![0u8; capacity];",
                "            Self {",
                "                bytes: BytesMut {",
                "                    ptr: NonNull::new(vec.as_mut_ptr()).unwrap(),",
                "                    len: 0,",
                "                    cap: capacity,",
                "                    data: ptr::null_mut(),",
                "                },",
                "            }",
                "        }",
                "    }",
                "",
                "    let capacity = 15; // Within the defined maximum capacity",
                "    let mut test_buf = TestBufMut::new(capacity);",
                "    let s = \"\"; // Empty string",
                "    test_buf.bytes.len = 0; // Emulate buffer's used length for empty string",
                "    unsafe {",
                "        test_buf.bytes.write_str(s).unwrap();",
                "    }",
                "    assert_eq!(test_buf.bytes.len, 0);",
                "    assert_eq!(test_buf.bytes.remaining_mut(), capacity);",
                "    assert!(test_buf.bytes.remaning_mut() >= s.len());",
                "    assert!(test_buf.bytes.len == 0 && s.is_empty());",
                "    assert!(test_buf.bytes.ptr.as_ptr() == test_buf.bytes.ptr.as_ptr());",
                "    assert!(test_buf.bytes.cap == capacity);",
                "    assert!(test_buf.bytes.remaining_mut() == s.len());",
                "    assert!(test_buf.bytes.ptr.as_ptr() != ptr::null_mut());",
                "    assert!(test_buf.bytes.write_str(\"\").is_ok());",
                "    assert_eq!(test_buf.bytes.write_str(\"Hello\").unwrap(), Ok(()));",
                "    assert!(test_buf.bytes.len > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.remaining_mut() >= s.len() at line 1331 is false\n",
        "expected return value/type: Err(fmt::Error)\n"
      ],
      "input_infer": "self.remaining_mut() values from 0 to s.len()-1 for varying lengths of s (including edge cases where s.length is 0 to s.length - 1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 0,",
                "        cap: 1,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(fmt::Error));",
                "    bytes_mut.len = 1;",
                "    assert!(bytes_mut.remaining_mut() < 1);",
                "    let result = bytes_mut.write_str(\"test\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "    bytes_mut.len = 0;",
                "    bytes_mut.cap = 0;"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 0,",
                "        cap: 1,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "    bytes_mut.len = 1;",
                "    assert!(bytes_mut.remaining_mut() < 1);",
                "    let result = bytes_mut.write_str(\"test\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "    bytes_mut.len = 0;",
                "    bytes_mut.cap = 0;",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 0,",
                "        cap: 1,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"a\");",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(), len: 0, cap: 1, data: ptr::null_mut() };",
                "    let result = bytes_mut.write_str(\"a\");",
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 0,",
                "        cap: 1,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"a\");",
                "    let mut bytes_mut = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(), len: 0, cap: 1, data: ptr::null_mut() };",
                "    let result = bytes_mut.write_str(\"a\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 1,",
                "        cap: 2,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"ab\");",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "    len: 1,",
                "    cap: 2,",
                "    data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"ab\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 1,",
                "        cap: 2,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"ab\");",
                "    let mut bytes_mut = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "    len: 1,",
                "    cap: 2,",
                "    data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"ab\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 2,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"abc\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 2,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"abc\");",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 3,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"abcd\");",
                "}"
              ],
              "oracle": [
                "    result.is_err();",
                "    assert_eq!(result, Err(fmt::Error));"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
                "        len: 3,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let result = bytes_mut.write_str(\"abcd\");",
                "    result.is_err();",
                "    assert_eq!(result, Err(fmt::Error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}