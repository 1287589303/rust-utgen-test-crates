{
  "name": "bytes::buf::buf_impl::Buf::copy_to_slice",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:294:5:297:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.remaining() must be >= dst.len() for valid operations; for boundary testing, test with dst.len() = 0 (valid), dst.len() = 1 (valid), dst.len() = remaining bytes (valid), dst.len() = remaining bytes + 1 (invalid case to trigger panic), and cases where self.remaining() = 0 (invalid case to trigger panic).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 0];",
                "    buf.copy_to_slice(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 5);",
                "    assert_eq!(dst, [0; 0]);",
                "    buf.advance(0);",
                "    assert_eq!(buf.chunk(), [1, 2, 3, 4, 5]);",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(dst, [0; 0]);",
                "    buf.advance(0);",
                "    assert!(buf.remaining() >= dst.len());"
              ],
              "code": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 0];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(buf.remaining(), 5);",
                "    assert_eq!(dst, [0; 0]);",
                "    buf.advance(0);",
                "    assert_eq!(buf.chunk(), [1, 2, 3, 4, 5]);",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(dst, [0; 0]);",
                "    buf.advance(0);",
                "    assert!(buf.remaining() >= dst.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 1];",
                "    buf.copy_to_slice(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dst, [1]);",
                "    assert_eq!(buf.remaining(), 4);",
                "    let mut dst2 = [0; 3];",
                "    buf.copy_to_slice(&mut dst2);",
                "    assert_eq!(dst2, [2, 3, 4]);",
                "    assert_eq!(buf.remaining(), 1);",
                "    let mut dst3 = [0; 1];",
                "    buf.copy_to_slice(&mut dst3);",
                "    assert_eq!(dst3, [5]);",
                "    assert_eq!(buf.remaining(), 0);",
                "    let mut dst4 = [0; 2];",
                "    assert_panics!(buf.copy_to_slice(&mut dst4));"
              ],
              "code": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 1];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(dst, [1]);",
                "    assert_eq!(buf.remaining(), 4);",
                "    let mut dst2 = [0; 3];",
                "    buf.copy_to_slice(&mut dst2);",
                "    assert_eq!(dst2, [2, 3, 4]);",
                "    assert_eq!(buf.remaining(), 1);",
                "    let mut dst3 = [0; 1];",
                "    buf.copy_to_slice(&mut dst3);",
                "    assert_eq!(dst3, [5]);",
                "    assert_eq!(buf.remaining(), 0);",
                "    let mut dst4 = [0; 2];",
                "    assert_panics!(buf.copy_to_slice(&mut dst4));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 5];",
                "    buf.copy_to_slice(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(&buf.data[..5], &dst);",
                "    assert_eq!(0, buf.position);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.advance(5);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.copy_to_slice(&mut dst);"
              ],
              "code": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 5];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(&buf.data[..5], &dst);",
                "    assert_eq!(0, buf.position);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.advance(5);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.copy_to_slice(&mut dst);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 6];",
                "    buf.copy_to_slice(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 5);",
                "    let result = buf.try_copy_to_slice(&mut dst);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().requested, 6);",
                "    assert_eq!(result.unwrap_err().available, 5);"
              ],
              "code": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![1, 2, 3, 4, 5],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 6];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(buf.remaining(), 5);",
                "    let result = buf.try_copy_to_slice(&mut dst);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().requested, 6);",
                "    assert_eq!(result.unwrap_err().available, 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 1];",
                "    buf.copy_to_slice(&mut dst);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| buf.copy_to_slice(&mut dst)).is_err());",
                "    buf.position = 0;",
                "    buf.data = vec![1, 2, 3];",
                "    let mut dst = [0; 3];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(&dst, &[1, 2, 3]);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.data = vec![1, 2, 3, 4, 5];",
                "    buf.position = 3;",
                "    let mut dst = [0; 2];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(&dst, &[4, 5]);",
                "    assert_eq!(buf.remaining(), 1);",
                "    buf.position = 0;",
                "    buf.data = vec![0; 10];",
                "    let mut dst = [0; 10];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(buf.remaining(), 0);"
              ],
              "code": [
                "{",
                "    struct Buffer {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buffer {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "    }",
                "",
                "    let mut buf = Buffer {",
                "        data: vec![],",
                "        position: 0,",
                "    };",
                "    let mut dst = [0; 1];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert!(std::panic::catch_unwind(|| buf.copy_to_slice(&mut dst)).is_err());",
                "    buf.position = 0;",
                "    buf.data = vec![1, 2, 3];",
                "    let mut dst = [0; 3];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(&dst, &[1, 2, 3]);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.data = vec![1, 2, 3, 4, 5];",
                "    buf.position = 3;",
                "    let mut dst = [0; 2];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(&dst, &[4, 5]);",
                "    assert_eq!(buf.remaining(), 1);",
                "    buf.position = 0;",
                "    buf.data = vec![0; 10];",
                "    let mut dst = [0; 10];",
                "    buf.copy_to_slice(&mut dst);",
                "    assert_eq!(buf.remaining(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}