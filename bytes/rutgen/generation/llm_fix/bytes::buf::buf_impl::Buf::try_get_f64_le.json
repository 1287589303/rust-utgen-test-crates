{
  "name": "bytes::buf::buf_impl::Buf::try_get_f64_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:2303:5:2305:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.try_get_u64_le()? at line 2304 is Err/None\n"
      ],
      "input_infer": "Test input conditions or ranges: buffer length between 0 and 7 bytes, with the last attempt to access requiring 8 bytes for a successful read, ensuring remaining buffer data is insufficient to satisfy the request.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &[];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
                "    assert_eq!(buf.remaining(), 0);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &[];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
                "    assert_eq!(buf.remaining(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 2 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 2 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError{requested: 8, available: 3}));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError{requested: 8, available: 3}));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError{ requested: 8, available: 4 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError{ requested: 8, available: 4 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
                "    assert_eq!(buf.remaining(), 5);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
                "    assert_eq!(buf.remaining(), 7);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
                "    assert_eq!(buf.remaining(), 5);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
                "    assert_eq!(buf.remaining(), 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(1.2));",
                "    assert_eq!(buf.remaining(), 6);",
                "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 7 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(1.2));",
                "    assert_eq!(buf.remaining(), 6);",
                "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 7 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.try_get_u64_le()? at line 2304 is Ok/Some\n",
        "expected return value/type: Ok(f64::from_bits(self.try_get_u64_le()?))\n"
      ],
      "input_infer": "self must have at least 8 bytes remaining with any byte values; additionally, test with buffer sizes of exactly 8 bytes, 7 bytes (to trigger an error), and larger than 8 bytes (for normal operation)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 hello\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(0.0));",
                "    assert_eq!(buf.remaining(), 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(1.2));",
                "    assert_eq!(buf.remaining(), 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert!(result.is_ok());",
                "    assert_eq!(buf.remaining(), 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 6 }));",
                "    assert_eq!(buf.remaining(), 6);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x40\\x59\\x0C\\xCC\\xCC\\xCC\\xCC\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(3.14159));",
                "    assert_eq!(buf.remaining(), 1);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(0.0));",
                "    assert_eq!(buf.remaining(), 1);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 hello\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(0.0));",
                "    assert_eq!(buf.remaining(), 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(1.2));",
                "    assert_eq!(buf.remaining(), 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert!(result.is_ok());",
                "    assert_eq!(buf.remaining(), 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 6 }));",
                "    assert_eq!(buf.remaining(), 6);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x40\\x59\\x0C\\xCC\\xCC\\xCC\\xCC\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(3.14159));",
                "    assert_eq!(buf.remaining(), 1);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(0.0));",
                "    assert_eq!(buf.remaining(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(f64::from_bits(0x7FF8000000000000)));",
                "    assert_eq!(buf.remaining(), 0);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(f64::from_bits(0x7FF8000000000000)));",
                "    assert_eq!(buf.remaining(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(3.141592653589793));",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 0 }));",
                "    assert_eq!(buf.remaining(), 0);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(3.141592653589793));",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 0 }));",
                "    assert_eq!(buf.remaining(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(3.141592653589793));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let result = buf.try_get_f64_le();",
                "    assert_eq!(result, Ok(3.141592653589793));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}