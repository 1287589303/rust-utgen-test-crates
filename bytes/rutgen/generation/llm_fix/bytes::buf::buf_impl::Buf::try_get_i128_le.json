{
  "name": "bytes::buf::buf_impl::Buf::try_get_i128_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1912:5:1914:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining() < 16 for returning Err(TryGetError) and remaining() = 16 for successfully returning Ok(i128) with the corresponding byte data\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\"[..]; // 15 bytes",
                "    let result = buf.try_get_i128_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 16, available: 15 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\x0E\"[..]; // 15 bytes",
                "    let result = buf.try_get_i128_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 16, available: 15 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &mut &[u8] = &mut &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..]; // 16 bytes",
                "    let result = buf.try_get_i128_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), result);"
              ],
              "code": [
                "{",
                "    let mut buf: &mut &[u8] = &mut &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..]; // 16 bytes",
                "    let result = buf.try_get_i128_le();",
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "remaining() == 16, remaining() == 15, remaining() == 0, remaining() == 1, remaining() == 17\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 16 bytes remaining, should return Ok(ret)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 16);",
                "    assert_eq!(result, Ok(0x01020304050607080910111213141516_i128));",
                "    assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 16 bytes remaining, should return Ok(ret)",
                "    assert_eq!(buf.remaining(), 16);",
                "    assert_eq!(result, Ok(0x01020304050607080910111213141516_i128));",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 15 bytes remaining, should return Err(TryGetError{requested: 16, available: 15})",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128_le());",
                "    assert_eq!(15, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 15 bytes remaining, should return Err(TryGetError{requested: 16, available: 15})",
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128_le());",
                "    assert_eq!(15, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 0 bytes remaining, should return Err(TryGetError{requested: 16, available: 0})",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError{requested: 16, available: 0}), buf.try_get_i128_le());",
                "    assert_eq!(0, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 0 bytes remaining, should return Err(TryGetError{requested: 16, available: 0})",
                "    assert_eq!(Err(TryGetError{requested: 16, available: 0}), buf.try_get_i128_le());",
                "    assert_eq!(0, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 1 byte remaining, should return Err(TryGetError{requested: 16, available: 1})",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError{requested: 16, available: 1}), buf.try_get_i128_le());",
                "    assert_eq!(1, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 1 byte remaining, should return Err(TryGetError{requested: 16, available: 1})",
                "    assert_eq!(Err(TryGetError{requested: 16, available: 1}), buf.try_get_i128_le());",
                "    assert_eq!(1, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\\x02\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 17 bytes remaining, should return Ok(ret)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 17);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), 0x01020304050607080910111213141516_i128);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\\x02\"[..];",
                "    let result = buf.try_get_i128_le();",
                "    // The buffer has 17 bytes remaining, should return Ok(ret)",
                "    assert_eq!(buf.remaining(), 17);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(result.unwrap(), 0x01020304050607080910111213141516_i128);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}