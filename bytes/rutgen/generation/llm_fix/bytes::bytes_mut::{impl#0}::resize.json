{
  "name": "bytes::bytes_mut::{impl#0}::resize",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:479:5:500:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(additional) = new_len.checked_sub(self.len()) at line 480 is true\n",
        "precondition: additional == 0 at line 487 is false\n"
      ],
      "input_infer": "new_len: any value greater than self.len(), value: any u8 value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(3, 0x1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    buf.resize(5, 0x2);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x2, 0x2]);",
                "    buf.resize(3, 0x3);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    buf.resize(1, 0x4);",
                "    assert_eq!(buf.len(), 1);",
                "    assert_eq!(&buf[..], &[0x1]);",
                "    buf.resize(0, 0x5);",
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.is_empty());",
                "    buf.resize(5, 0x6);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x6, 0x6]);",
                "    buf.resize(3, 0x7);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6]);",
                "    buf.resize(10, 0x8);",
                "    assert_eq!(buf.len(), 10);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(3, 0x1);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    buf.resize(5, 0x2);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x2, 0x2]);",
                "    buf.resize(3, 0x3);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    buf.resize(1, 0x4);",
                "    assert_eq!(buf.len(), 1);",
                "    assert_eq!(&buf[..], &[0x1]);",
                "    buf.resize(0, 0x5);",
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.is_empty());",
                "    buf.resize(5, 0x6);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x6, 0x6]);",
                "    buf.resize(3, 0x7);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6]);",
                "    buf.resize(10, 0x8);",
                "    assert_eq!(buf.len(), 10);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(4, 0x0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 4);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0]);",
                "    buf.resize(5, 0x1);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0, 0x1]);",
                "    buf.resize(3, 0x2);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(4, 0x0);",
                "    assert_eq!(buf.len(), 4);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0]);",
                "    buf.resize(5, 0x1);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0, 0x1]);",
                "    buf.resize(3, 0x2);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(6, 0xFF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 6);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);",
                "    assert!(buf.is_empty() == false);",
                "    assert!(buf.len() > 5);",
                "    assert!(buf.capacity() >= buf.len());",
                "    assert!(buf.spare_capacity_mut().len() == 0);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(6, 0xFF);",
                "    assert_eq!(buf.len(), 6);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);",
                "    assert!(buf.is_empty() == false);",
                "    assert!(buf.len() > 5);",
                "    assert!(buf.capacity() >= buf.len());",
                "    assert!(buf.spare_capacity_mut().len() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Some(additional) = new_len.checked_sub(self.len()) at line 480 is true\n",
        "precondition: additional == 0 at line 487 is true\n"
      ],
      "input_infer": "new_len: 1 to (capacity), self.len: 0 to (capacity), value: 0 to 255\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(5, 0x1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    ",
                "    buf.resize(5, 0x2);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    ",
                "    buf.resize(0, 0x2);",
                "    assert_eq!(buf.len(), 0);",
                "    assert_eq!(&buf[..], &[]);",
                "    ",
                "    buf.resize(3, 0x3);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3]);",
                "    ",
                "    buf.resize(5, 0x4);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3, 0x4, 0x4]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(5, 0x1);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    ",
                "    buf.resize(5, 0x2);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    ",
                "    buf.resize(0, 0x2);",
                "    assert_eq!(buf.len(), 0);",
                "    assert_eq!(&buf[..], &[]);",
                "    ",
                "    buf.resize(3, 0x3);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3]);",
                "    ",
                "    buf.resize(5, 0x4);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3, 0x4, 0x4]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(3, 0x1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    ",
                "    buf.resize(2, 0x2);",
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(&buf[..], &[0x1, 0x1]);",
                "    ",
                "    buf.resize(4, 0x3);",
                "    assert_eq!(buf.len(), 4);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);",
                "    ",
                "    buf.resize(5, 0x4);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3, 0x4]);",
                "    ",
                "    buf.resize(0, 0x0);",
                "    assert_eq!(buf.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(3, 0x1);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    ",
                "    buf.resize(2, 0x2);",
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(&buf[..], &[0x1, 0x1]);",
                "    ",
                "    buf.resize(4, 0x3);",
                "    assert_eq!(buf.len(), 4);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);",
                "    ",
                "    buf.resize(5, 0x4);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3, 0x4]);",
                "    ",
                "    buf.resize(0, 0x0);",
                "    assert_eq!(buf.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(3, 0x1);",
                "    buf.resize(3, 0x2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    buf.resize(3, 0x2);",
                "    assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(3, 0x1);",
                "    buf.resize(3, 0x2);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
                "    buf.resize(3, 0x2);",
                "    assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(5, 0x1);",
                "    buf.resize(3, 0x2);",
                "}"
              ],
              "oracle": [
                "    buf.resize(5, 0x1); assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    buf.resize(3, 0x2); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
                "    buf.resize(0, 0x2); assert_eq!(&buf[..], &[]);",
                "    buf.resize(7, 0x3); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3]);",
                "    buf.resize(3, 0x4); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
                "    buf.resize(5, 0x5); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x5, 0x5]);",
                "    buf.resize(5, 0x0); assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x5, 0x5]);",
                "    buf.resize(3, 0x1); assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(5, 0x1);",
                "    buf.resize(3, 0x2);",
                "    buf.resize(5, 0x1); assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    buf.resize(3, 0x2); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
                "    buf.resize(0, 0x2); assert_eq!(&buf[..], &[]);",
                "    buf.resize(7, 0x3); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3]);",
                "    buf.resize(3, 0x4); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
                "    buf.resize(5, 0x5); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x5, 0x5]);",
                "    buf.resize(5, 0x0); assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x5, 0x5]);",
                "    buf.resize(3, 0x1); assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(5, 0x1);",
                "    buf.resize(4, 0x2);",
                "    buf.resize(5, 0x3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    buf.resize(4, 0x2);",
                "    assert_eq!(buf.len(), 4);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1]);",
                "    buf.resize(5, 0x3);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x3]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(5);",
                "    buf.resize(5, 0x1);",
                "    buf.resize(4, 0x2);",
                "    buf.resize(5, 0x3);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
                "    buf.resize(4, 0x2);",
                "    assert_eq!(buf.len(), 4);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1]);",
                "    buf.resize(5, 0x3);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x3]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}