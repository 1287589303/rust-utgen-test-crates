{
  "name": "bytes::bytes_mut::{impl#25}::extend",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1397:5:1404:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: bytes in iter at line 1401 is true\n",
        "precondition: bytes in iter at line 1401 is false\n"
      ],
      "input_infer": "iter contains at least one Bytes element; iter is empty or contains non-Bytes elements.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
                "    bytes_mut.extend(bytes_vec);",
                "}"
              ],
              "oracle": [
                "    bytes_mut.extend(vec![Bytes::from(vec![1, 2, 3])]); // Test with non-empty iterator",
                "    assert_eq!(bytes_mut.len(), 3); // Expect length to be 3 after extension",
                "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]); // Expect contents to match inserted bytes",
                "    ",
                "    bytes_mut.clear(); // Reset for the next test",
                "    bytes_mut.extend(vec![]); // Test with empty iterator",
                "    assert_eq!(bytes_mut.len(), 0); // Expect length to remain 0",
                "    assert!(bytes_mut.is_empty()); // Expect BytesMut to be empty after extending with empty iterator"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
                "    bytes_mut.extend(bytes_vec);",
                "    bytes_mut.extend(vec![Bytes::from(vec![1, 2, 3])]); // Test with non-empty iterator",
                "    assert_eq!(bytes_mut.len(), 3); // Expect length to be 3 after extension",
                "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]); // Expect contents to match inserted bytes",
                "    ",
                "    bytes_mut.clear(); // Reset for the next test",
                "    bytes_mut.extend(vec![]); // Test with empty iterator",
                "    assert_eq!(bytes_mut.len(), 0); // Expect length to remain 0",
                "    assert!(bytes_mut.is_empty()); // Expect BytesMut to be empty after extending with empty iterator",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let empty_bytes_vec: Vec<Bytes> = Vec::new();",
                "    bytes_mut.extend(empty_bytes_vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "    let non_empty_bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
                "    bytes_mut.extend(non_empty_bytes_vec);",
                "    assert_eq!(bytes_mut.len(), 3);",
                "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]);",
                "    assert!(bytes_mut.capacity() > 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let empty_bytes_vec: Vec<Bytes> = Vec::new();",
                "    bytes_mut.extend(empty_bytes_vec);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "    let non_empty_bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
                "    bytes_mut.extend(non_empty_bytes_vec);",
                "    assert_eq!(bytes_mut.len(), 3);",
                "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]);",
                "    assert!(bytes_mut.capacity() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: bytes in iter at line 1401 is false\n"
      ],
      "input_infer": "iter must be an empty iterator or an iterator with zero elements of type Bytes.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let empty_iter = vec![].into_iter();",
                "    bytes_mut.extend(empty_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "    assert_eq!(bytes_mut.freeze().len(), 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let empty_iter = vec![].into_iter();",
                "    bytes_mut.extend(empty_iter);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "    assert_eq!(bytes_mut.freeze().len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let zero_element_iter = vec![Bytes::from(vec![])].into_iter().filter(|_| false);",
                "    bytes_mut.extend(zero_element_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let zero_element_iter = vec![Bytes::from(vec![])].into_iter().filter(|_| false);",
                "    bytes_mut.extend(zero_element_iter);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}