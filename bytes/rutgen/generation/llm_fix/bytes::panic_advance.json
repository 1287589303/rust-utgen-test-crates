{
  "name": "bytes::panic_advance",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:199:2"
  },
  "visible": true,
  "loc": "src/lib.rs:171:1:176:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "error_info must have requested as a non-negative integer and available as a non-negative integer, with both values covering the range from 0 to the maximum usize value; test cases should include combinations where requested is greater than, less than, and equal to available, including edge cases like requested = 0, available = 0 and requested = available.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: 1,",
                "        available: 0,",
                "    };",
                "    panic_advance(&error_info);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let error_info = TryGetError { requested: 1, available: 0 };",
                "    panic_advance(&error_info);",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: 1,",
                "        available: 0,",
                "    };",
                "    panic_advance(&error_info);",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let error_info = TryGetError { requested: 1, available: 0 };",
                "    panic_advance(&error_info);",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: usize::MAX,",
                "        available: usize::MAX - 1,",
                "    };",
                "    panic_advance(&error_info);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_advance(&TryGetError { requested: usize::MAX, available: usize::MAX - 1 }), !);"
              ],
              "code": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: usize::MAX,",
                "        available: usize::MAX - 1,",
                "    };",
                "    panic_advance(&error_info);",
                "    assert_eq!(panic_advance(&TryGetError { requested: usize::MAX, available: usize::MAX - 1 }), !);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: 0,",
                "        available: 0,",
                "    };",
                "    panic_advance(&error_info); // No panic, just to ensure execution here should not panic.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_advance(&TryGetError { requested: 0, available: 0 }), ()); // No panic expected",
                "    ",
                "    let error_info = TryGetError { requested: 1, available: 0 };",
                "    let result = std::panic::catch_unwind(|| panic_advance(&error_info));",
                "    assert!(result.is_err()); // Expect panic when requested > available",
                "    ",
                "    let error_info = TryGetError { requested: 5, available: 3 };",
                "    let result = std::panic::catch_unwind(|| panic_advance(&error_info));",
                "    assert!(result.is_err()); // Expect panic when requested > available",
                "    ",
                "    let error_info = TryGetError { requested: 3, available: 3 };",
                "    let result = std::panic::catch_unwind(|| panic_advance(&error_info));",
                "    assert!(result.is_err()); // Expect panic even when requested == available"
              ],
              "code": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: 0,",
                "        available: 0,",
                "    };",
                "    panic_advance(&error_info); // No panic, just to ensure execution here should not panic.",
                "    assert_eq!(panic_advance(&TryGetError { requested: 0, available: 0 }), ()); // No panic expected",
                "    ",
                "    let error_info = TryGetError { requested: 1, available: 0 };",
                "    let result = std::panic::catch_unwind(|| panic_advance(&error_info));",
                "    assert!(result.is_err()); // Expect panic when requested > available",
                "    ",
                "    let error_info = TryGetError { requested: 5, available: 3 };",
                "    let result = std::panic::catch_unwind(|| panic_advance(&error_info));",
                "    assert!(result.is_err()); // Expect panic when requested > available",
                "    ",
                "    let error_info = TryGetError { requested: 3, available: 3 };",
                "    let result = std::panic::catch_unwind(|| panic_advance(&error_info));",
                "    assert!(result.is_err()); // Expect panic even when requested == available",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: usize::MAX,",
                "        available: usize::MAX,",
                "    };",
                "    panic_advance(&error_info); // No panic, just to ensure execution here should not panic.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_advance(&TryGetError { requested: usize::MAX, available: usize::MAX }), ());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: 1, available: 0 }); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: 5, available: 3 }); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: 0, available: 0 }); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: usize::MAX, available: 0 }); }).is_err());"
              ],
              "code": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: usize::MAX,",
                "        available: usize::MAX,",
                "    };",
                "    panic_advance(&error_info); // No panic, just to ensure execution here should not panic.",
                "    assert_eq!(panic_advance(&TryGetError { requested: usize::MAX, available: usize::MAX }), ());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: 1, available: 0 }); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: 5, available: 3 }); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: 0, available: 0 }); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { panic_advance(&TryGetError { requested: usize::MAX, available: 0 }); }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: 1,",
                "        available: 2,",
                "    };",
                "    panic_advance(&error_info); // Should not panic, but we're calling it for test purposes.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_advance(&TryGetError { requested: 1, available: 2 }), !);"
              ],
              "code": [
                "{",
                "    let error_info = TryGetError {",
                "        requested: 1,",
                "        available: 2,",
                "    };",
                "    panic_advance(&error_info); // Should not panic, but we're calling it for test purposes.",
                "    assert_eq!(panic_advance(&TryGetError { requested: 1, available: 2 }), !);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}