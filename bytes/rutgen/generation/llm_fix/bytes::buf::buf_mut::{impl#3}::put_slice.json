{
  "name": "bytes::buf::buf_mut::{impl#3}::put_slice",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1567:5:1580:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.len() < src.len() at line 1568 is true\n"
      ],
      "input_infer": "self.len() = n (where n is a non-negative integer), src.len() = m (where m is a positive integer greater than n)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() = 5, self.len() = 3",
                "    buffer.put_slice(src);",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 5, available: 3 });"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() = 5, self.len() = 3",
                "    buffer.put_slice(src);",
                "    panic_advance(&TryGetError { requested: 5, available: 3 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let src: &[u8] = &[1]; // src.len() = 1, self.len() = 0",
                "    buffer.put_slice(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 0);",
                "    assert_eq!(src.len(), 1);",
                "    let result = std::panic::catch_unwind(|| { buffer.put_slice(src); });",
                "    assert!(result.is_err());",
                "    assert_eq!(buffer.len(), 0);"
              ],
              "code": [
                "{",
                "   let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];  ",
                "   let src: &[u8] = &[1]; // src.len() = 1, self.len() = 0  ",
                "   buffer.put_slice(src);  ",
                "   assert_eq!(buffer.len(), 0);  ",
                "   assert_eq!(src.len(), 1);  ",
                "   let result = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| { buffer.put_slice(src); }));  ",
                "   assert!(result.is_err());  ",
                "   assert_eq!(buffer.len(), 0);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
                "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // src.len() = 11, self.len() = 10",
                "    buffer.put_slice(src);",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 11, available: 10 });"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
                "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // src.len() = 11, self.len() = 10",
                "    buffer.put_slice(src);",
                "    panic_advance(&TryGetError { requested: 11, available: 10 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.len() < src.len() at line 1568 is false, with bound self.len() == src.len()\n"
      ],
      "input_infer": "self.len() == src.len() and src.len() > 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let src: &[u8] = &[1, 2, 3];",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 3);",
                "    assert_eq!(buffer[0].assume_init(), 1);",
                "    assert_eq!(buffer[1].assume_init(), 2);",
                "    assert_eq!(buffer[2].assume_init(), 3);"
              ],
              "code": [
                "{",
                "   let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "       core::mem::MaybeUninit::uninit(),",
                "       core::mem::MaybeUninit::uninit(),",
                "       core::mem::MaybeUninit::uninit(),",
                "   ];",
                "   let src: &[u8] = &[1, 2, 3];",
                "   unsafe {",
                "       buffer.put_slice(src);",
                "   }",
                "   assert_eq!(buffer.len(), 3);",
                "   assert_eq!(unsafe { buffer[0].assume_init() }, 1);",
                "   assert_eq!(unsafe { buffer[1].assume_init() }, 2);",
                "   assert_eq!(unsafe { buffer[2].assume_init() }, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let src: &[u8] = &[4, 5];",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 2);",
                "    assert_eq!(buffer[0].assume_init(), 4);",
                "    assert_eq!(buffer[1].assume_init(), 5);"
              ],
              "code": [
                "{",
                "   let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "       core::mem::MaybeUninit::uninit(),",
                "       core::mem::MaybeUninit::uninit(),",
                "   ];",
                "   let src: &[u8] = &[4, 5];",
                "   unsafe {",
                "       buffer.put_slice(src);",
                "   }",
                "   assert_eq!(buffer.len(), 2);",
                "   assert_eq!(unsafe { buffer[0].assume_init() }, 4);",
                "   assert_eq!(unsafe { buffer[1].assume_init() }, 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [];",
                "    let src: &[u8] = &[];",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let src: &[u8] = &[];",
                "    unsafe { buffer.put_slice(src); }",
                "    assert_eq!(buffer.len(), 0);",
                "    assert_eq!(buffer as *const _ as usize, buffer.as_mut_ptr() as usize);",
                "    assert!(core::ptr::eq(buffer.as_mut_ptr(), buffer.as_mut_ptr().offset(0)));"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [];",
                "    let src: &[u8] = &[];",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "    let buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let src: &[u8] = &[];",
                "    unsafe { buffer.put_slice(src); }",
                "    assert_eq!(buffer.len(), 0);",
                "    assert_eq!(buffer as *const _ as usize, buffer.as_mut_ptr() as usize);",
                "    assert!(core::ptr::eq(buffer.as_mut_ptr(), buffer.as_mut_ptr().offset(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let src: &[u8] = &[1, 2, 3, 4];",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 4);",
                "    assert_eq!(buffer[0].assume_init(), 1);",
                "    assert_eq!(buffer[1].assume_init(), 2);",
                "    assert_eq!(buffer[2].assume_init(), 3);",
                "    assert_eq!(buffer[3].assume_init(), 4);"
              ],
              "code": [
                "{",
                "   let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "       core::mem::MaybeUninit::uninit(),",
                "       core::mem::MaybeUninit::uninit(),",
                "       core::mem::MaybeUninit::uninit(),",
                "       core::mem::MaybeUninit::uninit(),",
                "   ];",
                "   let src: &[u8] = &[1, 2, 3, 4];",
                "   unsafe {",
                "       buffer.put_slice(src);",
                "   }",
                "   assert_eq!(buffer.len(), 4);",
                "   assert_eq!(buffer.iter().map(|v| v.assume_init()).collect::<Vec<_>>(), vec![1, 2, 3, 4]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}