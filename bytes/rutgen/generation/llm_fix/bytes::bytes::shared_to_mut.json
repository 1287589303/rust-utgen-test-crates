{
  "name": "bytes::bytes::shared_to_mut",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": false,
  "loc": "src/bytes.rs:1461:1:1463:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "data: AtomicPtr<()>, ptr: *const u8 (non-null), len: usize (0 to maximum usize)\n",
      "answers": [
        {
          "uses": [
            "use core::ptr::null;",
            "use alloc::sync::Arc;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::ptr::null;",
                "    use alloc::sync::Arc;",
                "",
                "    let data = AtomicPtr::new(null());",
                "    let len = 0;",
                "",
                "    unsafe {",
                "        let result = shared_to_mut(&data, null(), len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 0);",
                "    assert!(result.cap() > 0);",
                "    assert!(result.ptr() != null());",
                "    assert!(result.data.is_null());",
                "    assert!(result.is_unique());",
                "    assert!(data.load(Ordering::Relaxed).is_null());",
                "    assert_eq!(data.load(Ordering::Relaxed).cast::<Shared>(), null());",
                "    assert!(result.to_vec().is_empty());",
                "    assert!(result.is_empty());"
              ],
              "code": [
                "{",
                "    use core::ptr::null;",
                "    use alloc::sync::Arc;",
                "",
                "    let data = AtomicPtr::new(null());",
                "    let len = 0;",
                "",
                "    unsafe {",
                "        let result = shared_to_mut(&data, null(), len);",
                "    }",
                "    assert_eq!(result.len(), 0);",
                "    assert!(result.cap() > 0);",
                "    assert!(result.ptr() != null());",
                "    assert!(result.data.is_null());",
                "    assert!(result.is_unique());",
                "    assert!(data.load(Ordering::Relaxed).is_null());",
                "    assert_eq!(data.load(Ordering::Relaxed).cast::<Shared>(), null());",
                "    assert!(result.to_vec().is_empty());",
                "    assert!(result.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use alloc::sync::Arc;",
                "",
                "    let vec = vec![1u8, 2, 3];",
                "    let ptr = vec.as_ptr();",
                "    let len = 3;",
                "",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "    ",
                "    unsafe {",
                "        let result = shared_to_mut(&data, ptr, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let vec = vec![1u8, 2, 3];",
                "    assert_eq!(vec.len(), 3);",
                "    let ptr = vec.as_ptr();",
                "    assert!(!ptr.is_null());",
                "    let len = 3;",
                "    assert_eq!(len, vec.len());",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "    assert_eq!(data.load(Ordering::Relaxed), ptr as *mut ());",
                "    unsafe {",
                "    let result = shared_to_mut(&data, ptr, len);",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.cap, len);",
                "    assert_eq!(unsafe { *result.ptr.as_ptr() }, 1u8);",
                "    }"
              ],
              "code": [
                "{",
                "    use alloc::sync::Arc;",
                "",
                "    let vec = vec![1u8, 2, 3];",
                "    let ptr = vec.as_ptr();",
                "    let len = 3;",
                "",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "    ",
                "    unsafe {",
                "        let result = shared_to_mut(&data, ptr, len);",
                "    }",
                "    let vec = vec![1u8, 2, 3];",
                "    assert_eq!(vec.len(), 3);",
                "    let ptr = vec.as_ptr();",
                "    assert!(!ptr.is_null());",
                "    let len = 3;",
                "    assert_eq!(len, vec.len());",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "    assert_eq!(data.load(Ordering::Relaxed), ptr as *mut ());",
                "    unsafe {",
                "    let result = shared_to_mut(&data, ptr, len);",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.cap, len);",
                "    assert_eq!(unsafe { *result.ptr.as_ptr() }, 1u8);",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use alloc::sync::Arc;",
                "",
                "    let large_vec = vec![0u8; usize::MAX];",
                "    let ptr = large_vec.as_ptr();",
                "    let len = usize::MAX;",
                "",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "",
                "    unsafe {",
                "        let result = shared_to_mut(&data, ptr, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let large_vec = vec![0u8; usize::MAX];",
                "    let ptr = large_vec.as_ptr();",
                "    let len = usize::MAX;",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "    let result = shared_to_mut(&data, ptr, len);",
                "    assert!(result.len() <= usize::MAX);",
                "    assert_eq!(result.cap, usize::MAX);",
                "    assert!(result.ptr.as_ptr() == ptr);"
              ],
              "code": [
                "{",
                "    use alloc::sync::Arc;",
                "",
                "    let large_vec = vec![0u8; usize::MAX];",
                "    let ptr = large_vec.as_ptr();",
                "    let len = usize::MAX;",
                "",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "",
                "    unsafe {",
                "        let result = shared_to_mut(&data, ptr, len);",
                "    }",
                "    let large_vec = vec![0u8; usize::MAX];",
                "    let ptr = large_vec.as_ptr();",
                "    let len = usize::MAX;",
                "    let data = Arc::new(AtomicPtr::new(ptr as *mut ()));",
                "    let result = shared_to_mut(&data, ptr, len);",
                "    assert!(result.len() <= usize::MAX);",
                "    assert_eq!(result.cap, usize::MAX);",
                "    assert!(result.ptr.as_ptr() == ptr);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let data = AtomicPtr::new(null());",
                "    let len = 1;",
                "",
                "    unsafe {",
                "        let result = shared_to_mut(&data, null(), len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data.load(Ordering::Relaxed), null());",
                "    assert_eq!(len, 1);",
                "    let result = shared_to_mut(&data, null(), len);",
                "    assert!(result.len() == 0);",
                "    assert!(result.cap == 0);"
              ],
              "code": [
                "{",
                "    let data = AtomicPtr::new(null());",
                "    let len = 1;",
                "",
                "    unsafe {",
                "        let result = shared_to_mut(&data, null(), len);",
                "    }",
                "    assert_eq!(data.load(Ordering::Relaxed), null());",
                "    assert_eq!(len, 1);",
                "    let result = shared_to_mut(&data, null(), len);",
                "    assert!(result.len() == 0);",
                "    assert!(result.cap == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}