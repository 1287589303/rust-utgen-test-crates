{
  "name": "bytes::buf::buf_mut::BufMut::put_u32_ne",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:574:5:576:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "n: u32 in the range [0, 4294967295] with remaining_mut() >= 4 to avoid panic\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            Self {",
                "                data: vec![0; capacity],",
                "                position: 0,",
                "            }",
                "        }",
                "    ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.data[self.position..self.position + cnt].copy_from_slice(src);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe {",
                "        buf.put_u32_ne(0); // Testing with the minimum value of u32",
                "    }",
                "}"
              ],
              "oracle": [
                "    let mut buf = TestBuf::new(10);",
                "    unsafe { buf.put_u32_ne(u32::MAX) };",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe { buf.put_u32_ne(0x12345678) };",
                "    assert_eq!(buf.data, [0x78, 0x56, 0x34, 0x12]);",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe { buf.put_u32_ne(0x0A0B0C0D) };",
                "    assert_eq!(buf.data, [0x0D, 0x0C, 0x0B, 0x0A]);",
                "    let mut buf = TestBuf::new(3);",
                "    let result = std::panic::catch_unwind(|| { unsafe { buf.put_u32_ne(0x0809A0A1) } });",
                "    assert!(result.is_err());",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe { buf.put_u32_ne(0x0809A0A1) };",
                "    assert_eq!(buf.position, 4);"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            Self {",
                "                data: vec![0; capacity],",
                "                position: 0,",
                "            }",
                "        }",
                "    ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.data[self.position..self.position + cnt].copy_from_slice(src);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe {",
                "        buf.put_u32_ne(0); // Testing with the minimum value of u32",
                "    }",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe { buf.put_u32_ne(u32::MAX) };",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe { buf.put_u32_ne(0x12345678) };",
                "    assert_eq!(buf.data, [0x78, 0x56, 0x34, 0x12]);",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe { buf.put_u32_ne(0x0A0B0C0D) };",
                "    assert_eq!(buf.data, [0x0D, 0x0C, 0x0B, 0x0A]);",
                "    let mut buf = TestBuf::new(3);",
                "    let result = std::panic::catch_unwind(|| { unsafe { buf.put_u32_ne(0x0809A0A1) } });",
                "    assert!(result.is_err());",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe { buf.put_u32_ne(0x0809A0A1) };",
                "    assert_eq!(buf.position, 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            Self {",
                "                data: vec![0; capacity],",
                "                position: 0,",
                "            }",
                "        }",
                "    ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.data[self.position..self.position + cnt].copy_from_slice(src);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe {",
                "        buf.put_u32_ne(4294967295); // Testing with the maximum value of u32",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { vec![0xFF, 0xFF, 0xFF, 0xFF] } else { vec![0xFF, 0xFF, 0xFF, 0xFF] });",
                "    assert!(std::panic::catch_unwind(|| { buf.put_u32_ne(0x12345678); }).is_err());",
                "    let mut buf2 = TestBuf::new(4);",
                "    unsafe {",
                "    buf2.put_u32_ne(1);",
                "    }",
                "    assert_eq!(buf2.data, if cfg!(target_endian = \"big\") { vec![0x00, 0x00, 0x00, 0x01] } else { vec![0x01, 0x00, 0x00, 0x00] });"
              ],
              "code": [
                "   fn test_put_u32_ne_01()  ",
                "   {  ",
                "           struct TestBuf {  ",
                "               data: Vec<u8>,  ",
                "               position: usize,  ",
                "           }  ",
                " ",
                "           impl TestBuf {  ",
                "               fn new(capacity: usize) -> Self {  ",
                "                   Self {  ",
                "                       data: vec![0; capacity],  ",
                "                       position: 0,  ",
                "                   }  ",
                "               }  ",
                " ",
                "               fn remaining_mut(&self) -> usize {  ",
                "                   self.data.len() - self.position  ",
                "               }  ",
                " ",
                "               unsafe fn advance_mut(&mut self, cnt: usize) {  ",
                "                   self.position += cnt;  ",
                "               }  ",
                " ",
                "               fn put_slice(&mut self, src: &[u8]) {  ",
                "                   let cnt = usize::min(src.len(), self.remaining_mut());  ",
                "                   self.data[self.position..self.position + cnt].copy_from_slice(src);  ",
                "                   unsafe { self.advance_mut(cnt) };  ",
                "               }  ",
                " ",
                "               fn put_u32_ne(&mut self, n: u32) {  ",
                "                   let bytes = n.to_ne_bytes();  ",
                "                   self.put_slice(&bytes);  ",
                "               }  ",
                "           }  ",
                " ",
                "           let mut buf = TestBuf::new(10);  ",
                "           unsafe {  ",
                "               buf.put_u32_ne(4294967295); // Testing with the maximum value of u32  ",
                "           }  ",
                "           assert_eq!(buf.data, if cfg!(target_endian = \"big\") { vec![0xFF, 0xFF, 0xFF, 0xFF] } else { vec![0xFF, 0xFF, 0xFF, 0xFF] });  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            Self {",
                "                data: vec![0; capacity],",
                "                position: 0,",
                "            }",
                "        }",
                "    ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.data[self.position..self.position + cnt].copy_from_slice(src);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe {",
                "        buf.put_u32_ne(2147483648); // Testing with a middle value of u32",
                "    }",
                "}"
              ],
              "oracle": [
                "    let mut buf = TestBuf::new(4);",
                "    buf.put_u32_ne(0);",
                "    assert_eq!(buf.data, b\"\\x00\\x00\\x00\\x00\");",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe { buf.put_u32_ne(1); }",
                "    assert_eq!(buf.data, b\"\\x01\\x00\\x00\\x00\");",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe { buf.put_u32_ne(4294967295); }",
                "    if cfg!(target_endian = \"big\") {",
                "    assert_eq!(buf.data, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    } else {",
                "    assert_eq!(buf.data, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    }",
                "    let mut buf = TestBuf::new(3);",
                "    let result = std::panic::catch_unwind(|| unsafe { buf.put_u32_ne(1) });",
                "    assert!(result.is_err());",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe { buf.put_u32_ne(2147483649); }",
                "    assert_eq!(buf.position, 4);"
              ],
              "code": [
                "{",
                "   struct TestBuf {",
                "       data: Vec<u8>,",
                "       position: usize,",
                "   }",
                "",
                "   impl TestBuf {",
                "       fn new(capacity: usize) -> Self {",
                "          Self {  ",
                "              data: ::std::vec![0; capacity],  ",
                "              position: 0,  ",
                "          }  ",
                "      }  ",
                "   ",
                "       fn remaining_mut(&self) -> usize {",
                "           self.data.len() - self.position",
                "       }",
                "",
                "       unsafe fn advance_mut(&mut self, cnt: usize) {",
                "           self.position += cnt;",
                "       }",
                "   ",
                "       fn put_slice(&mut self, src: &[u8]) {",
                "           let cnt = usize::min(src.len(), self.remaining_mut());",
                "           self.data[self.position..self.position + cnt].copy_from_slice(src);",
                "           unsafe { self.advance_mut(cnt) };",
                "       }",
                "       ",
                "       unsafe fn put_u32_ne(&mut self, n: u32) {",
                "           let bytes: [u8; 4] = n.to_ne_bytes();",
                "           self.put_slice(&bytes);",
                "       }",
                "    }",
                "    let mut buf = TestBuf::new(4);",
                "    buf.put_u32_ne(0);",
                "    assert_eq!(buf.data, b\"\\x00\\x00\\x00\\x00\");",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe { buf.put_u32_ne(1); }",
                "    assert_eq!(buf.data, b\"\\x01\\x00\\x00\\x00\");",
                "    let mut buf = TestBuf::new(10);",
                "    unsafe { buf.put_u32_ne(4294967295); }",
                "    if cfg!(target_endian = \"big\") {",
                "    assert_eq!(buf.data, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    } else {",
                "    assert_eq!(buf.data, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    }",
                "    let mut buf = TestBuf::new(3);",
                "    let result = std::panic::catch_unwind(|| unsafe { buf.put_u32_ne(1) });",
                "    assert!(result.is_err());",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe { buf.put_u32_ne(2147483649); }",
                "    assert_eq!(buf.position, 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            Self {",
                "                data: vec![0; capacity],",
                "                position: 0,",
                "            }",
                "        }",
                "    ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            let cnt = usize::min(src.len(), self.remaining_mut());",
                "            self.data[self.position..self.position + cnt].copy_from_slice(src);",
                "            unsafe { self.advance_mut(cnt) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe {",
                "        buf.put_u32_ne(123456); // Testing with exact remaining capacity",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.data, b\"\\x00\\x01\\xE2\\x40\");",
                "    let mut buf2 = TestBuf::new(2);",
                "    unsafe {",
                "    buf2.put_u32_ne(123456); // This should panic due to insufficient capacity",
                "    }",
                "    assert_eq!(buf2.remaining_mut(), 2);",
                "    let mut buf3 = TestBuf::new(8);",
                "    unsafe {",
                "    buf3.put_u32_ne(0xFFFFFFFF); // Testing with maximum u32 value",
                "    }",
                "    assert_eq!(buf3.data, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    let mut buf4 = TestBuf::new(4);",
                "    unsafe {",
                "    buf4.put_u32_ne(0x12345678); // Testing with lower values",
                "    }",
                "    assert_eq!(buf4.data, b\"\\x78\\x56\\x34\\x12\");"
              ],
              "code": [
                "{",
                "  struct TestBuf {",
                "      data: Vec<u8>,",
                "      position: usize,",
                "  }",
                "",
                "  impl TestBuf {",
                "      fn new(capacity: usize) -> Self {",
                "          Self {",
                "              data: vec![0; capacity],",
                "               position: 0,",
                "           }",
                "       }",
                "   ",
                "       fn remaining_mut(&self) -> usize {",
                "           self.data.len() - self.position",
                "       }",
                "",
                "       unsafe fn advance_mut(&mut self, cnt: usize) {",
                "           self.position += cnt;",
                "       }",
                "",
                "       fn put_slice(&mut self, src: &[u8]) {",
                "           let cnt = usize::min(src.len(), self.remaining_mut());",
                "           self.data[self.position..self.position + cnt].copy_from_slice(src);",
                "           unsafe { self.advance_mut(cnt) };",
                "       }",
                "      ",
                "      unsafe fn put_u32_ne(&mut self, n: u32) {",
                "          let bytes = n.to_ne_bytes();",
                "          self.put_slice(&bytes);",
                "      }",
                "  }",
                "",
                "  let mut buf = TestBuf::new(4);",
                "  unsafe {",
                "      buf.put_u32_ne(123456); // Testing with exact remaining capacity",
                "  }",
                "  assert_eq!(buf.data, b\"\\x00\\x01\\xE2\\x40\");",
                "  let mut buf2 = TestBuf::new(2);",
                "  unsafe {",
                "      buf2.put_u32_ne(123456); // This should panic due to insufficient capacity",
                "  }",
                "  assert_eq!(buf2.remaining_mut(), 2);",
                "  let mut buf3 = TestBuf::new(8);",
                "  unsafe {",
                "      buf3.put_u32_ne(0xFFFFFFFF); // Testing with maximum u32 value",
                "  }",
                "  assert_eq!(buf3.data, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}