{
  "name": "bytes::buf::buf_impl::{impl#3}::advance",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:2941:5:2957:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: cnt > max_cnt at line 2947 is true\n"
      ],
      "input_infer": "cnt > saturating_sub_usize_u64(len, pos) with cnt > 0 and len > 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Cursor {",
                "        position: u64,",
                "        data: Vec<u8>,",
                "    }",
                "",
                "    impl Cursor {",
                "        fn new(data: Vec<u8>) -> Self {",
                "            Self { position: 0, data }",
                "        }",
                "        ",
                "        fn get_ref(&self) -> &Vec<u8> {",
                "            &self.data",
                "        }",
                "",
                "        fn position(&self) -> u64 {",
                "            self.position",
                "        }",
                "",
                "        fn set_position(&mut self, pos: u64) {",
                "            self.position = pos;",
                "        }",
                "    }",
                "",
                "    impl std::io::Cursor<Vec<u8>> for Cursor {",
                "        fn remaining(&self) -> usize {",
                "            self.get_ref().len() - self.position as usize",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            let len = self.get_ref().len();",
                "            let pos = self.position();",
                "            let max_cnt = saturating_sub_usize_u64(len, pos);",
                "            if cnt > max_cnt {",
                "                panic_advance(&TryGetError {",
                "                    requested: cnt,",
                "                    available: max_cnt,",
                "                });",
                "            }",
                "            self.set_position(pos + cnt as u64);",
                "        }",
                "    }",
                "",
                "    let data = vec![0u8; 10];",
                "    let mut cursor = Cursor::new(data);",
                "    cursor.set_position(8); // Set position near the end",
                "    let cnt = 3; // Allows us to exceed the maximum count",
                "",
                "    // This call should trigger panic due to overflow",
                "    cursor.advance(cnt);",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 3, available: 2 });"
              ],
              "code": [
                "{",
                "    struct Cursor {",
                "        position: u64,",
                "        data: Vec<u8>,",
                "    }",
                "",
                "    impl Cursor {",
                "        fn new(data: Vec<u8>) -> Self {",
                "            Self { position: 0, data }",
                "        }",
                "        ",
                "        fn get_ref(&self) -> &Vec<u8> {",
                "            &self.data",
                "        }",
                "",
                "        fn position(&self) -> u64 {",
                "            self.position",
                "        }",
                "",
                "        fn set_position(&mut self, pos: u64) {",
                "            self.position = pos;",
                "        }",
                "    }",
                "",
                "    impl std::io::Cursor<Vec<u8>> for Cursor {",
                "        fn remaining(&self) -> usize {",
                "            self.get_ref().len() - self.position as usize",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            let len = self.get_ref().len();",
                "            let pos = self.position();",
                "            let max_cnt = saturating_sub_usize_u64(len, pos);",
                "            if cnt > max_cnt {",
                "                panic_advance(&TryGetError {",
                "                    requested: cnt,",
                "                    available: max_cnt,",
                "                });",
                "            }",
                "            self.set_position(pos + cnt as u64);",
                "        }",
                "    }",
                "",
                "    let data = vec![0u8; 10];",
                "    let mut cursor = Cursor::new(data);",
                "    cursor.set_position(8); // Set position near the end",
                "    let cnt = 3; // Allows us to exceed the maximum count",
                "",
                "    // This call should trigger panic due to overflow",
                "    cursor.advance(cnt);",
                "    panic_advance(&TryGetError { requested: 3, available: 2 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: cnt > max_cnt at line 2947 is false, with bound cnt == max_cnt\n"
      ],
      "input_infer": "cnt is in the range [0, max_cnt] where max_cnt = len - position, and len is the length of the buffer referenced by self.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = vec![1, 2, 3, 4, 5];",
                "    let mut cursor = std::io::Cursor::new(data);",
                "    let initial_pos = cursor.position();",
                "    cursor.advance(0);",
                "    assert_eq!(initial_pos, cursor.position());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.remaining(), 5);",
                "    assert_eq!(cursor.chunk(), &[1, 2, 3, 4, 5]);",
                "    cursor.advance(5);",
                "    assert_eq!(cursor.position(), initial_pos + 5);",
                "    assert!(cursor.remaining() == 0);",
                "    cursor.advance(0);",
                "    assert_eq!(cursor.position(), initial_pos + 5);"
              ],
              "code": [
                "{",
                "    let data = vec![1, 2, 3, 4, 5];",
                "    let mut cursor = std::io::Cursor::new(data);",
                "    let initial_pos = cursor.position();",
                "    cursor.advance(0);",
                "    assert_eq!(initial_pos, cursor.position());",
                "    assert_eq!(cursor.remaining(), 5);",
                "    assert_eq!(cursor.chunk(), &[1, 2, 3, 4, 5]);",
                "    cursor.advance(5);",
                "    assert_eq!(cursor.position(), initial_pos + 5);",
                "    assert!(cursor.remaining() == 0);",
                "    cursor.advance(0);",
                "    assert_eq!(cursor.position(), initial_pos + 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = vec![1, 2, 3, 4, 5];",
                "    let mut cursor = std::io::Cursor::new(data);",
                "    let length = cursor.get_ref().as_ref().len() as u64;",
                "    cursor.advance(length - cursor.position());",
                "    assert_eq!(cursor.position(), length);",
                "}"
              ],
              "oracle": [
                "    assert!(cursor.remaining() == 0);",
                "    assert!(cursor.position() == length);",
                "    cursor.advance(0);",
                "    assert!(cursor.position() == length);",
                "    cursor.advance(length as usize);",
                "    assert!(cursor.position() == length);"
              ],
              "code": [
                "{",
                "    let data = vec![1, 2, 3, 4, 5];",
                "    let mut cursor = std::io::Cursor::new(data);",
                "    let length = cursor.get_ref().as_ref().len() as u64;",
                "    cursor.advance(length - cursor.position());",
                "    assert_eq!(cursor.position(), length);",
                "    assert!(cursor.remaining() == 0);",
                "    assert!(cursor.position() == length);",
                "    cursor.advance(0);",
                "    assert!(cursor.position() == length);",
                "    cursor.advance(length as usize);",
                "    assert!(cursor.position() == length);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = vec![1, 2, 3, 4, 5];",
                "    let mut cursor = std::io::Cursor::new(data);",
                "    let initial_pos = cursor.position();",
                "    cursor.advance(3);",
                "    assert_eq!(cursor.position(), initial_pos + 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cursor.position(), initial_pos + cnt);",
                "    assert!(cursor.remaining() >= 0);",
                "    assert!(!cursor.has_remaining());",
                "    assert_eq!(cursor.get_ref().as_ref().len(), 5);",
                "    assert_eq!(cursor.position(), initial_pos + 3);",
                "    assert!(cursor.remaining() == 2);",
                "    assert!(cursor.try_get_u8().is_ok());",
                "    assert!(cursor.try_get_i8().is_ok());",
                "    assert!(cursor.try_get_u16().is_ok());",
                "    assert_eq!(cursor.remaining(), 2);",
                "    assert!(cursor.try_get_u32().is_err());",
                "    assert!(cursor.try_get_u64().is_err());",
                "    assert!(cursor.try_get_u128().is_err());"
              ],
              "code": [
                "{",
                "    let data = vec![1, 2, 3, 4, 5];",
                "    let mut cursor = std::io::Cursor::new(data);",
                "    let initial_pos = cursor.position();",
                "    cursor.advance(3);",
                "    assert_eq!(cursor.position(), initial_pos + 3);",
                "    assert_eq!(cursor.position(), initial_pos + cnt);",
                "    assert!(cursor.remaining() >= 0);",
                "    assert!(!cursor.has_remaining());",
                "    assert_eq!(cursor.get_ref().as_ref().len(), 5);",
                "    assert_eq!(cursor.position(), initial_pos + 3);",
                "    assert!(cursor.remaining() == 2);",
                "    assert!(cursor.try_get_u8().is_ok());",
                "    assert!(cursor.try_get_i8().is_ok());",
                "    assert!(cursor.try_get_u16().is_ok());",
                "    assert_eq!(cursor.remaining(), 2);",
                "    assert!(cursor.try_get_u32().is_err());",
                "    assert!(cursor.try_get_u64().is_err());",
                "    assert!(cursor.try_get_u128().is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}