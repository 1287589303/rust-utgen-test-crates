{
  "name": "bytes::buf::buf_mut::{impl#2}::chunk_mut",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1492:5:1494:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: UninitSlice::new(self)\n"
      ],
      "input_infer": "self must be a mutable slice of length greater than 0 containing MaybeUninit<u8> elements.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let result = buf.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 2);",
                "    assert!(result.as_mut_ptr() != core::ptr::null_mut());",
                "    assert!(result as *mut _ as *mut core::mem::MaybeUninit<u8> == buf as *mut _);",
                "    assert!(core::mem::size_of_val(result) == core::mem::size_of::<UninitSlice>());"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let result = buf.chunk_mut();",
                "    assert_eq!(result.len(), 2);",
                "    assert!(result.as_mut_ptr() != core::ptr::null_mut());",
                "    assert!(result as *mut _ as *mut core::mem::MaybeUninit<u8> == buf as *mut _);",
                "    assert!(core::mem::size_of_val(result) == core::mem::size_of::<UninitSlice>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let result = buf.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert!(core::ptr::eq(result.as_mut_ptr(), buf.as_mut_ptr()));",
                "    assert!(unsafe { result.as_uninit_slice_mut() }.len() == 1);",
                "    assert!(result as *mut _ == buf as *mut _);"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let result = buf.chunk_mut();",
                "    assert_eq!(result.len(), 1);",
                "    assert!(core::ptr::eq(result.as_mut_ptr(), buf.as_mut_ptr()));",
                "    assert!(unsafe { result.as_uninit_slice_mut() }.len() == 1);",
                "    assert!(result as *mut _ == buf as *mut _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let result = buf.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 5);",
                "    assert!(unsafe { core::mem::transmute::<&UninitSlice, &mut [core::mem::MaybeUninit<u8>]>(result) }.len() == 5);",
                "    assert!(!ptr::null_eq(result.as_mut_ptr()));",
                "    assert_eq!(result.as_mut_ptr() as *const u8, buf.as_mut_ptr() as *const u8);",
                "    assert!(result.as_mut_ptr() != ptr::null_mut());",
                "    assert!(unsafe { core::ptr::read(result.as_mut_ptr()) }.is_uninit());"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "        core::mem::MaybeUninit::uninit(),",
                "    ];",
                "    let result = buf.chunk_mut();",
                "    assert_eq!(result.len(), 5);",
                "    assert!(unsafe { core::mem::transmute::<&UninitSlice, &mut [core::mem::MaybeUninit<u8>]>(result) }.len() == 5);",
                "    assert!(!ptr::null_eq(result.as_mut_ptr()));",
                "    assert_eq!(result.as_mut_ptr() as *const u8, buf.as_mut_ptr() as *const u8);",
                "    assert!(result.as_mut_ptr() != ptr::null_mut());",
                "    assert!(unsafe { core::ptr::read(result.as_mut_ptr()) }.is_uninit());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}