{
  "name": "bytes::bytes::shared_is_unique",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:1465:1:1469:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ref_cnt == 1\n"
      ],
      "input_infer": "AtomicPtr that points to a valid Shared struct, with ref_cnt set to 1; AtomicPtr that points to a valid Shared struct, with ref_cnt greater than 1; AtomicPtr that is null or uninitialized; AtomicPtr that points to memory not allocated as Shared.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: std::ptr::null_mut(),",
                "        cap: 0,",
                "        ref_cnt: AtomicUsize::new(1),",
                "    }));",
                "    let atomic_ptr = AtomicPtr::new(shared);",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: std::ptr::null_mut(),",
                "        cap: 0,",
                "        ref_cnt: AtomicUsize::new(1),",
                "    }));",
                "    let atomic_ptr = AtomicPtr::new(shared);",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: std::ptr::null_mut(),",
                "        cap: 0,",
                "        ref_cnt: AtomicUsize::new(2),",
                "    }));",
                "    let atomic_ptr = AtomicPtr::new(shared);",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let shared = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(2) }));",
                "    let atomic_ptr = AtomicPtr::new(shared);",
                "    unsafe { let result = shared_is_unique(&atomic_ptr); assert_eq!(result, false); }",
                "    shared.ref_cnt.store(1, Ordering::Relaxed);",
                "    unsafe { let result = shared_is_unique(&atomic_ptr); assert_eq!(result, true); }",
                "    shared.ref_cnt.store(0, Ordering::Relaxed);",
                "    unsafe { let result = shared_is_unique(&atomic_ptr); assert_eq!(result, false); }"
              ],
              "code": [
                "{",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        buf: std::ptr::null_mut(),",
                "        cap: 0,",
                "        ref_cnt: AtomicUsize::new(2),",
                "    }));",
                "    let atomic_ptr = AtomicPtr::new(shared);",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "    let shared = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(2) }));",
                "    let atomic_ptr = AtomicPtr::new(shared);",
                "    unsafe { let result = shared_is_unique(&atomic_ptr); assert_eq!(result, false); }",
                "    shared.ref_cnt.store(1, Ordering::Relaxed);",
                "    unsafe { let result = shared_is_unique(&atomic_ptr); assert_eq!(result, true); }",
                "    shared.ref_cnt.store(0, Ordering::Relaxed);",
                "    unsafe { let result = shared_is_unique(&atomic_ptr); assert_eq!(result, false); }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let atomic_ptr = AtomicPtr::new(std::ptr::null_mut());",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let atomic_ptr = AtomicPtr::new(std::ptr::null_mut());",
                "    assert_eq!(shared_is_unique(&atomic_ptr), false);",
                "    ",
                "    let shared_buf = Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(0) };",
                "    let atomic_ptr = AtomicPtr::new(&shared_buf as *const _ as *mut _);",
                "    assert_eq!(shared_is_unique(&atomic_ptr), false);",
                "    ",
                "    let shared_buf = Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(1) };",
                "    let atomic_ptr = AtomicPtr::new(&shared_buf as *const _ as *mut _);",
                "    assert_eq!(shared_is_unique(&atomic_ptr), true);",
                "    ",
                "    let shared_buf = Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(2) };",
                "    let atomic_ptr = AtomicPtr::new(&shared_buf as *const _ as *mut _);",
                "    assert_eq!(shared_is_unique(&atomic_ptr), false);"
              ],
              "code": [
                "{",
                "    let atomic_ptr = AtomicPtr::new(std::ptr::null_mut());",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "    let atomic_ptr = AtomicPtr::new(std::ptr::null_mut());",
                "    assert_eq!(shared_is_unique(&atomic_ptr), false);",
                "    ",
                "    let shared_buf = Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(0) };",
                "    let atomic_ptr = AtomicPtr::new(&shared_buf as *const _ as *mut _);",
                "    assert_eq!(shared_is_unique(&atomic_ptr), false);",
                "    ",
                "    let shared_buf = Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(1) };",
                "    let atomic_ptr = AtomicPtr::new(&shared_buf as *const _ as *mut _);",
                "    assert_eq!(shared_is_unique(&atomic_ptr), true);",
                "    ",
                "    let shared_buf = Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(2) };",
                "    let atomic_ptr = AtomicPtr::new(&shared_buf as *const _ as *mut _);",
                "    assert_eq!(shared_is_unique(&atomic_ptr), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let invalid_ptr = std::ptr::null_mut(); // Simulating invalid memory",
                "    let atomic_ptr = AtomicPtr::new(invalid_ptr);",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let invalid_ptr = std::ptr::null_mut(); // Simulating invalid memory",
                "    let atomic_ptr = AtomicPtr::new(invalid_ptr);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, false); // Expect false for invalid AtomicPtr",
                "    }",
                "    ",
                "    let shared_memory = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(0) }));",
                "    let atomic_ptr = AtomicPtr::new(shared_memory);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, false); // Expect false for ref_cnt == 0",
                "    }",
                "    ",
                "    let shared_memory = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(1) }));",
                "    let atomic_ptr = AtomicPtr::new(shared_memory);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, true); // Expect true for ref_cnt == 1",
                "    }",
                "    ",
                "    let shared_memory = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(2) }));",
                "    let atomic_ptr = AtomicPtr::new(shared_memory);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, false); // Expect false for ref_cnt > 1",
                "    }"
              ],
              "code": [
                "{",
                "    let invalid_ptr = std::ptr::null_mut(); // Simulating invalid memory",
                "    let atomic_ptr = AtomicPtr::new(invalid_ptr);",
                "    unsafe {",
                "        let result = shared_is_unique(&atomic_ptr);",
                "    }",
                "    let invalid_ptr = std::ptr::null_mut(); // Simulating invalid memory",
                "    let atomic_ptr = AtomicPtr::new(invalid_ptr);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, false); // Expect false for invalid AtomicPtr",
                "    }",
                "    ",
                "    let shared_memory = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(0) }));",
                "    let atomic_ptr = AtomicPtr::new(shared_memory);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, false); // Expect false for ref_cnt == 0",
                "    }",
                "    ",
                "    let shared_memory = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(1) }));",
                "    let atomic_ptr = AtomicPtr::new(shared_memory);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, true); // Expect true for ref_cnt == 1",
                "    }",
                "    ",
                "    let shared_memory = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(2) }));",
                "    let atomic_ptr = AtomicPtr::new(shared_memory);",
                "    unsafe {",
                "    let result = shared_is_unique(&atomic_ptr);",
                "    assert_eq!(result, false); // Expect false for ref_cnt > 1",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}