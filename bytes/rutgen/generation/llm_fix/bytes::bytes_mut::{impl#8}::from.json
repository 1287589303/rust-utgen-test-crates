{
  "name": "bytes::bytes_mut::{impl#8}::from",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1262:5:1264:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "src must be a slice of u8; valid ranges for length: 0 to usize::MAX; elements in src must be valid u8 values (0 to 255).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src: &[u8] = &[];",
                "    let _result = BytesMut::from(src);",
                "}"
              ],
              "oracle": [
                "    let src: &[u8] = &[];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 0);",
                "    assert!(result.is_empty());",
                "    assert_eq!(result.capacity(), 0);",
                "    ",
                "    let src: &[u8] = &[1, 2, 3];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 3);",
                "    assert!(!result.is_empty());",
                "    assert!(result.capacity() >= 3);",
                "    assert_eq!(result.as_slice(), &[1, 2, 3]);",
                "    ",
                "    let src: &[u8] = &[4, 5, 6, 7, 8, 9, 10];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 7);",
                "    assert_eq!(result.as_slice(), &[4, 5, 6, 7, 8, 9, 10]);",
                "    assert!(result.capacity() >= 7);",
                "    ",
                "    let src: &[u8] = &[b'a', b'b', b'c', b'd'];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 4);",
                "    assert_eq!(result.as_slice(), &[b'a', b'b', b'c', b'd']);",
                "    ",
                "    let src: &[u8] = &[b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9', b'0'];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 10);",
                "    assert_eq!(result.as_slice(), &[b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9', b'0']);",
                "    assert!(result.capacity() >= 10);"
              ],
              "code": [
                "{",
                "    let src: &[u8] = &[];",
                "    let _result = BytesMut::from(src);",
                "    let src: &[u8] = &[];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 0);",
                "    assert!(result.is_empty());",
                "    assert_eq!(result.capacity(), 0);",
                "    ",
                "    let src: &[u8] = &[1, 2, 3];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 3);",
                "    assert!(!result.is_empty());",
                "    assert!(result.capacity() >= 3);",
                "    assert_eq!(result.as_slice(), &[1, 2, 3]);",
                "    ",
                "    let src: &[u8] = &[4, 5, 6, 7, 8, 9, 10];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 7);",
                "    assert_eq!(result.as_slice(), &[4, 5, 6, 7, 8, 9, 10]);",
                "    assert!(result.capacity() >= 7);",
                "    ",
                "    let src: &[u8] = &[b'a', b'b', b'c', b'd'];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 4);",
                "    assert_eq!(result.as_slice(), &[b'a', b'b', b'c', b'd']);",
                "    ",
                "    let src: &[u8] = &[b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9', b'0'];",
                "    let result = BytesMut::from(src);",
                "    assert_eq!(result.len(), 10);",
                "    assert_eq!(result.as_slice(), &[b'1', b'2', b'3', b'4', b'5', b'6', b'7', b'8', b'9', b'0']);",
                "    assert!(result.capacity() >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src: &[u8] = &[1, 2, 3];",
                "    let _result = BytesMut::from(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.len(), 3);",
                "    assert!(!_result.is_empty());",
                "    assert!(std::mem::size_of_val(&_result) > 0);",
                "    assert_eq!(_result.as_slice(), &[1, 2, 3]);",
                "    assert!(std::ptr::eq(_result.as_slice().as_ptr(), src.as_ptr()));"
              ],
              "code": [
                "{",
                "    let src: &[u8] = &[1, 2, 3];",
                "    let _result = BytesMut::from(src);",
                "    assert_eq!(_result.len(), 3);",
                "    assert!(!_result.is_empty());",
                "    assert!(std::mem::size_of_val(&_result) > 0);",
                "    assert_eq!(_result.as_slice(), &[1, 2, 3]);",
                "    assert!(std::ptr::eq(_result.as_slice().as_ptr(), src.as_ptr()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src: &[u8] = &[255; 1024];",
                "    let _result = BytesMut::from(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.len(), 1024);",
                "    assert_eq!(_result.capacity(), 1024);",
                "    assert!(!_result.is_empty());",
                "    assert_eq!(_result.as_slice(), &[255; 1024]);",
                "    assert_eq!(unsafe { _result.kind() }, KIND_VEC);",
                "    assert_eq!(unsafe { _result.get_vec_pos() }, 0);"
              ],
              "code": [
                "{",
                "    let src: &[u8] = &[255; 1024];",
                "    let _result = BytesMut::from(src);",
                "    assert_eq!(_result.len(), 1024);",
                "    assert_eq!(_result.capacity(), 1024);",
                "    assert!(!_result.is_empty());",
                "    assert_eq!(_result.as_slice(), &[255; 1024]);",
                "    assert_eq!(unsafe { _result.kind() }, KIND_VEC);",
                "    assert_eq!(unsafe { _result.get_vec_pos() }, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src: &[u8] = &[42];",
                "    let _result = BytesMut::from(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.len(), 1);",
                "    assert!(!_result.is_empty());",
                "    assert_eq!(_result.capacity(), 1);",
                "    assert_eq!(_result.as_slice(), &[42]);",
                "    ",
                "    let empty_src: &[u8] = &[];",
                "    let empty_result = BytesMut::from(empty_src);",
                "    assert_eq!(empty_result.len(), 0);",
                "    assert!(empty_result.is_empty());",
                "    assert_eq!(empty_result.capacity(), 0);",
                "    assert_eq!(empty_result.as_slice(), &[]);",
                "    ",
                "    let large_src: &[u8] = &[1, 2, 3, 4, 5];",
                "    let large_result = BytesMut::from(large_src);",
                "    assert_eq!(large_result.len(), 5);",
                "    assert!(!large_result.is_empty());",
                "    assert!(large_result.capacity() >= 5);",
                "    assert_eq!(large_result.as_slice(), &[1, 2, 3, 4, 5]);"
              ],
              "code": [
                "{",
                "    let src: &[u8] = &[42];",
                "    let _result = BytesMut::from(src);",
                "    assert_eq!(_result.len(), 1);",
                "    assert!(!_result.is_empty());",
                "    assert_eq!(_result.capacity(), 1);",
                "    assert_eq!(_result.as_slice(), &[42]);",
                "    ",
                "    let empty_src: &[u8] = &[];",
                "    let empty_result = BytesMut::from(empty_src);",
                "    assert_eq!(empty_result.len(), 0);",
                "    assert!(empty_result.is_empty());",
                "    assert_eq!(empty_result.capacity(), 0);",
                "    assert_eq!(empty_result.as_slice(), &[]);",
                "    ",
                "    let large_src: &[u8] = &[1, 2, 3, 4, 5];",
                "    let large_result = BytesMut::from(large_src);",
                "    assert_eq!(large_result.len(), 5);",
                "    assert!(!large_result.is_empty());",
                "    assert!(large_result.capacity() >= 5);",
                "    assert_eq!(large_result.as_slice(), &[1, 2, 3, 4, 5]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src: &[u8] = &(0..=255).collect::<Vec<u8>>();",
                "    let _result = BytesMut::from(src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.len(), 256);",
                "    assert_eq!(_result.capacity(), 256);",
                "    assert_eq!(_result.as_slice(), &(0..=255).collect::<Vec<u8>>()[..]);",
                "    assert!(!_result.is_empty());",
                "    assert!(std::ptr::eq(_result.as_slice().as_ptr(), src.as_ptr()));"
              ],
              "code": [
                "{",
                "    let src: &[u8] = &(0..=255).collect::<Vec<u8>>();",
                "    let _result = BytesMut::from(src);",
                "    assert_eq!(_result.len(), 256);",
                "    assert_eq!(_result.capacity(), 256);",
                "    assert_eq!(_result.as_slice(), &(0..=255).collect::<Vec<u8>>()[..]);",
                "    assert!(!_result.is_empty());",
                "    assert!(std::ptr::eq(_result.as_slice().as_ptr(), src.as_ptr()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let src: Vec<u8> = (0..usize::MAX as u8).collect();",
                "    let _result = BytesMut::from(&src);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(BytesMut::from(&[]).len(), 0);",
                "    assert_eq!(BytesMut::from(&[1, 2, 3]).len(), 3);",
                "    assert!(BytesMut::from(&[1, 2, 3]).is_empty() == false);",
                "    assert_eq!(BytesMut::from(&[1, 2, 3]).capacity(), 3);",
                "    assert_eq!(BytesMut::from(&[1, 2, 3]).as_slice(), &[1, 2, 3]);",
                "    assert_eq!(BytesMut::from(&[0; 100]).len(), 100);",
                "    assert_eq!(BytesMut::from(&[0; 100]).capacity(), 100);"
              ],
              "code": [
                "{",
                "    let src: Vec<u8> = (0..usize::MAX as u8).collect();",
                "    let _result = BytesMut::from(&src);",
                "    assert_eq!(BytesMut::from(&[]).len(), 0);",
                "    assert_eq!(BytesMut::from(&[1, 2, 3]).len(), 3);",
                "    assert!(BytesMut::from(&[1, 2, 3]).is_empty() == false);",
                "    assert_eq!(BytesMut::from(&[1, 2, 3]).capacity(), 3);",
                "    assert_eq!(BytesMut::from(&[1, 2, 3]).as_slice(), &[1, 2, 3]);",
                "    assert_eq!(BytesMut::from(&[0; 100]).len(), 100);",
                "    assert_eq!(BytesMut::from(&[0; 100]).capacity(), 100);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}