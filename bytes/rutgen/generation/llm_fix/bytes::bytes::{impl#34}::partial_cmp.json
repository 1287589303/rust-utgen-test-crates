{
  "name": "bytes::bytes::{impl#34}::partial_cmp",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:908:5:910:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: &[u8], other: &[u8] with lengths from 0 to max length (usize::MAX) for boundary testing, also including cases where self and other are equal, self is less than other, self is greater than other, and when one is empty while the other has data.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 5];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 5];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    let self_bytes: &[u8] = &[1, 2, 2];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[0];",
                "    let other_bytes: &[u8] = &[1];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    let self_bytes: &[u8] = &[1, 2, 2];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[0];",
                "    let other_bytes: &[u8] = &[1];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3, 4];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 4];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3, 4];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    ",
                "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[3, 2, 1];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[3, 2, 1];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_bytes: &[u8] = &[0];",
                "    let other_bytes: &[u8] = &[];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[0];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_bytes: &[u8] = &[1, 2, 3];",
                "    let other_bytes: &[u8] = &[3, 2, 1];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[3, 2, 1];",
                "    let other_bytes: &[u8] = &[1, 2, 3];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_bytes: &[u8] = &[0];",
                "    let other_bytes: &[u8] = &[];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[0];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Less));",
                "    let self_bytes: &[u8] = &[];",
                "    let other_bytes: &[u8] = &[];",
                "    assert_eq!(self_bytes.partial_cmp(other_bytes), Some(cmp::Ordering::Equal));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[1; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    assert!(result.is_some());",
                "    assert!(self_bytes.partial_cmp(self_bytes).is_some());",
                "    assert_eq!(self_bytes.partial_cmp(&[0; 1024]), Some(cmp::Ordering::Equal));",
                "    assert_eq!(self_bytes.partial_cmp(&[2; 512]), Some(cmp::Ordering::Less));",
                "    assert_eq!(self_bytes.partial_cmp(&[0; 0]), Some(cmp::Ordering::Equal));"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[1; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    assert!(result.is_some());",
                "    assert!(self_bytes.partial_cmp(self_bytes).is_some());",
                "    assert_eq!(self_bytes.partial_cmp(&[0; 1024]), Some(cmp::Ordering::Equal));",
                "    assert_eq!(self_bytes.partial_cmp(&[2; 512]), Some(cmp::Ordering::Less));",
                "    assert_eq!(self_bytes.partial_cmp(&[0; 0]), Some(cmp::Ordering::Equal));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_bytes: &[u8] = &[1; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "}"
              ],
              "oracle": [
                "    let self_bytes: &[u8] = &[1; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let self_bytes: &[u8] = &[1; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    let self_bytes: &[u8] = &[1; usize::MAX / 2];",
                "    let other_bytes: &[u8] = &[0; usize::MAX / 2];",
                "    let result = self_bytes.partial_cmp(other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}