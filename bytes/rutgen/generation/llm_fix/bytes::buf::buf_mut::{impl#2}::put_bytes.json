{
  "name": "bytes::buf::buf_mut::{impl#2}::put_bytes",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1525:5:1538:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.len() < cnt at line 1526 is true\n"
      ],
      "input_infer": "self.len() ranging from 0 to (cnt - 1) inclusive, with cnt being any positive integer value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 1;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 1;",
                "    let result = std::panic::catch_unwind(|| {",
                "    unsafe {",
                "    buffer.put_bytes(val, cnt);",
                "    }",
                "    });",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().downcast_ref::<String>(), Some(&\"advance out of bounds: the len is 0 but advancing by 1\".to_string()));"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 1;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 1;",
                "    let result = std::panic::catch_unwind(|| {",
                "    unsafe {",
                "    buffer.put_bytes(val, cnt);",
                "    }",
                "    });",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().downcast_ref::<String>(), Some(&\"advance out of bounds: the len is 0 but advancing by 1\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 2;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 2, available: 1 });"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 2;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "    panic_advance(&TryGetError { requested: 2, available: 1 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 10;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "}"
              ],
              "oracle": [
                "    panic_advance was called with TryGetError { requested: 10, available: 5 } at line 1527."
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 10;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "    panic_advance was called with TryGetError { requested: 10, available: 5 } at line 1527.",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 20;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 20, available: 10 });"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 20;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "    panic_advance(&TryGetError { requested: 20, available: 10 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 99];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 100;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "}"
              ],
              "oracle": [
                "    panic_advance(TryGetError { requested: 100, available: 99 });"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 99];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 100;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "    panic_advance(TryGetError { requested: 100, available: 99 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 100];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 200;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 200, available: 100 });"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 100];",
                "    let val: u8 = 42;",
                "    let cnt: usize = 200;",
                "    unsafe {",
                "        buffer.put_bytes(val, cnt);",
                "    }",
                "    panic_advance(&TryGetError { requested: 200, available: 100 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.len() < cnt at line 1526 is false, with bound self.len() == cnt\n"
      ],
      "input_infer": "self.len() == cnt and self.len() > 0; val can be any u8 value (0 to 255)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 4];",
                "    let value: u8 = 42;",
                "    let count: usize = 4;",
                "    unsafe {",
                "        buffer.put_bytes(value, count);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer[0].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert_eq!(buffer[1].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert_eq!(buffer[2].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert_eq!(buffer[3].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert!(buffer.len() > count);"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 4];",
                "    let value: u8 = 42;",
                "    let count: usize = 4;",
                "    unsafe {",
                "        buffer.put_bytes(value, count);",
                "    }",
                "    assert_eq!(buffer[0].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert_eq!(buffer[1].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert_eq!(buffer[2].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert_eq!(buffer[3].as_ptr(), &value as *const u8 as *const core::mem::MaybeUninit<u8>);",
                "    assert!(buffer.len() > count);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let value: u8 = 255;",
                "    let count: usize = 3;",
                "    unsafe {",
                "        buffer.put_bytes(value, count);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 3);",
                "    assert_eq!(ptr::read(buffer.as_ptr() as *const u8), 255);",
                "    assert_eq!(ptr::read((buffer.as_ptr() as *const u8).add(1)), 255);",
                "    assert_eq!(ptr::read((buffer.as_ptr() as *const u8).add(2)), 255);"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let value: u8 = 255;",
                "    let count: usize = 3;",
                "    unsafe {",
                "        buffer.put_bytes(value, count);",
                "    }",
                "    assert_eq!(buffer.len(), 3);",
                "    assert_eq!(ptr::read(buffer.as_ptr() as *const u8), 255);",
                "    assert_eq!(ptr::read((buffer.as_ptr() as *const u8).add(1)), 255);",
                "    assert_eq!(ptr::read((buffer.as_ptr() as *const u8).add(2)), 255);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let value: u8 = 1;",
                "    let count: usize = 1;",
                "    unsafe {",
                "        buffer.put_bytes(value, count);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 1);",
                "    assert_eq!(ptr::read(buffer.as_ptr() as *const u8), 1);"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let value: u8 = 1;",
                "    let count: usize = 1;",
                "    unsafe {",
                "        buffer.put_bytes(value, count);",
                "    }",
                "    assert_eq!(buffer.len(), 1);",
                "    assert_eq!(ptr::read(buffer.as_ptr() as *const u8), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}