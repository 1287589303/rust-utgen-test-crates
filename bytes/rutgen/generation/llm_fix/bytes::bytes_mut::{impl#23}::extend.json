{
  "name": "bytes::bytes_mut::{impl#23}::extend",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1370:5:1384:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: b in iter at line 1381 is true\n",
        "precondition: b in iter at line 1381 is false\n"
      ],
      "input_infer": "iter must be a valid IntoIterator containing at least one u8 element and also may contain zero elements, thus test input conditions should be in the range of an empty iterator to iterators containing up to MAX_VEC_POS elements of type u8 (0 <= number of elements <= MAX_VEC_POS).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    let input: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    buf.extend(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert!(!buf.is_empty());",
                "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
                "    assert_eq!(buf.remaining_mut(), 5);",
                "    assert!(buf.try_reclaim(5));",
                "    buf.clear();",
                "    assert_eq!(buf.len(), 0);",
                "    buf.extend(iter::once(6));",
                "    assert_eq!(buf.as_slice(), &[6]);",
                "    buf.truncate(1);",
                "    assert_eq!(buf.len(), 1);",
                "    buf.resize(5, 0);",
                "    assert_eq!(buf.as_slice(), &[6, 0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    let input: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    buf.extend(input);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert!(!buf.is_empty());",
                "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
                "    assert_eq!(buf.remaining_mut(), 5);",
                "    assert!(buf.try_reclaim(5));",
                "    buf.clear();",
                "    assert_eq!(buf.len(), 0);",
                "    buf.extend(iter::once(6));",
                "    assert_eq!(buf.as_slice(), &[6]);",
                "    buf.truncate(1);",
                "    assert_eq!(buf.len(), 1);",
                "    buf.resize(5, 0);",
                "    assert_eq!(buf.as_slice(), &[6, 0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    let input: Vec<u8> = vec![];",
                "    buf.extend(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.is_empty());",
                "    assert_eq!(buf.capacity(), 10);",
                "    ",
                "    let mut buf_non_empty = BytesMut::with_capacity(10);",
                "    let input_non_empty: Vec<u8> = vec![1, 2, 3];",
                "    buf_non_empty.extend(input_non_empty);",
                "    assert_eq!(buf_non_empty.len(), 3);",
                "    assert!(!buf_non_empty.is_empty());",
                "    asserteq!(buf_non_empty.as_slice(), &[1, 2, 3]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    let input: Vec<u8> = vec![];",
                "    buf.extend(input);",
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.is_empty());",
                "    assert_eq!(buf.capacity(), 10);",
                "    ",
                "    let mut buf_non_empty = BytesMut::with_capacity(10);",
                "    let input_non_empty: Vec<u8> = vec![1, 2, 3];",
                "    buf_non_empty.extend(input_non_empty);",
                "    assert_eq!(buf_non_empty.len(), 3);",
                "    assert!(!buf_non_empty.is_empty());",
                "    asserteq!(buf_non_empty.as_slice(), &[1, 2, 3]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: b in iter at line 1381 is false\n"
      ],
      "input_infer": "iter has no elements (empty iterator), iter contains one element (0-255 for u8), iter contains maximum range of elements (0-255 repeated n times with n <= capacity of BytesMut)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let empty_iter: Vec<u8> = vec![];",
                "    bytes_mut.extend(empty_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let empty_iter: Vec<u8> = vec![];",
                "    bytes_mut.extend(empty_iter);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    let single_element = vec![42]; // Testing with a single u8 element",
                "    bytes_mut.extend(single_element);",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    bytes_mut.extend(vec![42]);",
                "    assert_eq!(bytes_mut.len(), 1);",
                "    assert_eq!(bytes_mut.as_slice(), &[42]);",
                "    assert!(bytes_mut.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    let single_element = vec![42]; // Testing with a single u8 element",
                "    bytes_mut.extend(single_element);",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    bytes_mut.extend(vec![42]);",
                "    assert_eq!(bytes_mut.len(), 1);",
                "    assert_eq!(bytes_mut.as_slice(), &[42]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    let multiple_elements = vec![10, 20, 30, 40, 50]; // Multiple u8 elements",
                "    bytes_mut.extend(multiple_elements);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 5);",
                "    assert_eq!(bytes_mut.as_slice(), &[10, 20, 30, 40, 50]);",
                "    assert!(bytes_mut.capacity() >= 10);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.try_reclaim(5), true);",
                "    bytes_mut.clear();",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    let multiple_elements = vec![10, 20, 30, 40, 50]; // Multiple u8 elements",
                "    bytes_mut.extend(multiple_elements);",
                "    assert_eq!(bytes_mut.len(), 5);",
                "    assert_eq!(bytes_mut.as_slice(), &[10, 20, 30, 40, 50]);",
                "    assert!(bytes_mut.capacity() >= 10);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.try_reclaim(5), true);",
                "    bytes_mut.clear();",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(bytes_mut.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    let max_elements = vec![255; 10]; // Filling to capacity with 255",
                "    bytes_mut.extend(max_elements);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 10);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(bytes_mut.as_slice(), &[255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);",
                "    assert_eq!(bytes_mut.remaining_mut(), 0);",
                "    assert!(bytes_mut.try_reclaim(5) == true);",
                "    bytes_mut.reserve(5);",
                "    assert!(bytes_mut.spare_capacity_mut().len() == 5);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    let max_elements = vec![255; 10]; // Filling to capacity with 255",
                "    bytes_mut.extend(max_elements);",
                "    assert_eq!(bytes_mut.len(), 10);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(bytes_mut.as_slice(), &[255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);",
                "    assert_eq!(bytes_mut.remaining_mut(), 0);",
                "    assert!(bytes_mut.try_reclaim(5) == true);",
                "    bytes_mut.reserve(5);",
                "    assert!(bytes_mut.spare_capacity_mut().len() == 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(5);",
                "    let exceed_elements = vec![1, 2, 3, 4, 5, 6]; // Exceeding the initial capacity",
                "    bytes_mut.extend(exceed_elements);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 6);",
                "    assert!(bytes_mut.capacity() >= 6);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert_eq!(unsafe { bytes_mut.as_slice() }, &[1, 2, 3, 4, 5, 6]);",
                "    assert!(bytes_mut.remaining_mut() >= 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(5);",
                "    let exceed_elements = vec![1, 2, 3, 4, 5, 6]; // Exceeding the initial capacity",
                "    bytes_mut.extend(exceed_elements);",
                "    assert_eq!(bytes_mut.len(), 6);",
                "    assert!(bytes_mut.capacity() >= 6);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert_eq!(unsafe { bytes_mut.as_slice() }, &[1, 2, 3, 4, 5, 6]);",
                "    assert!(bytes_mut.remaining_mut() >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}