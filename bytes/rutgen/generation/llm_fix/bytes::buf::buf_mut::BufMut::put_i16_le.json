{
  "name": "bytes::buf::buf_mut::BufMut::put_i16_le",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:474:5:476:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "- Test input conditions: `n` as a signed 16-bit integer within the range -32,768 to 32,767, and ensure `self.remaining_mut()` is sufficient (at least 2 bytes) to avoid panic before calling `put_i16_le`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    unsafe impl BufMut for TestBuf {",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn has_remaining_mut(&self) -> bool {",
                "            self.remaining_mut() > 0",
                "        }",
                "",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            let len = self.remaining_mut();",
                "            let start = self.position;",
                "            let range = if len >= 2 { start..start + 2 } else { start..start };",
                "            &mut (self.data[range].as_mut() as *mut _ as *mut UninitSlice)",
                "        }",
                "        ",
                "        fn put<T: super::Buf>(&mut self, _src: T) {}",
                "        fn put_bytes(&mut self, _val: u8, _cnt: usize) {}",
                "        fn put_u8(&mut self, _n: u8) {}",
                "        fn put_i8(&mut self, _n: i8) {}",
                "        fn put_u16(&mut self, _n: u16) {}",
                "        fn put_u32(&mut self, _n: u32) {}",
                "        fn put_i32(&mut self, _n: i32) {}",
                "        fn put_u64(&mut self, _n: u64) {}",
                "        fn put_i64(&mut self, _n: i64) {}",
                "        fn put_u128(&mut self, _n: u128) {}",
                "        fn put_i128(&mut self, _n: i128) {}",
                "        fn put_uint(&mut self, _n: u64, _nbytes: usize) {}",
                "        fn put_int(&mut self, _n: i64, _nbytes: usize) {}",
                "        fn put_f32(&mut self, _n: f32) {}",
                "        fn put_f64(&mut self, _n: f64) {}",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: vec![0; 10],",
                "        position: 0,",
                "    };",
                "",
                "    buf.put_i16_le(1);",
                "    buf.put_i16_le(-1);",
                "    buf.put_i16_le(32767);",
                "    buf.put_i16_le(-32768);",
                "}"
              ],
              "oracle": [
                "    buf.put_i16_le(1);",
                "    assert_eq!(buf.data[0..2], [1, 0]);",
                "    ",
                "    buf.put_i16_le(-1);",
                "    assert_eq!(buf.data[2..4], [255, 255]);",
                "    ",
                "    buf.put_i16_le(32767);",
                "    assert_eq!(buf.data[4..6], [255, 127]);",
                "    ",
                "    buf.put_i16_le(-32768);",
                "    assert_eq!(buf.data[6..8], [0, 128]);",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    buf.put_i16_le(12345);",
                "    buf.put_i16_le(-12345);",
                "    buf.put_i16_le(32768); // This should panic",
                "    }).is_err());",
                "    ",
                "    buf.position = 8; // Set position to simulate enough capacity",
                "    buf.put_i16_le(1234);",
                "    assert_eq!(buf.data[8..10], [210, 4]);"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    unsafe impl BufMut for TestBuf {",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn has_remaining_mut(&self) -> bool {",
                "            self.remaining_mut() > 0",
                "        }",
                "",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            let len = self.remaining_mut();",
                "            let start = self.position;",
                "            let range = if len >= 2 { start..start + 2 } else { start..start };",
                "            &mut (self.data[range].as_mut() as *mut _ as *mut UninitSlice)",
                "        }",
                "        ",
                "        fn put<T: super::Buf>(&mut self, _src: T) {}",
                "        fn put_bytes(&mut self, _val: u8, _cnt: usize) {}",
                "        fn put_u8(&mut self, _n: u8) {}",
                "        fn put_i8(&mut self, _n: i8) {}",
                "        fn put_u16(&mut self, _n: u16) {}",
                "        fn put_u32(&mut self, _n: u32) {}",
                "        fn put_i32(&mut self, _n: i32) {}",
                "        fn put_u64(&mut self, _n: u64) {}",
                "        fn put_i64(&mut self, _n: i64) {}",
                "        fn put_u128(&mut self, _n: u128) {}",
                "        fn put_i128(&mut self, _n: i128) {}",
                "        fn put_uint(&mut self, _n: u64, _nbytes: usize) {}",
                "        fn put_int(&mut self, _n: i64, _nbytes: usize) {}",
                "        fn put_f32(&mut self, _n: f32) {}",
                "        fn put_f64(&mut self, _n: f64) {}",
                "    }",
                "",
                "   let mut buf = TestBuf {  ",
                "       data: Vec::with_capacity(10),  ",
                "       position: 0,  ",
                "   };  ",
                "",
                "    buf.put_i16_le(1);",
                "    buf.put_i16_le(-1);",
                "    buf.put_i16_le(32767);",
                "    buf.put_i16_le(-32768);",
                "    buf.put_i16_le(1);",
                "    assert_eq!(buf.data[0..2], [1, 0]);",
                "    ",
                "    buf.put_i16_le(-1);",
                "    assert_eq!(buf.data[2..4], [255, 255]);",
                "    ",
                "    buf.put_i16_le(32767);",
                "    assert_eq!(buf.data[4..6], [255, 127]);",
                "    ",
                "    buf.put_i16_le(-32768);",
                "    assert_eq!(buf.data[6..8], [0, 128]);",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    buf.put_i16_le(12345);",
                "    buf.put_i16_le(-12345);",
                "    buf.put_i16_le(32768); // This should panic",
                "    }).is_err());",
                "    ",
                "    buf.position = 8; // Set position to simulate enough capacity",
                "    buf.put_i16_le(1234);",
                "    assert_eq!(buf.data[8..10], [210, 4]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    unsafe impl BufMut for TestBuf {",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn has_remaining_mut(&self) -> bool {",
                "            self.remaining_mut() > 0",
                "        }",
                "",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            let len = self.remaining_mut();",
                "            let start = self.position;",
                "            let range = if len >= 2 { start..start + 2 } else { start..start };",
                "            &mut (self.data[range].as_mut() as *mut _ as *mut UninitSlice)",
                "        }",
                "        ",
                "        fn put<T: super::Buf>(&mut self, _src: T) {}",
                "        fn put_bytes(&mut self, _val: u8, _cnt: usize) {}",
                "        fn put_u8(&mut self, _n: u8) {}",
                "        fn put_i8(&mut self, _n: i8) {}",
                "        fn put_u16(&mut self, _n: u16) {}",
                "        fn put_u32(&mut self, _n: u32) {}",
                "        fn put_i32(&mut self, _n: i32) {}",
                "        fn put_u64(&mut self, _n: u64) {}",
                "        fn put_i64(&mut self, _n: i64) {}",
                "        fn put_u128(&mut self, _n: u128) {}",
                "        fn put_i128(&mut self, _n: i128) {}",
                "        fn put_uint(&mut self, _n: u64, _nbytes: usize) {}",
                "        fn put_int(&mut self, _n: i64, _nbytes: usize) {}",
                "        fn put_f32(&mut self, _n: f32) {}",
                "        fn put_f64(&mut self, _n: f64) {}",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: vec![0; 1],",
                "        position: 0,",
                "    };",
                "",
                "    buf.put_i16_le(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.position, 0);",
                "    assert_eq!(buf.remaining_mut(), 1);",
                "    let result = std::panic::catch_unwind(|| buf.put_i16_le(1));",
                "    assert!(result.is_err());",
                "    assert_eq!(buf.data, vec![0; 1]);"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    unsafe impl BufMut for TestBuf {",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn has_remaining_mut(&self) -> bool {",
                "            self.remaining_mut() > 0",
                "        }",
                "",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            let len = self.remaining_mut();",
                "            let start = self.position;",
                "            let range = if len >= 2 { start..start + 2 } else { start..start };",
                "            &mut (self.data[range].as_mut() as *mut _ as *mut UninitSlice)",
                "        }",
                "        ",
                "        fn put<T: super::Buf>(&mut self, _src: T) {}",
                "        fn put_bytes(&mut self, _val: u8, _cnt: usize) {}",
                "        fn put_u8(&mut self, _n: u8) {}",
                "        fn put_i8(&mut self, _n: i8) {}",
                "        fn put_u16(&mut self, _n: u16) {}",
                "        fn put_u32(&mut self, _n: u32) {}",
                "        fn put_i32(&mut self, _n: i32) {}",
                "        fn put_u64(&mut self, _n: u64) {}",
                "        fn put_i64(&mut self, _n: i64) {}",
                "        fn put_u128(&mut self, _n: u128) {}",
                "        fn put_i128(&mut self, _n: i128) {}",
                "        fn put_uint(&mut self, _n: u64, _nbytes: usize) {}",
                "        fn put_int(&mut self, _n: i64, _nbytes: usize) {}",
                "        fn put_f32(&mut self, _n: f32) {}",
                "        fn put_f64(&mut self, _n: f64) {}",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: vec![0; 1],",
                "        position: 0,",
                "    };",
                "",
                "    buf.put_i16_le(1);",
                "    assert_eq!(buf.position, 0);",
                "    assert_eq!(buf.remaining_mut(), 1);",
                "    let result = std::panic::catch_unwind(|| buf.put_i16_le(1));",
                "    assert!(result.is_err());",
                "    assert_eq!(buf.data, vec![0; 1]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}