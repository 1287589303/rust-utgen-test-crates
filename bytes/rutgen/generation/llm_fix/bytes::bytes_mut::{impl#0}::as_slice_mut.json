{
  "name": "bytes::bytes_mut::{impl#0}::as_slice_mut",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:947:5:949:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: unsafe { slice::from_raw_parts_mut(self.ptr.as_ptr(), self.len) }\n"
      ],
      "input_infer": "self.ptr must be a valid NonNull<u8> pointer, self.len must be a usize in the range [0, self.cap] where self.cap > 0 and self.len must not exceed usize::MAX.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(5) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(5) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), 5);",
                "    assert_eq!(slice.as_ptr(), bytes_mut.ptr.as_ptr());",
                "    for i in 0..5 {",
                "    assert_eq!(slice[i], 0);",
                "    }",
                "    assert!(slice.is_mut());",
                "    assert!(slice.as_ptr() != bytes_mut.as_slice().as_ptr());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(5) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(5) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), 5);",
                "    assert_eq!(slice.as_ptr(), bytes_mut.ptr.as_ptr());",
                "    for i in 0..5 {",
                "    assert_eq!(slice[i], 0);",
                "    }",
                "    assert!(slice.is_mut());",
                "    assert!(slice.as_ptr() != bytes_mut.as_slice().as_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    unsafe { bytes_mut.set_len(0) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::new();",
                "    unsafe { bytes_mut.set_len(0) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), 0);",
                "    assert_eq!(slice.as_ptr(), bytes_mut.ptr.as_ptr());",
                "    let capacity = bytes_mut.capacity();",
                "    let slice_mut_ptr = slice as *mut [u8];",
                "    assert!((slice_mut_ptr as usize) % mem::align_of::<u8>() == 0);",
                "    unsafe { bytes_mut.set_len(capacity) };",
                "    let slice_full = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice_full.len(), capacity);",
                "    assert_eq!(slice_full.as_ptr(), bytes_mut.ptr.as_ptr());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    unsafe { bytes_mut.set_len(0) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    let mut bytes_mut = BytesMut::new();",
                "    unsafe { bytes_mut.set_len(0) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), 0);",
                "    assert_eq!(slice.as_ptr(), bytes_mut.ptr.as_ptr());",
                "    let capacity = bytes_mut.capacity();",
                "    let slice_mut_ptr = slice as *mut [u8];",
                "    assert!((slice_mut_ptr as usize) % mem::align_of::<u8>() == 0);",
                "    unsafe { bytes_mut.set_len(capacity) };",
                "    let slice_full = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice_full.len(), capacity);",
                "    assert_eq!(slice_full.as_ptr(), bytes_mut.ptr.as_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(10) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(10) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), 10);",
                "    assert!(!slice.is_empty());",
                "    assert!(ptr::eq(slice.as_ptr(), bytes_mut.ptr.as_ptr()));",
                "    assert!(slice as *mut _ == bytes_mut.as_slice_mut() as *mut _);",
                "    let expected_slice: &mut [u8] = unsafe { slice::from_raw_parts_mut(bytes_mut.ptr.as_ptr(), bytes_mut.len) };",
                "    assert_eq!(slice, expected_slice);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(10) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(10) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), 10);",
                "    assert!(!slice.is_empty());",
                "    assert!(ptr::eq(slice.as_ptr(), bytes_mut.ptr.as_ptr()));",
                "    assert!(slice as *mut _ == bytes_mut.as_slice_mut() as *mut _);",
                "    let expected_slice: &mut [u8] = unsafe { slice::from_raw_parts_mut(bytes_mut.ptr.as_ptr(), bytes_mut.len) };",
                "    assert_eq!(slice, expected_slice);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(usize::MAX >> 1);",
                "    unsafe { bytes_mut.set_len(usize::MAX >> 1) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(usize::MAX >> 1);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    unsafe { bytes_mut.set_len(usize::MAX >> 1) };",
                "    assert_eq!(bytes_mut.len(), usize::MAX >> 1);",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), bytes_mut.len());",
                "    assert_eq!(slice.as_mut_ptr(), bytes_mut.ptr.as_ptr());",
                "    assert_eq!(slice.as_mut_ptr().is_null(), false);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(usize::MAX >> 1);",
                "    unsafe { bytes_mut.set_len(usize::MAX >> 1) };",
                "    let slice = bytes_mut.as_slice_mut();",
                "    let mut bytes_mut = BytesMut::with_capacity(usize::MAX >> 1);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    unsafe { bytes_mut.set_len(usize::MAX >> 1) };",
                "    assert_eq!(bytes_mut.len(), usize::MAX >> 1);",
                "    let slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(slice.len(), bytes_mut.len());",
                "    assert_eq!(slice.as_mut_ptr(), bytes_mut.ptr.as_ptr());",
                "    assert_eq!(slice.as_mut_ptr().is_null(), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(15) }; // Exceeds capacity",
                "    let _slice = bytes_mut.as_slice_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(bytes_mut.len(), 15);",
                "    assert!(std::ptr::eq(slice.as_mut_ptr(), bytes_mut.as_slice_mut().as_mut_ptr()));",
                "    assert!(slice.len() == 15);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(std::ptr::is_null(bytes_mut.ptr.as_ptr()));",
                "    assert!(bytes_mut.len() > bytes_mut.capacity());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe { bytes_mut.set_len(15) }; // Exceeds capacity",
                "    let _slice = bytes_mut.as_slice_mut();",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(bytes_mut.len(), 15);",
                "    assert!(std::ptr::eq(slice.as_mut_ptr(), bytes_mut.as_slice_mut().as_mut_ptr()));",
                "    assert!(slice.len() == 15);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(std::ptr::is_null(bytes_mut.ptr.as_ptr()));",
                "    assert!(bytes_mut.len() > bytes_mut.capacity());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}