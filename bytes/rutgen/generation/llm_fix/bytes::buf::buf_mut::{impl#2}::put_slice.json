{
  "name": "bytes::buf::buf_mut::{impl#2}::put_slice",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1511:5:1522:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.len() < src.len() at line 1512 is true\n"
      ],
      "input_infer": "self.len() = any positive integer, src.len() = any integer greater than self.len() (to trigger the precondition)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() > buf.len()",
                "    buf.put_slice(src);",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 5, available: 3 });"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() > buf.len()",
                "    buf.put_slice(src);",
                "    panic_advance(&TryGetError { requested: 5, available: 3 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let src: &[u8] = &[6, 7]; // src.len() > buf.len()",
                "    buf.put_slice(src);",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 2, available: 1 });"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let src: &[u8] = &[6, 7]; // src.len() > buf.len()",
                "    buf.put_slice(src);",
                "    panic_advance(&TryGetError { requested: 2, available: 1 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let src: &[u8] = &[8]; // src.len() > buf.len()",
                "    buf.put_slice(src);",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 1, available: 0 });"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let src: &[u8] = &[8]; // src.len() > buf.len()",
                "    buf.put_slice(src);",
                "    panic_advance(&TryGetError { requested: 1, available: 0 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.len() < src.len() at line 1512 is false, with bound self.len() == src.len()\n"
      ],
      "input_infer": "self.len() = n (non-negative integer), src.len() = n (n >= 0), where n is any positive integer satisfying self.len() == src.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 4];",
                "    let src: &[u8] = &[1, 2, 3, 4];",
                "    // Assuming the length of buffer is equal to the length of src",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer[0].assume_init(), 1);",
                "    assert_eq!(buffer[1].assume_init(), 2);",
                "    assert_eq!(buffer[2].assume_init(), 3);",
                "    assert_eq!(buffer[3].assume_init(), 4);"
              ],
              "code": [
                "{",
                "   let mut buffer: [core::mem::MaybeUninit<u8>; 4] = [core::mem::MaybeUninit::uninit(); 4];  ",
                "   let src: &[u8] = &[1, 2, 3, 4];  ",
                "   // Assuming the length of buffer is equal to the length of src  ",
                "   unsafe {  ",
                "       buffer.as_mut().put_slice(src);  ",
                "   }  ",
                "   let buffer: [u8; 4] = unsafe { std::mem::transmute(buffer) };  ",
                "   assert_eq!(buffer[0], 1);  ",
                "   assert_eq!(buffer[1], 2);  ",
                "   assert_eq!(buffer[2], 3);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let src: &[u8] = &[];",
                "    // Both buffer and src are empty",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 0);",
                "    assert_eq!(src.len(), 0);",
                "    assert!(buffer.has_remaining_mut());",
                "    assert!(buffer.remaining_mut() == 0);",
                "    assert!(buffer.remaining_mut() >= src.len());"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let src: &[u8] = &[];",
                "    // Both buffer and src are empty",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "    assert_eq!(buffer.len(), 0);",
                "    assert_eq!(src.len(), 0);",
                "    assert!(buffer.has_remaining_mut());",
                "    assert!(buffer.remaining_mut() == 0);",
                "    assert!(buffer.remaining_mut() >= src.len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let src: &[u8] = &[5];",
                "    // Both buffer and src have the same length of 1",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer[0].assume_init(), 5);"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
                "    let src: &[u8] = &[5];",
                "    // Both buffer and src have the same length of 1",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "    assert_eq!(buffer[0].assume_init(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let src: &[u8] = &[10, 20, 30];",
                "    // Both buffer and src have the same length of 3",
                "    unsafe {",
                "        buffer.put_slice(src);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer[0].assume_init(), 10);",
                "    assert_eq!(buffer[1].assume_init(), 20);",
                "    assert_eq!(buffer[2].assume_init(), 30);",
                "    assert_eq!(buffer.remaining_mut(), 0);"
              ],
              "code": [
                "{",
                "   let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];  ",
                "   let src: &[u8] = &[10, 20, 30];  ",
                "   // Both buffer and src have the same length of 3  ",
                "   {  ",
                "       buffer.put_slice(src);  ",
                "   }  ",
                "   let buffer: &[u8] = unsafe { core::mem::transmute(buffer) };  ",
                "   assert_eq!(buffer[0], 10);  ",
                "   assert_eq!(buffer[1], 20);  ",
                "   assert_eq!(buffer[2], 30);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}