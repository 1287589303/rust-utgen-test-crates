{
  "name": "bytes::buf::buf_impl::Buf::get_i128",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:812:5:814:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Buffer length must be at least 16 bytes, buffer contents are bytes ranging from 0x00 to 0xFF, and test scenarios include buffer lengths exactly 16 bytes, more than 16 bytes, and fewer than 16 bytes for panic conditions.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\"[..];",
                "    let value = buf.get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0x01020304050607080910111213141516, value);",
                "    assert_panics!(buf.get_i128());",
                "    let mut buf_empty = &b\"\"[..];",
                "    assert_panics!(buf_empty.get_i128());",
                "    let mut buf_small = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\"[..];",
                "    assert_panics!(buf_small.get_i128());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\"[..];",
                "    let value = buf.get_i128();",
                "    assert_eq!(0x01020304050607080910111213141516, value);",
                "    let panic_result = std::panic::catch_unwind(|| { buf.get_i128() });",
                "    assert!(panic_result.is_err());",
                "    let mut buf_empty = &b\"\"[..];",
                "    let panic_result_empty = std::panic::catch_unwind(|| { buf_empty.get_i128() });",
                "    assert!(panic_result_empty.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 additional data\"[..];",
                "    let value = buf.get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0x01020304050607080910111213141516, value);",
                "    assert!(buf.remaining() == 16);",
                "    assert!(buf.has_remaining());",
                "    buf.advance(16);",
                "    assert!(buf.remaining() == 0);",
                "    assert!(!buf.has_remaining());",
                "    panic::catch_unwind(|| { buf.get_i128(); }).is_err();"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 additional data\"[..];",
                "    let value = buf.get_i128();",
                "    assert_eq!(0x01020304050607080910111213141516, value);",
                "    assert!(buf.remaining() == 16);",
                "    assert!(buf.has_remaining());",
                "    buf.advance(16);",
                "    assert!(buf.remaining() == 0);",
                "    assert!(!buf.has_remaining());",
                "    panic::catch_unwind(|| { buf.get_i128(); }).is_err();",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
                "    let value = buf.get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0x01020304050607080910111213141516, buf.get_i128());",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buf.has_remaining() == false);",
                "    let result: Result<i128, TryGetError> = buf.try_get_i128();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().requested, 16);",
                "    assert_eq!(result.unwrap_err().available, 8);",
                "    assert!(std::panic::catch_unwind(|| { buf.get_i128(); }).is_err());",
                "    assert!(buf.remaining() == 8);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
                "    let value = buf.get_i128();",
                "    assert_eq!(0x01020304050607080910111213141516, buf.get_i128());",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buf.has_remaining() == false);",
                "    let result: Result<i128, TryGetError> = buf.try_get_i128();",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().requested, 16);",
                "    assert_eq!(result.unwrap_err().available, 8);",
                "    assert!(std::panic::catch_unwind(|| { buf.get_i128(); }).is_err());",
                "    assert!(buf.remaining() == 8);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}