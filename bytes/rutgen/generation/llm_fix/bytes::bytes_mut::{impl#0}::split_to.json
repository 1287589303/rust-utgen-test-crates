{
  "name": "bytes::bytes_mut::{impl#0}::split_to",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:395:5:412:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: at <= self.len() at line 397 is true, with bound at == self.len()\n",
        "expected return value/type: other\n"
      ],
      "input_infer": "self.len() >= 0 and at is in the range [0, self.len()] inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let result = bytes_mut.split_to(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(result.is_empty());",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(result.capacity(), bytes_mut.capacity());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    let result = bytes_mut.split_to(0);",
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert!(result.is_empty());",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(result.capacity(), bytes_mut.capacity());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1]);",
                "    let result = bytes_mut.split_to(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1);",
                "    assert_eq!(bytes_mut.len(), 1);",
                "    assert_eq!(result[0], 1);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1]);",
                "    let result = bytes_mut.split_to(1);",
                "    assert_eq!(result.len(), 1);",
                "    assert_eq!(bytes_mut.len(), 1);",
                "    assert_eq!(result[0], 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4, 5]);",
                "    let result = bytes_mut.split_to(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 3);",
                "    assert_eq!(result.as_slice(), &[1, 2, 3]);",
                "    assert_eq!(bytes_mut.len(), 2);",
                "    assert_eq!(bytes_mut.as_slice(), &[4, 5]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(result.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= 2);",
                "    assert!(result.capacity() >= 3);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4, 5]);",
                "    let result = bytes_mut.split_to(3);",
                "    assert_eq!(result.len(), 3);",
                "    assert_eq!(result.as_slice(), &[1, 2, 3]);",
                "    assert_eq!(bytes_mut.len(), 2);",
                "    assert_eq!(bytes_mut.as_slice(), &[4, 5]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(result.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= 2);",
                "    assert!(result.capacity() >= 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    let result = bytes_mut.split_to(4); // Should panic",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(std::panic::catch_unwind(|| {",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    bytes_mut.split_to(4);",
                "    }), Err(_)));",
                "    ",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    let result = bytes_mut.len();",
                "    assert_eq!(result, 3);",
                "    ",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    let result = bytes_mut.split_to(3);",
                "    assert_eq!(result.len(), 3);",
                "    assert_eq!(bytes_mut.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    let result = bytes_mut.split_to(4); // Should panic",
                "    assert!(matches!(std::panic::catch_unwind(|| {",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    bytes_mut.split_to(4);",
                "    }), Err(_)));",
                "    ",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    let result = bytes_mut.len();",
                "    assert_eq!(result, 3);",
                "    ",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
                "    let result = bytes_mut.split_to(3);",
                "    assert_eq!(result.len(), 3);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4]);",
                "    let result = bytes_mut.split_to(4); // Edge case where at == len",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 4);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(&result[..], &[1, 2, 3, 4]);",
                "    assert!(bytes_mut.is_empty());",
                "    assert!(result.capacity() >= result.len());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4]);",
                "    let result = bytes_mut.split_to(4); // Edge case where at == len",
                "    assert_eq!(result.len(), 4);",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(&result[..], &[1, 2, 3, 4]);",
                "    assert!(bytes_mut.is_empty());",
                "    assert!(result.capacity() >= result.len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: at <= self.len() at line 397 is false\n"
      ],
      "input_infer": "at > self.len() - test boundary case where at is one more than self.len(), at = self.len() + 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut byte_vec = BytesMut::with_capacity(5);",
                "    byte_vec.resize(5, 0u8);",
                "    let at = byte_vec.len() + 1;",
                "    let _ = byte_vec.split_to(at);",
                "}"
              ],
              "oracle": [
                "    assert!((byte_vec.len() + 1) > byte_vec.len());",
                "    assert!(std::panic::catch_unwind(|| byte_vec.split_to(byte_vec.len() + 1)).is_err());",
                "    assert_eq!(byte_vec.len(), 5);",
                "    assert_eq!(byte_vec.capacity(), 5);"
              ],
              "code": [
                "{",
                "   let mut byte_vec = BytesMut::with_capacity(5);",
                "   byte_vec.resize(5, 0u8);",
                "   let at = byte_vec.len() + 1;",
                "   let _ = byte_vec.split_to(at);",
                "   assert!((byte_vec.len() + 1) > byte_vec.len());",
                "   assert!(std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| byte_vec.split_to(byte_vec.len() + 1))).is_err());",
                "   assert_eq!(byte_vec.len(), 5);",
                "   assert_eq!(byte_vec.capacity(), 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}