{
  "name": "bytes::buf::buf_mut::{impl#4}::advance_mut",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1607:5:1620:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: remaining < cnt at line 1611 is true\n"
      ],
      "input_infer": "remaining < cnt for cnt in [1, 2, ..., max_capacity + 1] where max_capacity = initial capacity of buffer (0 or > 0)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(0);",
                "    unsafe { buffer.advance_mut(1) };",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 1, available: 0 });"
              ],
              "code": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(0);",
                "    unsafe { buffer.advance_mut(1) };",
                "    panic_advance(&TryGetError { requested: 1, available: 0 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(1);",
                "    unsafe { buffer.advance_mut(2) };",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 2, available: 1 });"
              ],
              "code": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(1);",
                "    unsafe { buffer.advance_mut(2) };",
                "    panic_advance(&TryGetError { requested: 2, available: 1 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(2);",
                "    unsafe { buffer.advance_mut(3) };",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 3, available: 2 });"
              ],
              "code": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(2);",
                "    unsafe { buffer.advance_mut(3) };",
                "    panic_advance(&TryGetError { requested: 3, available: 2 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(3);",
                "    unsafe { buffer.advance_mut(4) };",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 4, available: 3 });"
              ],
              "code": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(3);",
                "    unsafe { buffer.advance_mut(4) };",
                "    panic_advance(&TryGetError { requested: 4, available: 3 });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(5);",
                "    unsafe { buffer.advance_mut(6) };",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 6, available: 5 });",
                "    remaining < cnt is true;",
                "    unsafe { buffer.advance_mut(6) };",
                "    buffer.set_len(len + cnt);"
              ],
              "code": [
                "{",
                "    let mut buffer: Vec<u8> = Vec::with_capacity(5);",
                "    unsafe { buffer.advance_mut(6) };",
                "    panic_advance(&TryGetError { requested: 6, available: 5 });",
                "    remaining < cnt is true;",
                "    unsafe { buffer.advance_mut(6) };",
                "    buffer.set_len(len + cnt);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: remaining < cnt at line 1611 is false, with bound remaining == cnt\n"
      ],
      "input_infer": "remaining_mut values: 0 (no remaining), 1 (just enough), or any positive integer n where remaining >= n\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::with_capacity(10);",
                "    unsafe { buffer.set_len(10); } ",
                "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10 now",
                "    let cnt = remaining; // cnt is also 10, equal to remaining",
                "    unsafe { buffer.advance_mut(cnt); } ",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 10 + cnt);",
                "    assert_eq!(buffer.len(), 20);",
                "    assert!(buffer.capacity() >= buffer.len());",
                "    assert!(buffer.capacity() - buffer.len() >= 0);"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::with_capacity(10);",
                "    unsafe { buffer.set_len(10); } ",
                "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10 now",
                "    let cnt = remaining; // cnt is also 10, equal to remaining",
                "    unsafe { buffer.advance_mut(cnt); } ",
                "    assert_eq!(buffer.len(), 10 + cnt);",
                "    assert_eq!(buffer.len(), 20);",
                "    assert!(buffer.capacity() >= buffer.len());",
                "    assert!(buffer.capacity() - buffer.len() >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::with_capacity(1);",
                "    unsafe { buffer.set_len(0); }",
                "    let remaining = buffer.capacity() - buffer.len(); // remaining is 1",
                "    let cnt = remaining; // cnt is also 1, equal to remaining",
                "    unsafe { buffer.advance_mut(cnt); } ",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 1);",
                "    assert_eq!(buffer.capacity(), 1);",
                "    assert!(buffer.has_remaining_mut() == false);",
                "    assert!(std::ptr::read(buffer.as_ptr()) == 0);"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::with_capacity(1);",
                "    unsafe { buffer.set_len(0); }",
                "    let remaining = buffer.capacity() - buffer.len(); // remaining is 1",
                "    let cnt = remaining; // cnt is also 1, equal to remaining",
                "    unsafe { buffer.advance_mut(cnt); } ",
                "    assert_eq!(buffer.len(), 1);",
                "    assert_eq!(buffer.capacity(), 1);",
                "    assert!(buffer.has_remaining_mut() == false);",
                "    assert!(std::ptr::read(buffer.as_ptr()) == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer = Vec::with_capacity(20);",
                "    unsafe { buffer.set_len(10); }",
                "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10",
                "    let cnt = remaining; // cnt is also 10, equal to remaining",
                "    unsafe { buffer.advance_mut(cnt); } ",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 20);",
                "    assert_eq!(buffer.capacity(), 20);",
                "    assert!(buffer.has_remaining_mut());",
                "    assert_eq!(buffer.remaining_mut(), 0);"
              ],
              "code": [
                "{",
                "    let mut buffer = Vec::with_capacity(20);",
                "    unsafe { buffer.set_len(10); }",
                "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10",
                "    let cnt = remaining; // cnt is also 10, equal to remaining",
                "    unsafe { buffer.advance_mut(cnt); } ",
                "    assert_eq!(buffer.len(), 20);",
                "    assert_eq!(buffer.capacity(), 20);",
                "    assert!(buffer.has_remaining_mut());",
                "    assert_eq!(buffer.remaining_mut(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}