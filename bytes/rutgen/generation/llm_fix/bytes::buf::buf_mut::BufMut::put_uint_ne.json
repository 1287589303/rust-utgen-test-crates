{
  "name": "bytes::buf::buf_mut::BufMut::put_uint_ne",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1023:5:1029:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "n: u64 in range 0 to 18,446,744,073,709,551,615; nbytes: usize in range 1 to 8; remaining capacity in self must be >= nbytes\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe {",
                "        buf.put_uint_ne(0x01, 1);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining_mut(), 7);",
                "    assert_eq!(buf.data, vec![1]);",
                "    unsafe {",
                "    buf.put_uint_ne(0x0102, 2);",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 5);",
                "    assert_eq!(buf.data, vec![1, 1, 2]);",
                "    unsafe {",
                "    buf.put_uint_ne(0x01020304, 4);",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 1);",
                "    assert_eq!(buf.data, vec![1, 1, 2, 1, 2, 3, 4]);",
                "    unsafe {",
                "    buf.put_uint_ne(0x0102030405060708, 8);",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    assert_eq!(buf.data, vec![1, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8]);",
                "    assert_panics!(buf.put_uint_ne(0x01, 9));"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe {",
                "        buf.put_uint_ne(0x01, 1);",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 7);",
                "    assert_eq!(buf.data, vec![1]);",
                "    unsafe {",
                "    buf.put_uint_ne(0x0102, 2);",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 5);",
                "    assert_eq!(buf.data, vec![1, 1, 2]);",
                "    unsafe {",
                "    buf.put_uint_ne(0x01020304, 4);",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 1);",
                "    assert_eq!(buf.data, vec![1, 1, 2, 1, 2, 3, 4]);",
                "    unsafe {",
                "    buf.put_uint_ne(0x0102030405060708, 8);",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    assert_eq!(buf.data, vec![1, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8]);",
                "    assert_panics!(buf.put_uint_ne(0x01, 9));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe {",
                "        buf.put_uint_ne(0xFFFFFFFFFFFFFFFF, 8);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" } else { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" });",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    unsafe { buf.put_uint_ne(0x123456789ABCDEF0, 8); }",
                "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { b\"\\x12\\x34\\x56\\x78\\x9A\\xBC\\xDE\\xF0\" } else { b\"\\xF0\\xDE\\xBC\\x9A\\x78\\x56\\x34\\x12\" });",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    unsafe { buf.put_uint_ne(0xAABBCCDD, 4); }",
                "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { b\"\\xAA\\xBB\\xCC\\xDD\" } else { b\"\\xDD\\xCC\\xBB\\xAA\" });",
                "    assert!(std::panic::catch_unwind(|| { unsafe { buf.put_uint_ne(0x1234567890ABCDEF, 9); } }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { unsafe { buf.put_uint_ne(0x12345678, 9); } }).is_err());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe {",
                "        buf.put_uint_ne(0xFFFFFFFFFFFFFFFF, 8);",
                "    }",
                "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" } else { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" });",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    unsafe { buf.put_uint_ne(0x123456789ABCDEF0, 8); }",
                "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { b\"\\x12\\x34\\x56\\x78\\x9A\\xBC\\xDE\\xF0\" } else { b\"\\xF0\\xDE\\xBC\\x9A\\x78\\x56\\x34\\x12\" });",
                "    assert_eq!(buf.remaining_mut(), 0);",
                "    unsafe { buf.put_uint_ne(0xAABBCCDD, 4); }",
                "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { b\"\\xAA\\xBB\\xCC\\xDD\" } else { b\"\\xDD\\xCC\\xBB\\xAA\" });",
                "    assert!(std::panic::catch_unwind(|| { unsafe { buf.put_uint_ne(0x1234567890ABCDEF, 9); } }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { unsafe { buf.put_uint_ne(0x12345678, 9); } }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe {",
                "        buf.put_uint_ne(0x01, 1); // Smallest nbytes",
                "        buf.put_uint_ne(0x01020304, 4); // Mid range nbytes",
                "        buf.put_uint_ne(0xFFFFFFFFFFFFFFFF, 8); // Largest nbytes",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining_mut(), 4); // After adding 1 byte from 0x01",
                "    assert_eq!(buf.remaining_mut(), 0); // After adding 4 bytes from 0x01020304",
                "    assert_eq!(buf.data, vec![0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00]); // Verify output for 0x01",
                "    assert_eq!(buf.data, vec![0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04]); // Verify output for 0x01020304",
                "    assert_eq!(buf.remaining_mut(), 0); // After adding 8 bytes from 0xFFFFFFFFFFFFFFFF",
                "    buf.put_uint_ne(0xFFFFFFFFFFFFFFFF, 8); // Add additional data while capacity is exhausted",
                "    assert!(buf.remaining_mut() < 0); // Ensure it panics as remaining capacity is negative",
                "    buf.put_uint_ne(0x0102030405060708, 8); // Testing more than 8 bytes, should panic"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(8);",
                "    unsafe {",
                "        buf.put_uint_ne(0x01, 1); // Smallest nbytes",
                "        buf.put_uint_ne(0x01020304, 4); // Mid range nbytes",
                "        buf.put_uint_ne(0xFFFFFFFFFFFFFFFF, 8); // Largest nbytes",
                "    }",
                "    assert_eq!(buf.remaining_mut(), 4); // After adding 1 byte from 0x01",
                "    assert_eq!(buf.remaining_mut(), 0); // After adding 4 bytes from 0x01020304",
                "    assert_eq!(buf.data, vec![0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00]); // Verify output for 0x01",
                "    assert_eq!(buf.data, vec![0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04]); // Verify output for 0x01020304",
                "    assert_eq!(buf.remaining_mut(), 0); // After adding 8 bytes from 0xFFFFFFFFFFFFFFFF",
                "    buf.put_uint_ne(0xFFFFFFFFFFFFFFFF, 8); // Add additional data while capacity is exhausted",
                "    assert!(buf.remaining_mut() < 0); // Ensure it panics as remaining capacity is negative",
                "    buf.put_uint_ne(0x0102030405060708, 8); // Testing more than 8 bytes, should panic",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            if nbytes > self.remaining_mut() {",
                "                panic!();",
                "            }",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(4); // Insufficient capacity",
                "    unsafe {",
                "        buf.put_uint_ne(0x01, 5); // Should panic",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe {",
                "    buf.put_uint_ne(0x01, 5);",
                "    }",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe {",
                "    buf.put_uint_ne(0x01, 9); // Exceeding nbytes greater than 8",
                "    }",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        capacity: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(capacity: usize) -> Self {",
                "            TestBuf {",
                "                data: Vec::with_capacity(capacity),",
                "                capacity,",
                "            }",
                "        }",
                "",
                "        fn remaining_mut(&self) -> usize {",
                "            self.capacity - self.data.len()",
                "        }",
                "",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.data.resize(self.data.len() + cnt, 0);",
                "        }",
                "",
                "        fn put_uint_ne(&mut self, n: u64, nbytes: usize) {",
                "            if nbytes > self.remaining_mut() {",
                "                panic!();",
                "            }",
                "            let start = match 8.checked_sub(nbytes) {",
                "                Some(start) => start,",
                "                None => panic!(),",
                "            };",
                "            let bytes = &n.to_be_bytes()[start..];",
                "            self.data.extend_from_slice(bytes);",
                "            unsafe { self.advance_mut(nbytes) };",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(4); // Insufficient capacity",
                "    unsafe {",
                "        buf.put_uint_ne(0x01, 5); // Should panic",
                "    }",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe {",
                "    buf.put_uint_ne(0x01, 5);",
                "    }",
                "    }).is_err());",
                "    ",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut buf = TestBuf::new(4);",
                "    unsafe {",
                "    buf.put_uint_ne(0x01, 9); // Exceeding nbytes greater than 8",
                "    }",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}