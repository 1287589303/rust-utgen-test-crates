{
  "name": "bytes::bytes_mut::{impl#0}::split_off",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:320:5:335:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: at <= self.capacity() at line 322 is true, with bound at == self.capacity()\n",
        "expected return value/type: other\n"
      ],
      "input_infer": "at values in the range [0, self.capacity()] inclusive, testing at being 0, self.capacity(), and just below self.capacity() to cover boundary cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
                "    let other = bytes_mut.split_off(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 5);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(other.len(), 5);",
                "    assert_eq!(other.capacity(), 10);",
                "    assert_eq!(&bytes_mut.as_slice(), &[1, 2, 3, 4, 5]);",
                "    assert_eq!(&other.as_slice(), &[]);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
                "    let other = bytes_mut.split_off(0);",
                "    assert_eq!(bytes_mut.len(), 5);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(other.len(), 5);",
                "    assert_eq!(other.capacity(), 10);",
                "    assert_eq!(&bytes_mut.as_slice(), &[1, 2, 3, 4, 5]);",
                "    assert_eq!(&other.as_slice(), &[]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
                "    let other = bytes_mut.split_off(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 5);",
                "    assert_eq!(other.len(), 5);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(other.capacity(), 10);",
                "    assert_eq!(&bytes_mut.as_slice()[..], &[1, 2, 3, 4, 5]);",
                "    assert_eq!(&other.as_slice()[..], &[]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(other.is_empty() == true);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
                "    let other = bytes_mut.split_off(5);",
                "    assert_eq!(bytes_mut.len(), 5);",
                "    assert_eq!(other.len(), 5);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(other.capacity(), 10);",
                "    assert_eq!(&bytes_mut.as_slice()[..], &[1, 2, 3, 4, 5]);",
                "    assert_eq!(&other.as_slice()[..], &[]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(other.is_empty() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
                "    let other = bytes_mut.split_off(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), 4);",
                "    assert_eq!(other.len(), 6);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(other.capacity(), 10);",
                "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3, 4]);",
                "    assert_eq!(other.as_slice(), &[5]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(other.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= bytes_mut.len());",
                "    assert!(other.capacity() >= other.len());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
                "    let other = bytes_mut.split_off(4);",
                "    assert_eq!(bytes_mut.len(), 4);",
                "    assert_eq!(other.len(), 6);",
                "    assert_eq!(bytes_mut.capacity(), 10);",
                "    assert_eq!(other.capacity(), 10);",
                "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3, 4]);",
                "    assert_eq!(other.as_slice(), &[5]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(other.is_empty() == false);",
                "    assert!(bytes_mut.capacity() >= bytes_mut.len());",
                "    assert!(other.capacity() >= other.len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: at <= self.capacity() at line 322 is false\n"
      ],
      "input_infer": "at < 0 or at > self.capacity()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut bytes = BytesMut::with_capacity(10);",
                "    let _ = bytes.split_off(11); // at > self.capacity()",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.capacity(), 10);",
                "    assert!(bytes.is_empty());",
                "    assert!(std::panic::catch_unwind(|| bytes.split_off(11)).is_err());"
              ],
              "code": [
                "{",
                "    let mut bytes = BytesMut::with_capacity(10);",
                "    let _ = bytes.split_off(11); // at > self.capacity()",
                "    assert_eq!(bytes.capacity(), 10);",
                "    assert!(bytes.is_empty());",
                "    assert!(std::panic::catch_unwind(|| bytes.split_off(11)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let _ = bytes.split_off(1); // at > self.capacity()",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { let mut bytes = BytesMut::new(); bytes.split_off(1); }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let _ = bytes.split_off(1); // at > self.capacity()",
                "    assert_eq!(std::panic::catch_unwind(|| { let mut bytes = BytesMut::new(); bytes.split_off(1); }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut bytes = BytesMut::with_capacity(5);",
                "    let _ = bytes.split_off(10); // at > self.capacity()",
                "}"
              ],
              "oracle": [
                "    assert_panics(bytes.split_off(10));",
                "    assert_eq!(bytes.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let mut bytes = BytesMut::with_capacity(5);",
                "    let _ = bytes.split_off(10); // at > self.capacity()",
                "    assert_panics(bytes.split_off(10));",
                "    assert_eq!(bytes.capacity(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}