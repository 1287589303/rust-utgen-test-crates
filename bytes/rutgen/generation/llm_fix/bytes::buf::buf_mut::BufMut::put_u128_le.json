{
  "name": "bytes::buf::buf_mut::BufMut::put_u128_le",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:839:5:841:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "remaining_mut() > 16, n: u128 in range 0 to 2^128-1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(size: usize) -> Self {",
                "            Self {",
                "                data: vec![0; size],",
                "                position: 0,",
                "            }",
                "        }",
                "        ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            // Assume uninitialized slice representation for testing purposes",
                "            &mut self.data[self.position..].into()",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!();",
                "            }",
                "            let mut src = src;",
                "            while !src.is_empty() {",
                "                let dst = self.chunk_mut();",
                "                let cnt = usize::min(src.len(), dst.len());",
                "                dst[..cnt].copy_from_slice(&src[..cnt]);",
                "                src = &src[cnt..];",
                "                unsafe { self.advance_mut(cnt) };",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(32);",
                "    buf.put_u128_le(0x01020304050607080910111213141516);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.data, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");",
                "    buf.position == 16;"
              ],
              "code": [
                "   {",
                "      struct TestBuf {",
                "          data: Vec<u8>,",
                "          position: usize,",
                "      }",
                "",
                "      impl TestBuf {",
                "          fn new(size: usize) -> Self {",
                "              Self {",
                "                  data: std::vec![0; size],",
                "                  position: 0,",
                "              }",
                "           }",
                "        ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "       fn chunk_mut(&mut self) -> &mut UninitSlice {  ",
                "           // Assume uninitialized slice representation for testing purposes  ",
                "           UninitSlice::new(&mut self.data[self.position..])  ",
                "       }  ",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!();",
                "            }",
                "            let mut src = src;",
                "            while !src.is_empty() {",
                "                let dst = self.chunk_mut();",
                "                let cnt = usize::min(src.len(), dst.len());",
                "                dst[..cnt].copy_from_slice(&src[..cnt]);",
                "                src = &src[cnt..];",
                "                unsafe { self.advance_mut(cnt) };",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(32);",
                "    buf.put_u128_le(0x01020304050607080910111213141516);",
                "    assert_eq!(buf.data, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");",
                "    buf.position == 16;",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(size: usize) -> Self {",
                "            Self {",
                "                data: vec![0; size],",
                "                position: 0,",
                "            }",
                "        }",
                "        ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "            &mut self.data[self.position..].into()",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!();",
                "            }",
                "            let mut src = src;",
                "            while !src.is_empty() {",
                "                let dst = self.chunk_mut();",
                "                let cnt = usize::min(src.len(), dst.len());",
                "                dst[..cnt].copy_from_slice(&src[..cnt]);",
                "                src = &src[cnt..];",
                "                unsafe { self.advance_mut(cnt) };",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(16);",
                "    buf.put_u128_le(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.data, b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\");",
                "    assert!(buf.remaining_mut() == 0);"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn new(size: usize) -> Self {",
                "            Self {",
                "               data: Vec::with_capacity(size),  ",
                "               position: 0,  ",
                "           }  ",
                "        }",
                "        ",
                "        fn remaining_mut(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        unsafe fn advance_mut(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "       fn chunk_mut(&mut self) -> &mut UninitSlice {",
                "           UninitSlice::new(&mut self.data[self.position..])",
                "        }",
                "",
                "        fn put_slice(&mut self, src: &[u8]) {",
                "            if self.remaining_mut() < src.len() {",
                "                panic!();",
                "            }",
                "            let mut src = src;",
                "            while !src.is_empty() {",
                "                let dst = self.chunk_mut();",
                "                let cnt = usize::min(src.len(), dst.len());",
                "                dst[..cnt].copy_from_slice(&src[..cnt]);",
                "                src = &src[cnt..];",
                "                unsafe { self.advance_mut(cnt) };",
                "            }",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf::new(16);",
                "    buf.put_u128_le(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    assert_eq!(buf.data, b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\");",
                "    assert!(buf.remaining_mut() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}