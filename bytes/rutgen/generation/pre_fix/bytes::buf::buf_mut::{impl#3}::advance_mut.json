{
  "name": "bytes::buf::buf_mut::{impl#3}::advance_mut",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1553:5:1564:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.len() < cnt at line 1554 is true\n"
      ],
      "input_infer": "self.len() = n (where n is any non-negative integer), cnt = n + x (where x is any positive integer)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
                "    let cnt = 10; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_advance(&TryGetError { requested: 10, available: 5 }), ());"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
                "    let cnt = 10; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "    assert_eq!(panic_advance(&TryGetError { requested: 10, available: 5 }), ());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let cnt = 1; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let cnt = 1; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "    }), Err(_));"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let cnt = 1; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
                "    let cnt = 1; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "    }), Err(_));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let cnt = 5; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "}"
              ],
              "oracle": [
                "    panic_advance(&TryGetError { requested: 5, available: 3 });",
                "    self.len() < cnt;",
                "    cnt = 5;",
                "    buf.len() == 3;"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
                "    let cnt = 5; // cnt is greater than buf.len()",
                "    unsafe { buf.advance_mut(cnt) };",
                "    panic_advance(&TryGetError { requested: 5, available: 3 });",
                "    self.len() < cnt;",
                "    cnt = 5;",
                "    buf.len() == 3;",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.len() < cnt at line 1554 is false, with bound self.len() == cnt\n"
      ],
      "input_infer": "self.len() == cnt (exact match), self.len() > 0 (non-zero length)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::new(0), ",
                "        core::mem::MaybeUninit::new(1)",
                "    ];",
                "    let cnt = buffer.len();",
                "    unsafe { buffer.advance_mut(cnt) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::new(0), ",
                "        core::mem::MaybeUninit::new(1)",
                "    ];",
                "    let cnt = buffer.len();",
                "    unsafe { buffer.advance_mut(cnt) };",
                "    assert_eq!(buffer.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::new(42)",
                "    ];",
                "    let cnt = buffer.len();",
                "    unsafe { buffer.advance_mut(cnt) };",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buffer.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
                "        core::mem::MaybeUninit::new(42)",
                "    ];",
                "    let cnt = buffer.len();",
                "    unsafe { buffer.advance_mut(cnt) };",
                "    assert_eq!(buffer.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}