{
  "name": "bytes::buf::buf_impl::Buf::get_i16_ne",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:477:5:479:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "buffer must be at least 2 bytes long, valid buffer types should be &[u8], expected return type is i16, should cover endianness by providing both big and little-endian byte arrays, test with exactly 2 bytes, test with more than 2 bytes, test with less than 2 bytes (to trigger panic)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = b\"\\x01\\x02\";",
                "    let result = buf.get_i16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x0102);",
                "    ",
                "    let mut buf: &[u8] = b\"\\xFF\\xFE\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, -2);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x80\\x00\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, -32768);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x00\\x80\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 32768);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x00\\x00\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x08\\x09 hello\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0x0908);",
                "    ",
                "    let mut buf: &[u8] = b\"\";",
                "    let result = std::panic::catch_unwind(|| {",
                "    buf.get_i16_ne();",
                "    });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = b\"\\x01\\x02\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0x0102);",
                "    ",
                "    let mut buf: &[u8] = b\"\\xFF\\xFE\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, -2);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x80\\x00\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, -32768);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x00\\x80\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 32768);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x00\\x00\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0);",
                "    ",
                "    let mut buf: &[u8] = b\"\\x08\\x09 hello\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0x0908);",
                "    ",
                "    let mut buf: &[u8] = b\"\";",
                "    let result = std::panic::catch_unwind(|| {",
                "    buf.get_i16_ne();",
                "    });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = b\"\\x03\\x04 hello\";",
                "    let result = buf.get_i16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x0403);",
                "    assert!(buf.remaining() == 8);",
                "    assert!(buf.has_remaining() == true);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = b\"\\x03\\x04 hello\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0x0403);",
                "    assert!(buf.remaining() == 8);",
                "    assert!(buf.has_remaining() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = b\"\\x05\";",
                "    let result = buf.get_i16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 5);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buf.has_remaining() == false);",
                "    assert!(std::panic::catch_unwind(|| { buf.get_i16_ne(); }).is_err());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = b\"\\x05\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 5);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buf.has_remaining() == false);",
                "    assert!(std::panic::catch_unwind(|| { buf.get_i16_ne(); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = b\"\\x08\\x09\";",
                "    let result = buf.get_i16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x0809);",
                "    let mut buf_empty: &[u8] = b\"\";",
                "    let panic_result = std::panic::catch_unwind(|| { buf_empty.get_i16_ne(); });",
                "    assert!(panic_result.is_err());",
                "    let mut buf_insufficient: &[u8] = b\"\\x08\";",
                "    let panic_result_insufficient = std::panic::catch_unwind(|| { buf_insufficient.get_i16_ne(); });",
                "    assert!(panic_result_insufficient.is_err());",
                "    let mut buf_large: &[u8] = b\"\\x01\\x02\\x03\\x04\";",
                "    let result_large = buf_large.get_i16_ne();",
                "    assert_eq!(result_large, 0x0102);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = b\"\\x08\\x09\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0x0809);",
                "    let mut buf_empty: &[u8] = b\"\";",
                "    let panic_result = std::panic::catch_unwind(|| { buf_empty.get_i16_ne(); });",
                "    assert!(panic_result.is_err());",
                "    let mut buf_insufficient: &[u8] = b\"\\x08\";",
                "    let panic_result_insufficient = std::panic::catch_unwind(|| { buf_insufficient.get_i16_ne(); });",
                "    assert!(panic_result_insufficient.is_err());",
                "    let mut buf_large: &[u8] = b\"\\x01\\x02\\x03\\x04\";",
                "    let result_large = buf_large.get_i16_ne();",
                "    assert_eq!(result_large, 0x0102);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = b\"\\x09\\x08\";",
                "    let result = buf.get_i16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x0809);",
                "    assert_panics!(buf.get_i16_ne());",
                "    buf.advance(2);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.advance(1);",
                "    assert_panics!(buf.get_i16_ne());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = b\"\\x09\\x08\";",
                "    let result = buf.get_i16_ne();",
                "    assert_eq!(result, 0x0809);",
                "    assert_panics!(buf.get_i16_ne());",
                "    buf.advance(2);",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf.advance(1);",
                "    assert_panics!(buf.get_i16_ne());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}