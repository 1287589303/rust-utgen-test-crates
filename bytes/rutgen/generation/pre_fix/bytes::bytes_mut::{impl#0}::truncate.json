{
  "name": "bytes::bytes_mut::{impl#0}::truncate",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:434:5:439:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: len <= self.len() at line 435 is true, with bound len == self.len()\n"
      ],
      "input_infer": "len: 0 to self.len() inclusive, where self.len() is the current length of the BytesMut buffer\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(10, 0);",
                "    buf.truncate(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 0);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert!(buf.is_empty());",
                "    buf.truncate(10);",
                "    assert_eq!(buf.len(), 0);",
                "    buf.truncate(5);",
                "    assert_eq!(buf.len(), 0);",
                "    buf.truncate(10);",
                "    assert_eq!(buf.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(10, 0);",
                "    buf.truncate(0);",
                "    assert_eq!(buf.len(), 0);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert!(buf.is_empty());",
                "    buf.truncate(10);",
                "    assert_eq!(buf.len(), 0);",
                "    buf.truncate(5);",
                "    assert_eq!(buf.len(), 0);",
                "    buf.truncate(10);",
                "    assert_eq!(buf.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(10, 0);",
                "    buf.truncate(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 10);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert!(!buf.is_empty());",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(10, 0);",
                "    buf.truncate(10);",
                "    assert_eq!(buf.len(), 10);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert!(!buf.is_empty());",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(10, 0);",
                "    buf.truncate(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(10, 0);",
                "    buf.truncate(5);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: len <= self.len() at line 435 is false\n"
      ],
      "input_infer": "len: 0 to self.len() + 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(6); // len = 6, which is greater than current length",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);",
                "    assert!(buf.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(6); // len = 6, which is greater than current length",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);",
                "    assert!(buf.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(5); // len = 5, equal to current length",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert!(!buf.is_empty());",
                "    assert!(buf.capacity() >= 10);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);",
                "    buf.truncate(3);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0]);",
                "    buf.truncate(7);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(5); // len = 5, equal to current length",
                "    assert_eq!(buf.len(), 5);",
                "    assert!(!buf.is_empty());",
                "    assert!(buf.capacity() >= 10);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);",
                "    buf.truncate(3);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0]);",
                "    buf.truncate(7);",
                "    assert_eq!(buf.len(), 3);",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(0); // len = 0, which is less than current length",
                "}"
              ],
              "oracle": [
                "    buf.truncate(10); // len = 10, which is greater than current length, should not change the buffer",
                "    assert_eq!(buf.len(), 5); // Test the length remains unchanged",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]); // Verify the content is unchanged",
                "    buf.truncate(3); // len = 3, dropping the last 2 bytes",
                "    assert_eq!(buf.len(), 3); // Test the length is now 3",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0]); // Verify the content is now [0, 0, 0]"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(0); // len = 0, which is less than current length",
                "    buf.truncate(10); // len = 10, which is greater than current length, should not change the buffer",
                "    assert_eq!(buf.len(), 5); // Test the length remains unchanged",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]); // Verify the content is unchanged",
                "    buf.truncate(3); // len = 3, dropping the last 2 bytes",
                "    assert_eq!(buf.len(), 3); // Test the length is now 3",
                "    assert_eq!(buf.as_slice(), &[0, 0, 0]); // Verify the content is now [0, 0, 0]",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(6); // len = 6, which is greater than current length",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    buf.truncate(6);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let mut buf = BytesMut::with_capacity(10);",
                "    buf.resize(5, 0); // Current length = 5",
                "    buf.truncate(6); // len = 6, which is greater than current length",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "    buf.truncate(6);",
                "    assert_eq!(buf.len(), 5);",
                "    assert_eq!(buf.capacity(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}