{
  "name": "bytes::bytes::{impl#43}::from",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:1000:5:1027:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: slice.is_empty() at line 1004 is true\n"
      ],
      "input_infer": "Box<[u8]> containing an empty slice (i.e., Box::new([]))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_slice: Box<[u8]> = Box::new([]);",
                "    let _bytes = Bytes::from(empty_slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_bytes.len(), 0);",
                "    assert!(_bytes.is_empty());",
                "    assert_eq!(_bytes.ptr, Bytes::new().ptr);",
                "    assert_eq!(_bytes.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert_eq!(_bytes.vtable, &STATIC_VTABLE);"
              ],
              "code": [
                "{",
                "    let empty_slice: Box<[u8]> = Box::new([]);",
                "    let _bytes = Bytes::from(empty_slice);",
                "    assert_eq!(_bytes.len(), 0);",
                "    assert!(_bytes.is_empty());",
                "    assert_eq!(_bytes.ptr, Bytes::new().ptr);",
                "    assert_eq!(_bytes.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert_eq!(_bytes.vtable, &STATIC_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let single_element_slice: Box<[u8]> = Box::new([1]);",
                "    let _bytes = Bytes::from(single_element_slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_bytes.len(), 0);",
                "    assert!(_bytes.is_empty());",
                "    assert_eq!(_bytes.ptr, ptr::null());",
                "    assert_eq!(_bytes.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert_eq!(_bytes.vtable, &STATIC_VTABLE);"
              ],
              "code": [
                "{",
                "    let single_element_slice: Box<[u8]> = Box::new([1]);",
                "    let _bytes = Bytes::from(single_element_slice);",
                "    assert_eq!(_bytes.len(), 0);",
                "    assert!(_bytes.is_empty());",
                "    assert_eq!(_bytes.ptr, ptr::null());",
                "    assert_eq!(_bytes.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert_eq!(_bytes.vtable, &STATIC_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let two_element_slice: Box<[u8]> = Box::new([1, 2]);",
                "    let _bytes = Bytes::from(two_element_slice);",
                "}"
              ],
              "oracle": [
                "    assert!(bytes.len() == 0);",
                "    assert!(bytes.is_empty());",
                "    assert!(bytes.ptr.is_null());",
                "    assert!(bytes.data.load(Ordering::SeqCst).is_null());",
                "    assert_eq!(bytes.vtable, &STATIC_VTABLE);"
              ],
              "code": [
                "{",
                "    let two_element_slice: Box<[u8]> = Box::new([1, 2]);",
                "    let _bytes = Bytes::from(two_element_slice);",
                "    assert!(bytes.len() == 0);",
                "    assert!(bytes.is_empty());",
                "    assert!(bytes.ptr.is_null());",
                "    assert!(bytes.data.load(Ordering::SeqCst).is_null());",
                "    assert_eq!(bytes.vtable, &STATIC_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: slice.is_empty() at line 1004 is false\n",
        "precondition: ptr as usize & 0x1 == 0 at line 1011 is false\n",
        "expected return value/type: Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(data.cast()),\n                vtable: &PROMOTABLE_EVEN_VTABLE,\n            }\n"
      ],
      "input_infer": "Box<[u8]> with non-empty slices and aligned pointers (length > 0, pointer address is odd)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<[u8]> = Box::from([1, 2, 3, 4, 5]); // Non-empty slice with length > 0",
                "    let bytes = Bytes::from(slice);",
                "}"
              ],
              "oracle": [
                "    assert!(bytes.len() == 5);",
                "    assert_eq!(bytes.ptr, Box::into_raw(slice) as *mut u8);",
                "    assert!(bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK == KIND_VEC);",
                "    assert_eq!(bytes.vtable, &PROMOTABLE_EVEN_VTABLE);"
              ],
              "code": [
                "{",
                "    let slice: Box<[u8]> = Box::from([1, 2, 3, 4, 5]); // Non-empty slice with length > 0",
                "    let bytes = Bytes::from(slice);",
                "    assert!(bytes.len() == 5);",
                "    assert_eq!(bytes.ptr, Box::into_raw(slice) as *mut u8);",
                "    assert!(bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK == KIND_VEC);",
                "    assert_eq!(bytes.vtable, &PROMOTABLE_EVEN_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<[u8]> = Box::from([10; 100]); // Non-empty slice with length > 0",
                "    let bytes = Bytes::from(slice);",
                "}"
              ],
              "oracle": [
                "    let slice: Box<[u8]> = Box::from([10; 100]);",
                "    assert!(!slice.is_empty());",
                "    let ptr = Box::into_raw(slice) as *mut u8;",
                "    assert_eq!(ptr as usize & 0x1, 0);",
                "    assert_eq!(bytes.ptr, ptr);",
                "    assert_eq!(bytes.len, 100);",
                "    assert_eq!(bytes.vtable, &PROMOTABLE_EVEN_VTABLE);"
              ],
              "code": [
                "{",
                "    let slice: Box<[u8]> = Box::from([10; 100]); // Non-empty slice with length > 0",
                "    let bytes = Bytes::from(slice);",
                "    let slice: Box<[u8]> = Box::from([10; 100]);",
                "    assert!(!slice.is_empty());",
                "    let ptr = Box::into_raw(slice) as *mut u8;",
                "    assert_eq!(ptr as usize & 0x1, 0);",
                "    assert_eq!(bytes.ptr, ptr);",
                "    assert_eq!(bytes.len, 100);",
                "    assert_eq!(bytes.vtable, &PROMOTABLE_EVEN_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<[u8]> = Box::from([0, 1, 2]); // Non-empty slice with length > 0",
                "    let bytes = Bytes::from(slice);",
                "}"
              ],
              "oracle": [
                "    assert!(!slice.is_empty(), \"Precondition failed: slice must not be empty\");",
                "    let expected_len = 3;",
                "    let expected_data = ptr_map(Box::into_raw(slice) as *mut u8, |addr| addr | KIND_VEC);",
                "    assert_eq!(bytes.len, expected_len, \"Expected length did not match\");",
                "    assert_eq!(bytes.ptr, Box::into_raw(slice) as *mut u8, \"Expected pointer did not match\");",
                "    assert_eq!(bytes.data, AtomicPtr::new(expected_data.cast()), \"Expected data did not match\");",
                "    assert_eq!(bytes.vtable, &PROMOTABLE_EVEN_VTABLE, \"Expected vtable did not match\");"
              ],
              "code": [
                "{",
                "    let slice: Box<[u8]> = Box::from([0, 1, 2]); // Non-empty slice with length > 0",
                "    let bytes = Bytes::from(slice);",
                "    assert!(!slice.is_empty(), \"Precondition failed: slice must not be empty\");",
                "    let expected_len = 3;",
                "    let expected_data = ptr_map(Box::into_raw(slice) as *mut u8, |addr| addr | KIND_VEC);",
                "    assert_eq!(bytes.len, expected_len, \"Expected length did not match\");",
                "    assert_eq!(bytes.ptr, Box::into_raw(slice) as *mut u8, \"Expected pointer did not match\");",
                "    assert_eq!(bytes.data, AtomicPtr::new(expected_data.cast()), \"Expected data did not match\");",
                "    assert_eq!(bytes.vtable, &PROMOTABLE_EVEN_VTABLE, \"Expected vtable did not match\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: slice.is_empty() at line 1004 is false\n",
        "precondition: ptr as usize & 0x1 == 0 at line 1011 is true\n",
        "expected return value/type: Bytes {\n                ptr,\n                len,\n                data: AtomicPtr::new(ptr.cast()),\n                vtable: &PROMOTABLE_ODD_VTABLE,\n            }\n"
      ],
      "input_infer": "Box<[u8]> with length > 0 and pointer aligned with lower bit as 0 (e.g., ptr % 2 == 0) \n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<[u8]> = Box::from([0u8, 1u8, 2u8, 3u8]); // Length > 0",
                "    let result = Bytes::from(slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 4);",
                "    assert_eq!(unsafe { result.as_ptr() }, slice.as_ptr() as *const u8);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), (slice.as_ptr() as *mut u8).cast());",
                "    assert_eq!(result.vtable, &PROMOTABLE_ODD_VTABLE);",
                "    assert!(!result.is_empty());",
                "    assert!(result.is_unique());"
              ],
              "code": [
                "{",
                "    let slice: Box<[u8]> = Box::from([0u8, 1u8, 2u8, 3u8]); // Length > 0",
                "    let result = Bytes::from(slice);",
                "    assert_eq!(result.len(), 4);",
                "    assert_eq!(unsafe { result.as_ptr() }, slice.as_ptr() as *const u8);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), (slice.as_ptr() as *mut u8).cast());",
                "    assert_eq!(result.vtable, &PROMOTABLE_ODD_VTABLE);",
                "    assert!(!result.is_empty());",
                "    assert!(result.is_unique());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<[u8]> = Box::from([0u8; 1024]); // Length > 0, aligning ptr since it's an array",
                "    let result = Bytes::from(slice);",
                "}"
              ],
              "oracle": [
                "    let slice: Box<[u8]> = Box::from([0u8; 1024]); // Length > 0, aligning ptr since it's an array",
                "    let result = Bytes::from(slice);",
                "    assert_eq!(result.len, 1024);",
                "    assert_eq!(result.ptr, slice.as_ptr() as *mut u8);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), (result.ptr as usize | KIND_VEC) as *mut ());",
                "    assert_eq!(result.vtable, &PROMOTABLE_EVEN_VTABLE);"
              ],
              "code": [
                "{",
                "    let slice: Box<[u8]> = Box::from([0u8; 1024]); // Length > 0, aligning ptr since it's an array",
                "    let result = Bytes::from(slice);",
                "    let slice: Box<[u8]> = Box::from([0u8; 1024]); // Length > 0, aligning ptr since it's an array",
                "    let result = Bytes::from(slice);",
                "    assert_eq!(result.len, 1024);",
                "    assert_eq!(result.ptr, slice.as_ptr() as *mut u8);",
                "    assert_eq!(result.data.load(Ordering::SeqCst), (result.ptr as usize | KIND_VEC) as *mut ());",
                "    assert_eq!(result.vtable, &PROMOTABLE_EVEN_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}