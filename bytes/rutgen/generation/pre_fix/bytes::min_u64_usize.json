{
  "name": "bytes::min_u64_usize",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:199:2"
  },
  "visible": true,
  "loc": "src/lib.rs:126:1:132:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: usize::try_from(a) matches Err(_) at line 128 is true\n",
        "expected return value/type: b\n"
      ],
      "input_infer": "a: 18446744073709551615 (maximum u64), b: any usize value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 10; // example usize value",
                "    let _result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(min_u64_usize(18446744073709551615, 10), 10);"
              ],
              "code": [
                "{",
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 10; // example usize value",
                "    let _result = min_u64_usize(a, b);",
                "    assert_eq!(min_u64_usize(18446744073709551615, 10), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 0; // edge case with zero",
                "    let _result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, b);"
              ],
              "code": [
                "{",
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 0; // edge case with zero",
                "    let _result = min_u64_usize(a, b);",
                "    assert_eq!(_result, b);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 100000; // another example usize value",
                "    let _result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 100000; // another example usize value",
                "    let expected: usize = b; // expected value when usize::try_from(a) is Err",
                "    assert_eq!(min_u64_usize(a, b), expected);"
              ],
              "code": [
                "{",
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 100000; // another example usize value",
                "    let _result = min_u64_usize(a, b);",
                "    let a: u64 = 18446744073709551615; // maximum u64",
                "    let b: usize = 100000; // another example usize value",
                "    let expected: usize = b; // expected value when usize::try_from(a) is Err",
                "    assert_eq!(min_u64_usize(a, b), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: usize::try_from(a) matches Ok(a) at line 128 is true\n",
        "precondition: usize::try_from(a) matches Ok(a) at line 128 is true\n"
      ],
      "input_infer": "0 <= a <= usize::MAX and 0 <= b <= usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = 0;",
                "    let b: usize = 0;",
                "    let result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    let a: u64 = 1;",
                "    let b: usize = 1;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 1);",
                "    let a: u64 = 10;",
                "    let b: usize = 20;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 10);",
                "    let a: u64 = 100;",
                "    let b: usize = 50;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 50);",
                "    let a: u64 = usize::MAX as u64;",
                "    let b: usize = usize::MAX;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, usize::MAX);",
                "    let a: u64 = usize::MAX as u64 + 1;",
                "    let b: usize = 50;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 50);"
              ],
              "code": [
                "{",
                "    let a: u64 = 0;",
                "    let b: usize = 0;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 0);",
                "    let a: u64 = 1;",
                "    let b: usize = 1;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 1);",
                "    let a: u64 = 10;",
                "    let b: usize = 20;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 10);",
                "    let a: u64 = 100;",
                "    let b: usize = 50;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 50);",
                "    let a: u64 = usize::MAX as u64;",
                "    let b: usize = usize::MAX;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, usize::MAX);",
                "    let a: u64 = usize::MAX as u64 + 1;",
                "    let b: usize = 50;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 50);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = 42;",
                "    let b: usize = 42;",
                "    let result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 42);",
                "    assert_eq!(result, usize::min(a as usize, b));",
                "    assert!(result <= b);",
                "    assert!(result <= a as usize);"
              ],
              "code": [
                "{",
                "    let a: u64 = 42;",
                "    let b: usize = 42;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 42);",
                "    assert_eq!(result, usize::min(a as usize, b));",
                "    assert!(result <= b);",
                "    assert!(result <= a as usize);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = 20;",
                "    let b: usize = 42;",
                "    let result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    result == 20",
                "    result == 42",
                "    result == usize::min(a, b)"
              ],
              "code": [
                "{",
                "    let a: u64 = 20;",
                "    let b: usize = 42;",
                "    let result = min_u64_usize(a, b);",
                "    result == 20",
                "    result == 42",
                "    result == usize::min(a, b)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = 50;",
                "    let b: usize = 42;",
                "    let result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 42);",
                "    assert!(result <= b);",
                "    assert!(result <= usize::try_from(a).unwrap());",
                "    assert!(result >= 0);"
              ],
              "code": [
                "{",
                "    let a: u64 = 50;",
                "    let b: usize = 42;",
                "    let result = min_u64_usize(a, b);",
                "    assert_eq!(result, 42);",
                "    assert!(result <= b);",
                "    assert!(result <= usize::try_from(a).unwrap());",
                "    assert!(result >= 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: u64 = usize::MAX as u64;",
                "    let b: usize = usize::MAX;",
                "    let result = min_u64_usize(a, b);",
                "}"
              ],
              "oracle": [
                "    let a: u64 = usize::MAX as u64;",
                "    let b: usize = usize::MAX;",
                "    let expected_result: usize = usize::MAX;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = usize::MAX as u64 - 1;",
                "    let b: usize = usize::MAX;",
                "    let expected_result: usize = usize::MAX - 1;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = 10;",
                "    let b: usize = 20;",
                "    let expected_result: usize = 10;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = 20;",
                "    let b: usize = 10;",
                "    let expected_result: usize = 10;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = 0;",
                "    let b: usize = 5;",
                "    let expected_result: usize = 0;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);"
              ],
              "code": [
                "{",
                "    let a: u64 = usize::MAX as u64;",
                "    let b: usize = usize::MAX;",
                "    let result = min_u64_usize(a, b);",
                "    let a: u64 = usize::MAX as u64;",
                "    let b: usize = usize::MAX;",
                "    let expected_result: usize = usize::MAX;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = usize::MAX as u64 - 1;",
                "    let b: usize = usize::MAX;",
                "    let expected_result: usize = usize::MAX - 1;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = 10;",
                "    let b: usize = 20;",
                "    let expected_result: usize = 10;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = 20;",
                "    let b: usize = 10;",
                "    let expected_result: usize = 10;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "    ",
                "    let a: u64 = 0;",
                "    let b: usize = 5;",
                "    let expected_result: usize = 0;",
                "    assert_eq!(min_u64_usize(a, b), expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}