{
  "name": "bytes::bytes_mut::_split_must_use",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:1886:1:1886:24",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input string length: 0 to 1024 characters, only ASCII characters allowed, must test with an empty string and a maximum-length string filled with the character 'x'.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut b1 = BytesMut::from(\"\");",
                "    b1.split();",
                "}"
              ],
              "oracle": [
                "    assert!(b1.is_empty());",
                "    assert_eq!(b1.len(), 0);",
                "    assert!(b1.capacity() > 0);",
                "    assert!(!b1.has_split());",
                "    assert_eq!(b1.split(), ());",
                "    ",
                "    let mut b2 = BytesMut::from(\"hello world\");",
                "    b2.split();",
                "    assert!(!b2.is_empty());",
                "    assert_eq!(b2.len(), 0);",
                "    assert!(b2.capacity() > 0);",
                "    assert!(!b2.has_split());",
                "    assert_eq!(b2.split(), ());"
              ],
              "code": [
                "{",
                "    let mut b1 = BytesMut::from(\"\");",
                "    b1.split();",
                "    assert!(b1.is_empty());",
                "    assert_eq!(b1.len(), 0);",
                "    assert!(b1.capacity() > 0);",
                "    assert!(!b1.has_split());",
                "    assert_eq!(b1.split(), ());",
                "    ",
                "    let mut b2 = BytesMut::from(\"hello world\");",
                "    b2.split();",
                "    assert!(!b2.is_empty());",
                "    assert_eq!(b2.len(), 0);",
                "    assert!(b2.capacity() > 0);",
                "    assert!(!b2.has_split());",
                "    assert_eq!(b2.split(), ());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut b1 = BytesMut::from(\"a\");",
                "    b1.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(b1.len(), 1);",
                "    assert!(b1.is_empty());",
                "    assert_eq!(b1.split(), vec![\"a\"]);",
                "    assert!(b1.is_unique());",
                "    assert!(b1.into_vec() == vec![\"a\"]);"
              ],
              "code": [
                "{",
                "    let mut b1 = BytesMut::from(\"a\");",
                "    b1.split();",
                "    assert_eq!(b1.len(), 1);",
                "    assert!(b1.is_empty());",
                "    assert_eq!(b1.split(), vec![\"a\"]);",
                "    assert!(b1.is_unique());",
                "    assert!(b1.into_vec() == vec![\"a\"]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut b1 = BytesMut::from(\"hello\");",
                "    b1.split();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(b1.len(), 0);",
                "    assert!(b1.is_empty());",
                "    assert!(b1.split().next().is_none());"
              ],
              "code": [
                "{",
                "    let mut b1 = BytesMut::from(\"hello\");",
                "    b1.split();",
                "    assert_eq!(b1.len(), 0);",
                "    assert!(b1.is_empty());",
                "    assert!(b1.split().next().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_length_string = \"x\".repeat(1024);",
                "    let mut b1 = BytesMut::from(max_length_string);",
                "    b1.split();",
                "}"
              ],
              "oracle": [
                "    assert!(b1.is_empty());",
                "    assert_eq!(b1.len(), 0);",
                "    assert_eq!(b1.capacity(), 1024);",
                "    assert!(b1.split().is_none());",
                "    assert_eq!(b1.slice(..), &b\"\");"
              ],
              "code": [
                "{",
                "    let max_length_string = \"x\".repeat(1024);",
                "    let mut b1 = BytesMut::from(max_length_string);",
                "    b1.split();",
                "    assert!(b1.is_empty());",
                "    assert_eq!(b1.len(), 0);",
                "    assert_eq!(b1.capacity(), 1024);",
                "    assert!(b1.split().is_none());",
                "    assert_eq!(b1.slice(..), &b\"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}