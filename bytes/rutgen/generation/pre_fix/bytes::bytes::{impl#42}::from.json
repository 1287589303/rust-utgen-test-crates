{
  "name": "bytes::bytes::{impl#42}::from",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:965:5:996:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: len == cap at line 972 is true\n"
      ],
      "input_infer": "len and cap must be equal and greater than 0, with vec being a non-empty Vec<u8> (e.g., Vec<u8>::from(&[1, 2, 3]))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input_vec = Vec::from(&[1, 2, 3]);",
                "    let result = Bytes::from(input_vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len, 3);",
                "    assert_eq!(result.ptr, input_vec.as_ptr());",
                "    assert_eq!(result.data.load(Ordering::SeqCst) as usize % 2, 0);",
                "    assert!(unsafe { (result.data.load(Ordering::SeqCst) as *mut Shared).as_ref() }.is_some());",
                "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).cap }, 3);",
                "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).ref_cnt.load(Ordering::SeqCst) }, 1);",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);"
              ],
              "code": [
                "{",
                "    let input_vec = Vec::from(&[1, 2, 3]);",
                "    let result = Bytes::from(input_vec);",
                "    assert_eq!(result.len, 3);",
                "    assert_eq!(result.ptr, input_vec.as_ptr());",
                "    assert_eq!(result.data.load(Ordering::SeqCst) as usize % 2, 0);",
                "    assert!(unsafe { (result.data.load(Ordering::SeqCst) as *mut Shared).as_ref() }.is_some());",
                "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).cap }, 3);",
                "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).ref_cnt.load(Ordering::SeqCst) }, 1);",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input_vec = Vec::from(&[0u8; 1024]);",
                "    let result = Bytes::from(input_vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 1024);",
                "    assert_eq!(result.ptr, input_vec.as_ptr());",
                "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "    assert!(unsafe { (*result.data.load(Ordering::SeqCst) as *mut Shared).ref_cnt.load(Ordering::SeqCst) }, 1);",
                "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).buf } == input_vec.as_mut_ptr());",
                "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).cap } == 1024);",
                "    assert!(mem::align_of_val(&result) > 0);"
              ],
              "code": [
                "{",
                "    let input_vec = Vec::from(&[0u8; 1024]);",
                "    let result = Bytes::from(input_vec);",
                "    assert_eq!(result.len(), 1024);",
                "    assert_eq!(result.ptr, input_vec.as_ptr());",
                "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "    assert!(unsafe { (*result.data.load(Ordering::SeqCst) as *mut Shared).ref_cnt.load(Ordering::SeqCst) }, 1);",
                "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).buf } == input_vec.as_mut_ptr());",
                "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).cap } == 1024);",
                "    assert!(mem::align_of_val(&result) > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input_vec = Vec::from(&[255]);",
                "    let result = Bytes::from(input_vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len, 1);",
                "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "    assert_eq!(result.ptr, input_vec.as_mut_ptr());"
              ],
              "code": [
                "{",
                "    let input_vec = Vec::from(&[255]);",
                "    let result = Bytes::from(input_vec);",
                "    assert_eq!(result.len, 1);",
                "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "    assert_eq!(result.ptr, input_vec.as_mut_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input_vec = Vec::from(&[42, 43]);",
                "    let result = Bytes::from(input_vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len, 2);",
                "    assert_eq!(result.ptr, input_vec.as_ptr());",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "    assert!(unsafe { result.data.load(Ordering::SeqCst).is_null() } == false);"
              ],
              "code": [
                "{",
                "    let input_vec = Vec::from(&[42, 43]);",
                "    let result = Bytes::from(input_vec);",
                "    assert_eq!(result.len, 2);",
                "    assert_eq!(result.ptr, input_vec.as_ptr());",
                "    assert_eq!(result.vtable, &SHARED_VTABLE);",
                "    assert!(unsafe { result.data.load(Ordering::SeqCst).is_null() } == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: len == cap at line 972 is false\n",
        "precondition: 0 == (shared as usize & KIND_MASK) at line 987 is false\n",
        "expected return value/type: Bytes {\n            ptr,\n            len,\n            data: AtomicPtr::new(shared as _),\n            vtable: &SHARED_VTABLE,\n        }\n"
      ],
      "input_infer": "Vec<u8> with len < cap and aligned pointer where (pointer & KIND_MASK) != 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec = vec![1, 2, 3]; // len < cap",
                "    let bytes = Bytes::from(vec);",
                "}"
              ],
              "oracle": [
                "    let vec = vec![1, 2, 3]; // len < cap",
                "    let bytes = Bytes::from(vec);",
                "    assert_eq!(bytes.len, 3); // Validate the length of Bytes",
                "    assert!(bytes.data.load(Ordering::SeqCst).is_null() == false); // Check that the AtomicPtr is not null",
                "    assert_eq!(bytes.vtable, &SHARED_VTABLE); // Ensure vtable reference is correct",
                "    assert_eq!(bytes.ptr, bytes.data.load(Ordering::SeqCst) as *const u8); // Ensure pointer matches shared buffer pointer",
                "    assert!(bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK > 0); // Confirm KIND_MASK condition on shared pointer"
              ],
              "code": [
                "{",
                "    let vec = vec![1, 2, 3]; // len < cap",
                "    let bytes = Bytes::from(vec);",
                "    let vec = vec![1, 2, 3]; // len < cap",
                "    let bytes = Bytes::from(vec);",
                "    assert_eq!(bytes.len, 3); // Validate the length of Bytes",
                "    assert!(bytes.data.load(Ordering::SeqCst).is_null() == false); // Check that the AtomicPtr is not null",
                "    assert_eq!(bytes.vtable, &SHARED_VTABLE); // Ensure vtable reference is correct",
                "    assert_eq!(bytes.ptr, bytes.data.load(Ordering::SeqCst) as *const u8); // Ensure pointer matches shared buffer pointer",
                "    assert!(bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK > 0); // Confirm KIND_MASK condition on shared pointer",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec = Vec::with_capacity(10); // empty Vec with capacity > 0",
                "    let bytes = Bytes::from(vec);",
                "}"
              ],
              "oracle": [
                "    let vec = Vec::with_capacity(10); // Ensure len != cap",
                "    assert_eq!(bytes.ptr, vec.as_ptr()); // Validate pointer",
                "    assert_eq!(bytes.len, 0); // Validate length",
                "    assert!(bytes.data.load(Ordering::SeqCst) != ptr::null_mut()); // Ensure valid AtomicPtr",
                "    assert_eq!(bytes.vtable, &SHARED_VTABLE); // Check vtable is SHARED_VTABLE",
                "    assert_eq!(bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK, 1); // Ensure kind is NOT aligned"
              ],
              "code": [
                "{",
                "    let vec = Vec::with_capacity(10); // empty Vec with capacity > 0",
                "    let bytes = Bytes::from(vec);",
                "    let vec = Vec::with_capacity(10); // Ensure len != cap",
                "    assert_eq!(bytes.ptr, vec.as_ptr()); // Validate pointer",
                "    assert_eq!(bytes.len, 0); // Validate length",
                "    assert!(bytes.data.load(Ordering::SeqCst) != ptr::null_mut()); // Ensure valid AtomicPtr",
                "    assert_eq!(bytes.vtable, &SHARED_VTABLE); // Check vtable is SHARED_VTABLE",
                "    assert_eq!(bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK, 1); // Ensure kind is NOT aligned",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: len == cap at line 972 is false\n",
        "precondition: 0 == (shared as usize & KIND_MASK) at line 987 is true\n"
      ],
      "input_infer": "Vec<u8> with len < cap and aligned pointer (shared pointer) fulfilling 0 == (shared as usize & KIND_MASK)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5]; // len = 5, cap = default capacity",
                "    let bytes = Bytes::from(vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.len, 5);",
                "    assert!(unsafe { (bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK) == 0 });",
                "    assert_eq!(bytes.vtable, &SHARED_VTABLE);",
                "    assert_eq!(bytes.ptr as *const u8, vec.as_ptr());",
                "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.cap, vec.capacity());",
                "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.ref_cnt.load(Ordering::SeqCst), 1);"
              ],
              "code": [
                "{",
                "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5]; // len = 5, cap = default capacity",
                "    let bytes = Bytes::from(vec);",
                "    assert_eq!(bytes.len, 5);",
                "    assert!(unsafe { (bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK) == 0 });",
                "    assert_eq!(bytes.vtable, &SHARED_VTABLE);",
                "    assert_eq!(bytes.ptr as *const u8, vec.as_ptr());",
                "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.cap, vec.capacity());",
                "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.ref_cnt.load(Ordering::SeqCst), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
                "    vec.extend_from_slice(&[1, 2, 3, 4, 5]); // len = 5, cap = 5",
                "    let bytes = Bytes::from(vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 5);",
                "    assert_eq!(cap, 5);",
                "    assert!(len != cap);",
                "    assert!(0 == (shared as usize & KIND_MASK));",
                "    assert!(bytes.len() == 5);",
                "    assert!(bytes.ptr == vec.as_mut_ptr());",
                "    assert!(bytes.data.load(Ordering::SeqCst) != ptr::null_mut());"
              ],
              "code": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
                "    vec.extend_from_slice(&[1, 2, 3, 4, 5]); // len = 5, cap = 5",
                "    let bytes = Bytes::from(vec);",
                "    assert_eq!(len, 5);",
                "    assert_eq!(cap, 5);",
                "    assert!(len != cap);",
                "    assert!(0 == (shared as usize & KIND_MASK));",
                "    assert!(bytes.len() == 5);",
                "    assert!(bytes.ptr == vec.as_mut_ptr());",
                "    assert!(bytes.data.load(Ordering::SeqCst) != ptr::null_mut());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec: Vec<u8> = vec![1, 2, 3, 4]; // len = 4, cap = default capacity",
                "    let alignment_check = {",
                "        let bytes = Bytes::from(vec);",
                "        let shared_ptr = bytes.data.load(Ordering::SeqCst);",
                "        shared_ptr as usize & KIND_MASK == 0",
                "    };",
                "    assert!(alignment_check);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).len, 4);",
                "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) as usize & KIND_MASK == 0);",
                "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) != ptr::null_mut());",
                "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).vtable, &SHARED_VTABLE);"
              ],
              "code": [
                "{",
                "    let vec: Vec<u8> = vec![1, 2, 3, 4]; // len = 4, cap = default capacity",
                "    let alignment_check = {",
                "        let bytes = Bytes::from(vec);",
                "        let shared_ptr = bytes.data.load(Ordering::SeqCst);",
                "        shared_ptr as usize & KIND_MASK == 0",
                "    };",
                "    assert!(alignment_check);",
                "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).len, 4);",
                "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) as usize & KIND_MASK == 0);",
                "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) != ptr::null_mut());",
                "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).vtable, &SHARED_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}