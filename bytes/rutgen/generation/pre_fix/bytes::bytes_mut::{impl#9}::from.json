{
  "name": "bytes::bytes_mut::{impl#9}::from",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1268:5:1270:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "src input string length: 0 to 2^32-1 characters (including maximum length for `str` type)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"\";",
                "    let _result = BytesMut::from(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.len(), 0);",
                "    assert_eq!(_result.cap, 0);",
                "    assert!(_result.ptr.as_ptr().is_null());"
              ],
              "code": [
                "{",
                "    let input = \"\";",
                "    let _result = BytesMut::from(input);",
                "    assert_eq!(_result.len(), 0);",
                "    assert_eq!(_result.cap, 0);",
                "    assert!(_result.ptr.as_ptr().is_null());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"a\";",
                "    let _result = BytesMut::from(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.len(), 1);",
                "    assert_eq!(_result.cap, 1);",
                "    assert_eq!(&_result[..], b\"a\");",
                "    assert!(_result.ptr.as_ptr() != std::ptr::null_mut());",
                "    assert_eq!(_result.data.ref_count.load(Ordering::SeqCst), 1);",
                "    assert_eq!(_result.data.vec.len(), 1);",
                "    assert_eq!(_result.data.vec[0], b'a');"
              ],
              "code": [
                "{",
                "    let input = \"a\";",
                "    let _result = BytesMut::from(input);",
                "    assert_eq!(_result.len(), 1);",
                "    assert_eq!(_result.cap, 1);",
                "    assert_eq!(&_result[..], b\"a\");",
                "    assert!(_result.ptr.as_ptr() != std::ptr::null_mut());",
                "    assert_eq!(_result.data.ref_count.load(Ordering::SeqCst), 1);",
                "    assert_eq!(_result.data.vec.len(), 1);",
                "    assert_eq!(_result.data.vec[0], b'a');",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"ab\";",
                "    let _result = BytesMut::from(input);",
                "}"
              ],
              "oracle": [
                "    assert!(_result.len() == 2);",
                "    assert!(_result.cap >= 2);",
                "    assert!(_result.ptr.as_ptr() != std::ptr::null_mut());",
                "    assert_eq!(_result.to_vec(), b\"ab\");",
                "    assert_eq!(_result.data, SHARED_VTABLE.into_vec);"
              ],
              "code": [
                "{",
                "    let input = \"ab\";",
                "    let _result = BytesMut::from(input);",
                "    assert!(_result.len() == 2);",
                "    assert!(_result.cap >= 2);",
                "    assert!(_result.ptr.as_ptr() != std::ptr::null_mut());",
                "    assert_eq!(_result.to_vec(), b\"ab\");",
                "    assert_eq!(_result.data, SHARED_VTABLE.into_vec);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"a\".repeat(2_usize.pow(32) - 1);",
                "    let _result = BytesMut::from(input.as_str());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.len(), 2_usize.pow(32) - 1);",
                "    assert_eq!(_result.cap, _result.len());",
                "    assert_eq!(_result.ptr.as_ptr(), input.as_ptr());",
                "    assert!(ptr::eq(_result.data, input.as_ptr() as *mut Shared));",
                "    assert!(unsafe { _result.data.is_null() } == false);",
                "    assert!(unsafe { (*(_result.data)).vec.len() } == _result.len);"
              ],
              "code": [
                "{",
                "    let input = \"a\".repeat(2_usize.pow(32) - 1);",
                "    let _result = BytesMut::from(input.as_str());",
                "    assert_eq!(_result.len(), 2_usize.pow(32) - 1);",
                "    assert_eq!(_result.cap, _result.len());",
                "    assert_eq!(_result.ptr.as_ptr(), input.as_ptr());",
                "    assert!(ptr::eq(_result.data, input.as_ptr() as *mut Shared));",
                "    assert!(unsafe { _result.data.is_null() } == false);",
                "    assert!(unsafe { (*(_result.data)).vec.len() } == _result.len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}