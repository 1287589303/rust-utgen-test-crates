{
  "name": "bytes::bytes::{impl#28}::partial_cmp",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:872:5:874:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: &[u8] with lengths in the range [0, 1000] and other: &Bytes with lengths in the range [0, 1000].\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 4];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_data: &[u8] = &[1, 2, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    ",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 4];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_data: &[u8] = &[1, 2, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "    ",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Less));",
                "    ",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let result = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(result, Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[2, 3, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    self_data.clear();",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);",
                "    let empty_data: &[u8] = &[];",
                "    assert_eq!(empty_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let other_empty_bytes = Bytes { ptr: empty_data.as_ptr(), len: empty_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_empty_bytes), Some(cmp::Ordering::Greater));",
                "    let same_data: &[u8] = &[2, 3, 4];",
                "    let same_bytes = Bytes { ptr: same_data.as_ptr(), len: same_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(same_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[2, 3, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    self_data.clear();",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), None);",
                "    let empty_data: &[u8] = &[];",
                "    assert_eq!(empty_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let other_empty_bytes = Bytes { ptr: empty_data.as_ptr(), len: empty_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_empty_bytes), Some(cmp::Ordering::Greater));",
                "    let same_data: &[u8] = &[2, 3, 4];",
                "    let same_bytes = Bytes { ptr: same_data.as_ptr(), len: same_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(same_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[2, 3, 4];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[1, 2, 3, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_data: &[u8] = &[0];",
                "    let other_data: &[u8] = &[1];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[10, 20, 30];",
                "    let other_data: &[u8] = &[10, 20, 30];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_data: &[u8] = &[255];",
                "    let other_data: &[u8] = &[254];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[2, 3, 4];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[1, 2, 3, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_data: &[u8] = &[0];",
                "    let other_data: &[u8] = &[1];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[10, 20, 30];",
                "    let other_data: &[u8] = &[10, 20, 30];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_data: &[u8] = &[255];",
                "    let other_data: &[u8] = &[254];",
                "    let other_bytes = Bytes {",
                "    ptr: other_data.as_ptr(),",
                "    len: other_data.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    self_data = &[1, 2, 3];",
                "    other_data = &[1, 2, 3];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    self_data = &[4, 5, 6];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    self_data = &[];",
                "    other_data = &[1, 2, 3];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    self_data = &[1, 2, 3];",
                "    other_data = &[];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    self_data = &[];",
                "    other_data = &[];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3, 4];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    self_data = &[1, 2, 3];",
                "    other_data = &[1, 2, 3];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    self_data = &[4, 5, 6];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    self_data = &[];",
                "    other_data = &[1, 2, 3];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    self_data = &[1, 2, 3];",
                "    other_data = &[];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    self_data = &[];",
                "    other_data = &[];",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    assert_eq!(other_bytes.len, 3);",
                "    assert!(self_data.len > other_bytes.len);",
                "    assert_eq!(self_data, &[1, 2, 3, 4]);",
                "    assert_eq!(other_bytes.as_slice(), &[1, 2, 3]);",
                "    assert!(other_bytes.ptr != ptr::null());",
                "    assert!(other_bytes.vtable.drop.is_some());",
                "    assert!(other_bytes.vtable.clone.is_some());"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3, 4];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    assert_eq!(other_bytes.len, 3);",
                "    assert!(self_data.len > other_bytes.len);",
                "    assert_eq!(self_data, &[1, 2, 3, 4]);",
                "    assert_eq!(other_bytes.as_slice(), &[1, 2, 3]);",
                "    assert!(other_bytes.ptr != ptr::null());",
                "    assert!(other_bytes.vtable.drop.is_some());",
                "    assert!(other_bytes.vtable.clone.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "}"
              ],
              "oracle": [
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[5, 6];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let other_bytes = Bytes {",
                "        ptr: other_data.as_ptr(),",
                "        len: other_data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let _ = self_data.partial_cmp(&other_bytes);",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "    let self_data: &[u8] = &[1, 2, 3];",
                "    let other_data: &[u8] = &[1, 2, 3];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
                "    let self_data: &[u8] = &[];",
                "    let other_data: &[u8] = &[1, 2];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
                "    let self_data: &[u8] = &[5, 6];",
                "    let other_data: &[u8] = &[];",
                "    let other_bytes = Bytes { ptr: other_data.as_ptr(), len: other_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(self_data.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}