{
  "name": "bytes::buf::buf_impl::Buf::try_get_i64_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1738:5:1740:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining: 0 to 7 (for Err), 8 (for Ok); buffer size: 8 (for successful read), 0 to 7 (for insufficient data)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_i64_le());",
                "    assert_eq!(6, buf.remaining());",
                "    buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_i64_le());",
                "    assert_eq!(7, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_i64_le());",
                "    assert_eq!(6, buf.remaining());",
                "    buf = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_i64_le());",
                "    assert_eq!(7, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), result);",
                "    assert_eq!(1, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), result);",
                "    assert_eq!(1, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), result);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 3 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 3 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 4 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 4 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), result);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 6 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 6 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    let result = buf.try_get_i64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    let result = buf.try_get_i64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "remaining >= 8 and remaining < 16\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError { requested: 8, available: self.remaining() });",
                "            }",
                "            let bytes = &self.data[self.position..self.position + 8];",
                "            self.position += 8;",
                "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_i64_le();",
                "    let remaining = buf.remaining();",
                "",
                "    // Here we do not assert, but you can verify the conditions from result and remaining",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0102030405060708_i64), result);",
                "    assert_eq!(6, remaining);",
                "    assert!(remaining < 8);",
                "    assert!(result.is_ok());",
                "    assert_eq!(buf.position, 8);",
                "    assert_eq!(buf.remaining(), 6);",
                "    assert!(matches!(result, Ok(ret) if ret == 0x0102030405060708_i64));"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError { requested: 8, available: self.remaining() });",
                "            }",
                "            let bytes = &self.data[self.position..self.position + 8];",
                "            self.position += 8;",
                "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_i64_le();",
                "    let remaining = buf.remaining();",
                "",
                "    // Here we do not assert, but you can verify the conditions from result and remaining",
                "    assert_eq!(Ok(0x0102030405060708_i64), result);",
                "    assert_eq!(6, remaining);",
                "    assert!(remaining < 8);",
                "    assert!(result.is_ok());",
                "    assert_eq!(buf.position, 8);",
                "    assert_eq!(buf.remaining(), 6);",
                "    assert!(matches!(result, Ok(ret) if ret == 0x0102030405060708_i64));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError { requested: 8, available: self.remaining() });",
                "            }",
                "            let bytes = &self.data[self.position..self.position + 8];",
                "            self.position += 8;",
                "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_i64_le();",
                "    let remaining = buf.remaining();",
                "",
                "    // Here we do not assert, but you can verify the conditions from result and remaining",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
                "    assert_eq!(0, buf.remaining());",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_i64_le());",
                "    assert_eq!(7, buf.remaining());",
                "    buf.position = 0;",
                "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
                "    assert_eq!(0, buf.remaining());",
                "    buf.position = 0;",
                "    let bytes = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    buf.data = bytes;",
                "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_i64_le());",
                "    assert_eq!(0, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        position: usize,",
                "    }",
                "",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError { requested: 8, available: self.remaining() });",
                "            }",
                "            let bytes = &self.data[self.position..self.position + 8];",
                "            self.position += 8;",
                "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_i64_le();",
                "    let remaining = buf.remaining();",
                "",
                "    // Here we do not assert, but you can verify the conditions from result and remaining",
                "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
                "    assert_eq!(0, buf.remaining());",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_i64_le());",
                "    assert_eq!(7, buf.remaining());",
                "    buf.position = 0;",
                "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
                "    assert_eq!(0, buf.remaining());",
                "    buf.position = 0;",
                "    let bytes = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    buf.data = bytes;",
                "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_i64_le());",
                "    assert_eq!(0, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}