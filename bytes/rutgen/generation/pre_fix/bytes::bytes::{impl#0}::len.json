{
  "name": "bytes::bytes::{impl#0}::len",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:303:5:305:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.len\n"
      ],
      "input_infer": "self.len should be in the range of 0 to usize::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = Bytes::new();",
                "    let length = b.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);"
              ],
              "code": [
                "{",
                "    let b = Bytes::new();",
                "    let length = b.len();",
                "    assert_eq!(length, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = Bytes::from_static(b\"hello\");",
                "    let length = b.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 5);"
              ],
              "code": [
                "{",
                "    let b = Bytes::from_static(b\"hello\");",
                "    let length = b.len();",
                "    assert_eq!(length, 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = Bytes::from_static(b\"a\");",
                "    let length = b.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1);",
                "    assert!(length == b.len());",
                "    assert!(length > 0);",
                "    assert!(length <= 1);",
                "    assert_eq!(Bytes::new().len(), 0);",
                "    assert_eq!(Bytes::from_static(b\"\").len(), 0);",
                "    assert_eq!(Bytes::from_static(b\"abc\").len(), 3);",
                "    assert_eq!(Bytes::from_static(b\"abcdef\").len(), 6);",
                "    assert!(length != 0);",
                "    assert!(length < 2);"
              ],
              "code": [
                "{",
                "    let b = Bytes::from_static(b\"a\");",
                "    let length = b.len();",
                "    assert_eq!(length, 1);",
                "    assert!(length == b.len());",
                "    assert!(length > 0);",
                "    assert!(length <= 1);",
                "    assert_eq!(Bytes::new().len(), 0);",
                "    assert_eq!(Bytes::from_static(b\"\").len(), 0);",
                "    assert_eq!(Bytes::from_static(b\"abc\").len(), 3);",
                "    assert_eq!(Bytes::from_static(b\"abcdef\").len(), 6);",
                "    assert!(length != 0);",
                "    assert!(length < 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let b = Bytes::from_static(b\"hello world\");",
                "    let length = b.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 11);"
              ],
              "code": [
                "{",
                "    let b = Bytes::from_static(b\"hello world\");",
                "    let length = b.len();",
                "    assert_eq!(length, 11);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = vec![0u8; usize::MAX];",
                "    let b = Bytes::from_owner(data);",
                "    let length = b.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, usize::MAX);"
              ],
              "code": [
                "{",
                "    let data = vec![0u8; usize::MAX];",
                "    let b = Bytes::from_owner(data);",
                "    let length = b.len();",
                "    assert_eq!(length, usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}