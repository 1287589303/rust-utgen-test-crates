{
  "name": "bytes::buf::buf_impl::Buf::try_get_i32",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1536:5:1538:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining bytes = 0 to 3 (inclusive) for expected Err(TryGetError) response; remaining bytes = 4 for expected Ok(i32) response\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    let result = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0809A0A1_i32), buf.try_get_i32());",
                "    assert_eq!(6, buf.remaining());",
                "    let mut buf_err: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
                "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf_err.try_get_i32());",
                "    assert_eq!(3, buf_err.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    let result = buf.try_get_i32();",
                "    assert_eq!(Ok(0x0809A0A1_i32), buf.try_get_i32());",
                "    assert_eq!(6, buf.remaining());",
                "    let mut buf_err: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
                "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf_err.try_get_i32());",
                "    assert_eq!(3, buf_err.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..]; // remaining bytes = 0",
                "    let result = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 0 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..]; // remaining bytes = 0",
                "    let result = buf.try_get_i32();",
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 0 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..]; // remaining bytes = 1",
                "    let result = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..]; // remaining bytes = 1",
                "    let result = buf.try_get_i32();",
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..]; // remaining bytes = 2",
                "    let result = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 2 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..]; // remaining bytes = 2",
                "    let result = buf.try_get_i32();",
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 2 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..]; // remaining bytes = 3",
                "    let result = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..]; // remaining bytes = 3",
                "    let result = buf.try_get_i32();",
                "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "buf.remaining() == 4; buf.remaining() == 3; buf.remaining() == 0; buf.remaining() > 4; buf.remaining() < 4; buf.remaining() = SIZE (where SIZE is any positive integer)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x08\\x09\\xA0\\xA1\"[..];",
                "    let _ = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0809A0A1_i32), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 3);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x08\\x09\\xA0\\xA1\"[..];",
                "    let _ = buf.try_get_i32();",
                "    assert_eq!(Ok(0x0809A0A1_i32), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
                "    let _ = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 3);",
                "    assert_eq!(buf.try_get_i32(), Err(TryGetError { requested: 4, available: 3 }));",
                "    ",
                "    let mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    let result = buf.try_get_i32();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 0x0809A0A1_i32);",
                "    assert_eq!(buf.remaining(), 6);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
                "    let _ = buf.try_get_i32();",
                "    assert_eq!(buf.remaining(), 3);",
                "    assert_eq!(buf.try_get_i32(), Err(TryGetError { requested: 4, available: 3 }));",
                "    ",
                "    let mut buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    let result = buf.try_get_i32();",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 0x0809A0A1_i32);",
                "    assert_eq!(buf.remaining(), 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\"[..];",
                "    let _ = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(matches!(buf.try_get_i32(), Err(TryGetError { requested: 4, available: 0 })));",
                "    buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    assert_eq!(Ok(0x0809A0A1_i32), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 6);",
                "    buf = &b\"\\x01\\x02\\x03\"[..];",
                "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 3);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\"[..];",
                "    let _ = buf.try_get_i32();",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(matches!(buf.try_get_i32(), Err(TryGetError { requested: 4, available: 0 })));",
                "    buf = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    assert_eq!(Ok(0x0809A0A1_i32), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 6);",
                "    buf = &b\"\\x01\\x02\\x03\"[..];",
                "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_i32());",
                "    assert_eq!(buf.remaining(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x08\\x09\\xA0\\xA1\\xB2\\xB3\"[..];",
                "    let _ = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 2);",
                "    assert_eq!(buf.try_get_i32(), Ok(0x0809A0A1_i32));",
                "    assert!(buf.remaining() >= 0);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x08\\x09\\xA0\\xA1\\xB2\\xB3\"[..];",
                "    let _ = buf.try_get_i32();",
                "    assert_eq!(buf.remaining(), 2);",
                "    assert_eq!(buf.try_get_i32(), Ok(0x0809A0A1_i32));",
                "    assert!(buf.remaining() >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x08\\x09\\xA0\"[..];",
                "    let _ = buf.try_get_i32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 3);",
                "    assert_eq!(buf.try_get_i32(), Err(TryGetError { requested: 4, available: 3 }));",
                "    assert_eq!(buf.remaining(), 3);",
                "    let mut buf_valid = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    assert_eq!(buf_valid.try_get_i32(), Ok(0x0809A0A1_i32));",
                "    assert_eq!(buf_valid.remaining(), 6);"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x08\\x09\\xA0\"[..];",
                "    let _ = buf.try_get_i32();",
                "    assert_eq!(buf.remaining(), 3);",
                "    assert_eq!(buf.try_get_i32(), Err(TryGetError { requested: 4, available: 3 }));",
                "    assert_eq!(buf.remaining(), 3);",
                "    let mut buf_valid = &b\"\\x08\\x09\\xA0\\xA1 hello\"[..];",
                "    assert_eq!(buf_valid.try_get_i32(), Ok(0x0809A0A1_i32));",
                "    assert_eq!(buf_valid.remaining(), 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}