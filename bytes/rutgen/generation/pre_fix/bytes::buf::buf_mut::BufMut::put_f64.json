{
  "name": "bytes::buf::buf_mut::BufMut::put_f64",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1215:5:1217:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "The buffer must have at least 8 bytes of remaining capacity to avoid panic, and the input for the function must be a valid 64-bit floating point number (f64) within the range of [-1.7976931348623157E+308, 1.7976931348623157E+308).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(1.2f64); // Calling the function with a valid f64 value",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");",
                "    buf.put_f64(0.0f64);",
                "    assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(-1.0f64);",
                "    assert_eq!(buf, b\"\\xBF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::INFINITY);",
                "    assert_eq!(buf, b\"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::NEG_INFINITY);",
                "    assert_eq!(buf, b\"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::NAN);",
                "    assert_eq!(buf, b\"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\");"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(1.2f64); // Calling the function with a valid f64 value",
                "    assert_eq!(buf, b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");",
                "    buf.put_f64(0.0f64);",
                "    assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(-1.0f64);",
                "    assert_eq!(buf, b\"\\xBF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::INFINITY);",
                "    assert_eq!(buf, b\"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::NEG_INFINITY);",
                "    assert_eq!(buf, b\"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::NAN);",
                "    assert_eq!(buf, b\"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(-1.7976931348623157E+308); // Calling the function with the minimum f64 value",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, b\"\\xFF\\xF9\\x1B\\x8E\\x1C\\xD8\\xA3\\xD7\"); // Check expected output for negative maximum f64 value",
                "    assert_eq!(buf.remaining_mut(), 0); // Verify that buffer has no remaining capacity left after put_f64 call",
                "    buf.put_f64(1.0); // Call function with a valid f64 value",
                "    assert_eq!(buf, b\"\\x3F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"); // Check expected output for f64 value of 1.0",
                "    assert!(std::panic::catch_unwind(|| buf.put_f64(1.7976931348623157E+308)).is_err()); // Verify panic on exceeding capacity with maximum f64"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(-1.7976931348623157E+308); // Calling the function with the minimum f64 value",
                "    assert_eq!(buf, b\"\\xFF\\xF9\\x1B\\x8E\\x1C\\xD8\\xA3\\xD7\"); // Check expected output for negative maximum f64 value",
                "    assert_eq!(buf.remaining_mut(), 0); // Verify that buffer has no remaining capacity left after put_f64 call",
                "    buf.put_f64(1.0); // Call function with a valid f64 value",
                "    assert_eq!(buf, b\"\\x3F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"); // Check expected output for f64 value of 1.0",
                "    assert!(std::panic::catch_unwind(|| buf.put_f64(1.7976931348623157E+308)).is_err()); // Verify panic on exceeding capacity with maximum f64",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(1.7976931348623157E+308); // Calling the function with the maximum f64 value",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, b\"\\x7F\\xEF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\"); // Verify that the buffer contains the correct bytes after putting max f64 value",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(f64::MIN); // Calling the function with the minimum f64 value",
                "    ",
                "    assert_eq!(buf, b\"\\xF1\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"); // Verify that the buffer contains the correct bytes after putting min f64 value",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(f64::EPSILON); // Calling the function with the smallest positive f64 value",
                "    ",
                "    assert_eq!(buf, b\"\\x3C\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"); // Verify that the buffer contains the correct bytes after putting epsilon f64 value",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    assert_panics!(buf.put_f64(f64::NAN)); // Ensure that putting NaN value results in panic",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 7]; // Initializing a buffer with insufficient capacity",
                "    assert_panics!(buf.put_f64(1.2)); // Ensure that calling put_f64 with insufficient capacity results in panic",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 16]; // Initializing a buffer with more than enough capacity",
                "    buf.put_f64(0.0); // Calling the function with zero",
                "    assert_eq!(buf[0..8], b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"); // Verify that the buffer contains the correct bytes after putting zero f64 value"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(1.7976931348623157E+308); // Calling the function with the maximum f64 value",
                "    assert_eq!(buf, b\"\\x7F\\xEF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\"); // Verify that the buffer contains the correct bytes after putting max f64 value",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(f64::MIN); // Calling the function with the minimum f64 value",
                "    ",
                "    assert_eq!(buf, b\"\\xF1\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"); // Verify that the buffer contains the correct bytes after putting min f64 value",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(f64::EPSILON); // Calling the function with the smallest positive f64 value",
                "    ",
                "    assert_eq!(buf, b\"\\x3C\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"); // Verify that the buffer contains the correct bytes after putting epsilon f64 value",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    assert_panics!(buf.put_f64(f64::NAN)); // Ensure that putting NaN value results in panic",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 7]; // Initializing a buffer with insufficient capacity",
                "    assert_panics!(buf.put_f64(1.2)); // Ensure that calling put_f64 with insufficient capacity results in panic",
                "    ",
                "    let mut buf: Vec<u8> = vec![0; 16]; // Initializing a buffer with more than enough capacity",
                "    buf.put_f64(0.0); // Calling the function with zero",
                "    assert_eq!(buf[0..8], b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"); // Verify that the buffer contains the correct bytes after putting zero f64 value",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 7]; // Initializing a buffer with less than 8 bytes of capacity",
                "    buf.put_f64(1.2f64); // This should panic due to insufficient capacity",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining_mut(), 7);",
                "    assert!(std::panic::catch_unwind(|| buf.put_f64(1.2f64)).is_err());",
                "    assert!(buf.len() == 7);",
                "    assert!(buf == vec![0, 0, 0, 0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 7]; // Initializing a buffer with less than 8 bytes of capacity",
                "    buf.put_f64(1.2f64); // This should panic due to insufficient capacity",
                "    assert_eq!(buf.remaining_mut(), 7);",
                "    assert!(std::panic::catch_unwind(|| buf.put_f64(1.2f64)).is_err());",
                "    assert!(buf.len() == 7);",
                "    assert!(buf == vec![0, 0, 0, 0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(0.0f64); // Calling the function with zero as a valid f64 value",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(1.0f64); // Calling the function with one as a valid f64 value",
                "    assert_eq!(buf, b\"\\x3F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(2.5f64); // Calling the function with two-point-five as a valid f64 value",
                "    assert_eq!(buf, b\"\\x40\\x02\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(-1.2f64); // Calling the function with negative value",
                "    assert_eq!(buf, b\"\\xBF\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");",
                "    buf.put_f64(f64::MAX); // Calling the function with maximum f64 value",
                "    assert_eq!(buf, b\"\\x7F\\x7F\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\");",
                "    buf.put_f64(f64::MIN); // Calling the function with minimum f64 value",
                "    assert_eq!(buf, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::EPSILON); // Calling the function with machine epsilon value",
                "    assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x3F\");",
                "    buf.put_f64(f64::NEG_INFINITY); // Calling the function with negative infinity",
                "    assert_eq!(buf, b\"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::INFINITY); // Calling the function with positive infinity",
                "    assert_eq!(buf, b\"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 8]; // Initializing a buffer with exactly 8 bytes of capacity",
                "    buf.put_f64(0.0f64); // Calling the function with zero as a valid f64 value",
                "    assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(1.0f64); // Calling the function with one as a valid f64 value",
                "    assert_eq!(buf, b\"\\x3F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(2.5f64); // Calling the function with two-point-five as a valid f64 value",
                "    assert_eq!(buf, b\"\\x40\\x02\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(-1.2f64); // Calling the function with negative value",
                "    assert_eq!(buf, b\"\\xBF\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\");",
                "    buf.put_f64(f64::MAX); // Calling the function with maximum f64 value",
                "    assert_eq!(buf, b\"\\x7F\\x7F\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\");",
                "    buf.put_f64(f64::MIN); // Calling the function with minimum f64 value",
                "    assert_eq!(buf, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::EPSILON); // Calling the function with machine epsilon value",
                "    assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x3F\");",
                "    buf.put_f64(f64::NEG_INFINITY); // Calling the function with negative infinity",
                "    assert_eq!(buf, b\"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "    buf.put_f64(f64::INFINITY); // Calling the function with positive infinity",
                "    assert_eq!(buf, b\"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}