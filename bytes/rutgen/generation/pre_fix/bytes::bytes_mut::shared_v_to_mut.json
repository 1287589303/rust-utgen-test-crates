{
  "name": "bytes::bytes_mut::shared_v_to_mut",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": false,
  "loc": "src/bytes_mut.rs:1815:1:1842:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (*shared).is_unique() at line 1818 is true\n",
        "expected return value/type: BytesMut {\n            ptr,\n            len,\n            cap,\n            data: shared,\n        }\n"
      ],
      "input_infer": "data: &AtomicPtr<()> should point to a valid shared instance with ref_count equal to 1; ptr should be a valid pointer within the range of an allocated Vec<u8>; len should be a valid usize less than or equal to the length of the Vec<u8> referenced by the shared instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    // Step 1: Create a Vec<u8> and wrap it in Shared",
                "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    // Step 2: Create an AtomicPtr<()>",
                "    let data = AtomicPtr::new(shared.cast());",
                "",
                "    // Step 3: Get the pointer to the Vec<u8> and the length",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared).vec.len() };",
                "",
                "    // Step 4: Call the function under test",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let shared_ptr = Box::into_raw(Box::new(Shared {",
                "    vec: vec.clone(),",
                "    original_capacity_repr: 0,",
                "    ref_count: AtomicUsize::new(1),",
                "    }));",
                "    let data = AtomicPtr::new(shared_ptr.cast());",
                "    let ptr = unsafe { (*shared_ptr).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared_ptr).vec.len() };",
                "    let result = unsafe { shared_v_to_mut(&data, ptr, len) };",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.cap, unsafe { (*shared_ptr).vec.capacity() - offset_from(ptr as *mut u8, (*shared_ptr).vec.as_mut_ptr()) });",
                "    assert_eq!(result.data, shared_ptr);",
                "    assert!(!result.ptr.is_null());",
                "    assert_eq!(result.ptr.as_ptr(), ptr);"
              ],
              "code": [
                "{",
                "    // Step 1: Create a Vec<u8> and wrap it in Shared",
                "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    // Step 2: Create an AtomicPtr<()>",
                "    let data = AtomicPtr::new(shared.cast());",
                "",
                "    // Step 3: Get the pointer to the Vec<u8> and the length",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared).vec.len() };",
                "",
                "    // Step 4: Call the function under test",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let shared_ptr = Box::into_raw(Box::new(Shared {",
                "    vec: vec.clone(),",
                "    original_capacity_repr: 0,",
                "    ref_count: AtomicUsize::new(1),",
                "    }));",
                "    let data = AtomicPtr::new(shared_ptr.cast());",
                "    let ptr = unsafe { (*shared_ptr).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared_ptr).vec.len() };",
                "    let result = unsafe { shared_v_to_mut(&data, ptr, len) };",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.cap, unsafe { (*shared_ptr).vec.capacity() - offset_from(ptr as *mut u8, (*shared_ptr).vec.as_mut_ptr()) });",
                "    assert_eq!(result.data, shared_ptr);",
                "    assert!(!result.ptr.is_null());",
                "    assert_eq!(result.ptr.as_ptr(), ptr);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec: Vec<u8> = vec![10, 20, 30, 40, 50];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared).vec.len() };",
                "",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let vec: Vec<u8> = vec![10, 20, 30, 40, 50];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "    vec,",
                "    original_capacity_repr: 0,",
                "    ref_count: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared).vec.len() };",
                "    ",
                "    unsafe {",
                "    let result = shared_v_to_mut(&data, ptr, len);",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.capacity(), (*shared).vec.capacity() - offset_from(ptr as *mut u8, (*shared).vec.as_mut_ptr()));",
                "    assert_eq!(result.data, shared);",
                "    }"
              ],
              "code": [
                "{",
                "    let vec: Vec<u8> = vec![10, 20, 30, 40, 50];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared).vec.len() };",
                "",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "    let vec: Vec<u8> = vec![10, 20, 30, 40, 50];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "    vec,",
                "    original_capacity_repr: 0,",
                "    ref_count: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = unsafe { (*shared).vec.len() };",
                "    ",
                "    unsafe {",
                "    let result = shared_v_to_mut(&data, ptr, len);",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.capacity(), (*shared).vec.capacity() - offset_from(ptr as *mut u8, (*shared).vec.as_mut_ptr()));",
                "    assert_eq!(result.data, shared);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec: Vec<u8> = vec![100, 200, 300, 400, 500];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = 3; // valid partial length",
                "",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let expected_ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let expected_len = 3;",
                "    let expected_cap = unsafe { (*shared).vec.capacity() - offset_from(ptr, expected_ptr) };",
                "    let expected_data = shared;",
                "    ",
                "    assert_eq!(result.ptr, expected_ptr);",
                "    assert_eq!(result.len, expected_len);",
                "    assert_eq!(result.cap, expected_cap);",
                "    assert_eq!(result.data, expected_data);"
              ],
              "code": [
                "{",
                "    let vec: Vec<u8> = vec![100, 200, 300, 400, 500];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = 3; // valid partial length",
                "",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "    let expected_ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let expected_len = 3;",
                "    let expected_cap = unsafe { (*shared).vec.capacity() - offset_from(ptr, expected_ptr) };",
                "    let expected_data = shared;",
                "    ",
                "    assert_eq!(result.ptr, expected_ptr);",
                "    assert_eq!(result.len, expected_len);",
                "    assert_eq!(result.cap, expected_cap);",
                "    assert_eq!(result.data, expected_data);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let vec: Vec<u8> = vec![12, 34, 56, 78];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = 0; // Zero length case",
                "",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let vec: Vec<u8> = vec![12, 34, 56, 78];",
                "    let shared = Box::into_raw(Box::new(Shared { vec, original_capacity_repr: 0, ref_count: AtomicUsize::new(1), }));",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = 0;",
                "    unsafe { let result = shared_v_to_mut(&data, ptr, len); assert_eq!(result.len(), 0); assert_eq!(result.cap, (*shared).vec.capacity()); assert!(result.data == shared); }",
                "    let expected_ptr = vptr(ptr as *mut u8); assert!(result.ptr == expected_ptr);"
              ],
              "code": [
                "{",
                "    let vec: Vec<u8> = vec![12, 34, 56, 78];",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec,",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = 0; // Zero length case",
                "",
                "    unsafe {",
                "        let result = shared_v_to_mut(&data, ptr, len);",
                "    }",
                "    let vec: Vec<u8> = vec![12, 34, 56, 78];",
                "    let shared = Box::into_raw(Box::new(Shared { vec, original_capacity_repr: 0, ref_count: AtomicUsize::new(1), }));",
                "    let data = AtomicPtr::new(shared.cast());",
                "    let ptr = unsafe { (*shared).vec.as_mut_ptr() };",
                "    let len = 0;",
                "    unsafe { let result = shared_v_to_mut(&data, ptr, len); assert_eq!(result.len(), 0); assert_eq!(result.cap, (*shared).vec.capacity()); assert!(result.data == shared); }",
                "    let expected_ptr = vptr(ptr as *mut u8); assert!(result.ptr == expected_ptr);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (*shared).is_unique() at line 1818 is false\n"
      ],
      "input_infer": "data: &AtomicPtr<()>, ptr: non-null pointer to a valid memory region, len: non-zero size (greater than 0)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared_data = Box::new(Shared {",
                "        vec: vec![1, 2, 3, 4],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(2), // Set ref count to 2 to make it non-unique",
                "    });",
                "    ",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "",
                "    unsafe {",
                "        let _result = shared_v_to_mut(&data, ptr as *const u8, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let shared_data = Box::new(Shared { vec: vec![1, 2, 3, 4], original_capacity_repr: 0, ref_count: AtomicUsize::new(2) });",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.cap == 0);",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.ptr.as_ptr() == ptr);",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.len == len);",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.data != ptr);"
              ],
              "code": [
                "{",
                "    let shared_data = Box::new(Shared {",
                "        vec: vec![1, 2, 3, 4],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(2), // Set ref count to 2 to make it non-unique",
                "    });",
                "    ",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "",
                "    unsafe {",
                "        let _result = shared_v_to_mut(&data, ptr as *const u8, len);",
                "    }",
                "    let shared_data = Box::new(Shared { vec: vec![1, 2, 3, 4], original_capacity_repr: 0, ref_count: AtomicUsize::new(2) });",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.cap == 0);",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.ptr.as_ptr() == ptr);",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.len == len);",
                "    assert!(unsafe { shared_v_to_mut(&data, ptr as *const u8, len) }.data != ptr);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared_data = Box::new(Shared {",
                "        vec: vec![5, 6, 7, 8, 9],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(2), // Still non-unique",
                "    });",
                "",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "",
                "    unsafe {",
                "        let _result = shared_v_to_mut(&data, ptr as *const u8, len);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let shared_data = Box::new(Shared { vec: vec![5, 6, 7, 8, 9], original_capacity_repr: 0, ref_count: AtomicUsize::new(2) });",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "    ",
                "    unsafe {",
                "    let result = shared_v_to_mut(&data, ptr as *const u8, len);",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.capacity(), 0);",
                "    assert_ne!(result.ptr.as_ptr(), ptr);",
                "    assert!(!result.data.is_unique());",
                "    }"
              ],
              "code": [
                "{",
                "    let shared_data = Box::new(Shared {",
                "        vec: vec![5, 6, 7, 8, 9],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(2), // Still non-unique",
                "    });",
                "",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "",
                "    unsafe {",
                "        let _result = shared_v_to_mut(&data, ptr as *const u8, len);",
                "    }",
                "    let shared_data = Box::new(Shared { vec: vec![5, 6, 7, 8, 9], original_capacity_repr: 0, ref_count: AtomicUsize::new(2) });",
                "    let ptr = shared_data.vec.as_mut_ptr();",
                "    let len = shared_data.vec.len();",
                "    let data = AtomicPtr::new(Box::into_raw(shared_data) as *mut ());",
                "    ",
                "    unsafe {",
                "    let result = shared_v_to_mut(&data, ptr as *const u8, len);",
                "    assert_eq!(result.len(), len);",
                "    assert_eq!(result.capacity(), 0);",
                "    assert_ne!(result.ptr.as_ptr(), ptr);",
                "    assert!(!result.data.is_unique());",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}