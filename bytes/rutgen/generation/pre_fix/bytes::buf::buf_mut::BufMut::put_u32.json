{
  "name": "bytes::buf::buf_mut::BufMut::put_u32",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:524:5:526:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "remaining capacity must be at least 4 bytes, n must be a valid u32 (0 to 2^32-1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 4];",
                "    buf.put_u32(0x12345678);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf[0], 0x12);",
                "    assert_eq!(buf[1], 0x34);",
                "    assert_eq!(buf[2], 0x56);",
                "    assert_eq!(buf[3], 0x78);"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 4];",
                "    buf.put_u32(0x12345678);",
                "    assert_eq!(buf[0], 0x12);",
                "    assert_eq!(buf[1], 0x34);",
                "    assert_eq!(buf[2], 0x56);",
                "    assert_eq!(buf[3], 0x78);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 4];",
                "    buf.put_u32(0);",
                "}"
              ],
              "oracle": [
                "    buf.put_u32(0); assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\");",
                "    buf.put_u32(0xFFFFFFFF); assert_eq!(buf, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    buf.put_u32(0x12345678); assert_eq!(buf, b\"\\x12\\x34\\x56\\x78\");",
                "    buf.put_u32(0x80000000); assert_eq!(buf, b\"\\x80\\x00\\x00\\x00\");",
                "    buf.put_u32(0xFFFFFFFF); assert_eq!(buf, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    buf.put_u32(0x01020304); assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\");",
                "    buf.put_u32(0x0);",
                "    let result = std::panic::catch_unwind(|| { buf.put_u32(0x100000000); });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 4];",
                "    buf.put_u32(0);",
                "    buf.put_u32(0); assert_eq!(buf, b\"\\x00\\x00\\x00\\x00\");",
                "    buf.put_u32(0xFFFFFFFF); assert_eq!(buf, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    buf.put_u32(0x12345678); assert_eq!(buf, b\"\\x12\\x34\\x56\\x78\");",
                "    buf.put_u32(0x80000000); assert_eq!(buf, b\"\\x80\\x00\\x00\\x00\");",
                "    buf.put_u32(0xFFFFFFFF); assert_eq!(buf, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    buf.put_u32(0x01020304); assert_eq!(buf, b\"\\x01\\x02\\x03\\x04\");",
                "    buf.put_u32(0x0);",
                "    let result = std::panic::catch_unwind(|| { buf.put_u32(0x100000000); });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 4];",
                "    buf.put_u32(u32::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    assert!(buf.remaining_mut() == 0);",
                "    buf.put_u32(0x0809A0A1);",
                "    assert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");",
                "    assert!(panic_caught(|| {",
                "    buf.put_u32(0x00000000); // Expected to panic due to insufficient capacity",
                "    }));"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 4];",
                "    buf.put_u32(u32::MAX);",
                "    assert_eq!(buf, b\"\\xFF\\xFF\\xFF\\xFF\");",
                "    assert!(buf.remaining_mut() == 0);",
                "    buf.put_u32(0x0809A0A1);",
                "    assert_eq!(buf, b\"\\x08\\x09\\xA0\\xA1\");",
                "    assert!(panic_caught(|| {",
                "    buf.put_u32(0x00000000); // Expected to panic due to insufficient capacity",
                "    }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 3];",
                "    buf.put_u32(0x12345678);",
                "}"
              ],
              "oracle": [
                "    let mut buf: Vec<u8> = vec![0; 3];",
                "    assert_eq!(buf.len(), 3);",
                "    assert!(buf.remaining_mut() < 4);",
                "    let result = std::panic::catch_unwind(|| buf.put_u32(0x12345678));",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut buf: Vec<u8> = vec![0; 3];",
                "    buf.put_u32(0x12345678);",
                "    let mut buf: Vec<u8> = vec![0; 3];",
                "    assert_eq!(buf.len(), 3);",
                "    assert!(buf.remaining_mut() < 4);",
                "    let result = std::panic::catch_unwind(|| buf.put_u32(0x12345678));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}