{
  "name": "bytes::bytes_mut::{impl#15}::default",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1301:5:1303:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capacity: [0, 2^17 - 1], len: [0, capacity], value: [0, 255]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_mut = BytesMut::default();",
                "    let len = bytes_mut.len();",
                "    let capacity = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert_eq!(capacity, 0);"
              ],
              "code": [
                "{",
                "    let bytes_mut = BytesMut::default();",
                "    let len = bytes_mut.len();",
                "    let capacity = bytes_mut.capacity();",
                "    assert_eq!(len, 0);",
                "    assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_mut = BytesMut::new();",
                "    let len = bytes_mut.len();",
                "    let capacity = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert_eq!(capacity, 0);"
              ],
              "code": [
                "{",
                "    let bytes_mut = BytesMut::new();",
                "    let len = bytes_mut.len();",
                "    let capacity = bytes_mut.capacity();",
                "    assert_eq!(len, 0);",
                "    assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 0;",
                "    let bytes_mut = BytesMut::with_capacity(capacity);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert_eq!(cap, 0);"
              ],
              "code": [
                "{",
                "    let capacity: usize = 0;",
                "    let bytes_mut = BytesMut::with_capacity(capacity);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "    assert_eq!(len, 0);",
                "    assert_eq!(cap, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 10;",
                "    let bytes_mut = BytesMut::with_capacity(capacity);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(BytesMut::default().len(), 0);",
                "    assert_eq!(BytesMut::default().capacity(), 0);",
                "    assert_eq!(BytesMut::new().len(), 0);",
                "    assert_eq!(BytesMut::new().capacity(), 0);",
                "    let bytes_mut_capacity_10 = BytesMut::with_capacity(10);",
                "    assert_eq!(bytes_mut_capacity_10.len(), 0);",
                "    assert_eq!(bytes_mut_capacity_10.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let capacity: usize = 10;",
                "    let bytes_mut = BytesMut::with_capacity(capacity);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "    assert_eq!(BytesMut::default().len(), 0);",
                "    assert_eq!(BytesMut::default().capacity(), 0);",
                "    assert_eq!(BytesMut::new().len(), 0);",
                "    assert_eq!(BytesMut::new().capacity(), 0);",
                "    let bytes_mut_capacity_10 = BytesMut::with_capacity(10);",
                "    assert_eq!(bytes_mut_capacity_10.len(), 0);",
                "    assert_eq!(bytes_mut_capacity_10.capacity(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = (1 << 17) - 1;",
                "    let bytes_mut = BytesMut::with_capacity(capacity);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert_eq!(cap, capacity);"
              ],
              "code": [
                "{",
                "    let capacity: usize = (1 << 17) - 1;",
                "    let bytes_mut = BytesMut::with_capacity(capacity);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "    assert_eq!(len, 0);",
                "    assert_eq!(cap, capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 100;",
                "    let mut bytes_mut = BytesMut::with_capacity(capacity);",
                "    bytes_mut.resize(0, 0);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert_eq!(cap, 100);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), capacity);"
              ],
              "code": [
                "{",
                "    let capacity: usize = 100;",
                "    let mut bytes_mut = BytesMut::with_capacity(capacity);",
                "    bytes_mut.resize(0, 0);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "    assert_eq!(len, 0);",
                "    assert_eq!(cap, 100);",
                "    assert!(bytes_mut.is_empty());",
                "    assert_eq!(bytes_mut.len(), 0);",
                "    assert_eq!(bytes_mut.capacity(), capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 100;",
                "    let mut bytes_mut = BytesMut::with_capacity(capacity);",
                "    bytes_mut.resize(capacity, 0);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(BytesMut::default().len(), 0);",
                "    assert_eq!(BytesMut::default().capacity(), 0);",
                "    let bytes_mut = BytesMut::default();",
                "    assert!(bytes_mut.is_empty());",
                "    let mut another_bytes_mut = BytesMut::with_capacity(100);",
                "    another_bytes_mut.resize(100, 0);",
                "    assert_eq!(another_bytes_mut.len(), 100);",
                "    assert!(another_bytes_mut.capacity() >= 100);"
              ],
              "code": [
                "{",
                "    let capacity: usize = 100;",
                "    let mut bytes_mut = BytesMut::with_capacity(capacity);",
                "    bytes_mut.resize(capacity, 0);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "    assert_eq!(BytesMut::default().len(), 0);",
                "    assert_eq!(BytesMut::default().capacity(), 0);",
                "    let bytes_mut = BytesMut::default();",
                "    assert!(bytes_mut.is_empty());",
                "    let mut another_bytes_mut = BytesMut::with_capacity(100);",
                "    another_bytes_mut.resize(100, 0);",
                "    assert_eq!(another_bytes_mut.len(), 100);",
                "    assert!(another_bytes_mut.capacity() >= 100);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity: usize = 100;",
                "    let mut bytes_mut = BytesMut::with_capacity(capacity);",
                "    bytes_mut.resize(capacity + 1, 0);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, capacity + 1);",
                "    assert!(len > cap);"
              ],
              "code": [
                "{",
                "    let capacity: usize = 100;",
                "    let mut bytes_mut = BytesMut::with_capacity(capacity);",
                "    bytes_mut.resize(capacity + 1, 0);",
                "    let len = bytes_mut.len();",
                "    let cap = bytes_mut.capacity();",
                "    assert_eq!(len, capacity + 1);",
                "    assert!(len > cap);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}