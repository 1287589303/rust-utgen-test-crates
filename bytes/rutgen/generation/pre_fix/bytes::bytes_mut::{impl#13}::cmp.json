{
  "name": "bytes::bytes_mut::{impl#13}::cmp",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1292:5:1294:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self and other must be instances of BytesMut with byte slices of varying lengths, including edge cases of empty slices and maximum lengths up to the capacity of BytesMut.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes1 = BytesMut::new();",
                "    let bytes2 = BytesMut::new();",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 0);",
                "    assert_eq!(bytes2.len(), 0);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Equal);"
              ],
              "code": [
                "{",
                "    let bytes1 = BytesMut::new();",
                "    let bytes2 = BytesMut::new();",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 0);",
                "    assert_eq!(bytes2.len(), 0);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Equal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes1 = BytesMut::new();",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3]);",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 0);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert!(bytes1.is_empty());",
                "    assert_eq!(bytes2.capacity(), 10);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Less);",
                "    assert_eq!(bytes2.cmp(&bytes1), cmp::Ordering::Greater);",
                "    bytes2.extend_from_slice(&[4, 5]);",
                "    assert_eq!(bytes2.len(), 5);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Less);",
                "    assert_eq!(bytes2.cmp(&bytes1), cmp::Ordering::Greater);"
              ],
              "code": [
                "{",
                "    let bytes1 = BytesMut::new();",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3]);",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 0);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert!(bytes1.is_empty());",
                "    assert_eq!(bytes2.capacity(), 10);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Less);",
                "    assert_eq!(bytes2.cmp(&bytes1), cmp::Ordering::Greater);",
                "    bytes2.extend_from_slice(&[4, 5]);",
                "    assert_eq!(bytes2.len(), 5);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Less);",
                "    assert_eq!(bytes2.cmp(&bytes1), cmp::Ordering::Greater);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let bytes2 = BytesMut::new();",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes1.capacity(), 10);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Greater);"
              ],
              "code": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let bytes2 = BytesMut::new();",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes1.capacity(), 10);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Greater);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3]);",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert!(bytes2.is_empty() == false);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Equal);",
                "    assert!(bytes1.capacity() >= 10);",
                "    assert!(bytes2.capacity() >= 10);"
              ],
              "code": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3]);",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert!(bytes2.is_empty() == false);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Equal);",
                "    assert!(bytes1.capacity() >= 10);",
                "    assert!(bytes2.capacity() >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[2, 3, 4]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3]);",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert!(bytes1.capacity() >= 10);",
                "    assert!(bytes2.capacity() >= 10);",
                "    assert_eq!(bytes1.as_slice(), &[2, 3, 4]);",
                "    assert_eq!(bytes2.as_slice(), &[1, 2, 3]);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Greater);"
              ],
              "code": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[2, 3, 4]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3]);",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert!(bytes1.capacity() >= 10);",
                "    assert!(bytes2.capacity() >= 10);",
                "    assert_eq!(bytes1.as_slice(), &[2, 3, 4]);",
                "    assert_eq!(bytes2.as_slice(), &[1, 2, 3]);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Greater);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[2, 3, 4]);",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert_eq!(bytes1.capacity(), 10);",
                "    assert_eq!(bytes2.capacity(), 10);",
                "    assert_eq!(bytes1.as_slice(), &[1, 2, 3]);",
                "    assert_eq!(bytes2.as_slice(), &[2, 3, 4]);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);"
              ],
              "code": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[2, 3, 4]);",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 3);",
                "    assert_eq!(bytes1.capacity(), 10);",
                "    assert_eq!(bytes2.capacity(), 10);",
                "    assert_eq!(bytes1.as_slice(), &[1, 2, 3]);",
                "    assert_eq!(bytes2.as_slice(), &[2, 3, 4]);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3, 4]);",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 4);",
                "    assert_eq!(bytes1.capacity(), 10);",
                "    assert_eq!(bytes2.capacity(), 10);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);",
                "    assert!(bytes2.cmp(&bytes1) == cmp::Ordering::Greater);",
                "    assert!(bytes1.cmp(&bytes1) == cmp::Ordering::Equal);"
              ],
              "code": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(10);",
                "    bytes1.extend_from_slice(&[1, 2, 3]);",
                "    let mut bytes2 = BytesMut::with_capacity(10);",
                "    bytes2.extend_from_slice(&[1, 2, 3, 4]);",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 3);",
                "    assert_eq!(bytes2.len(), 4);",
                "    assert_eq!(bytes1.capacity(), 10);",
                "    assert_eq!(bytes2.capacity(), 10);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);",
                "    assert!(bytes2.cmp(&bytes1) == cmp::Ordering::Greater);",
                "    assert!(bytes1.cmp(&bytes1) == cmp::Ordering::Equal);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(17);",
                "    bytes1.extend_from_slice(&[0; 17]);",
                "    let mut bytes2 = BytesMut::with_capacity(17);",
                "    bytes2.extend_from_slice(&[0; 17]);",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 17);",
                "    assert_eq!(bytes2.len(), 17);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert!(bytes2.is_empty() == false);",
                "    assert!(bytes1.capacity() >= 17);",
                "    assert!(bytes2.capacity() >= 17);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Equal);",
                "    bytes1.truncate(10);",
                "    assert_eq!(bytes1.len(), 10);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);",
                "    bytes2.truncate(5);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Greater);",
                "    bytes1.clear();",
                "    assert_eq!(bytes1.len(), 0);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Less);"
              ],
              "code": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(17);",
                "    bytes1.extend_from_slice(&[0; 17]);",
                "    let mut bytes2 = BytesMut::with_capacity(17);",
                "    bytes2.extend_from_slice(&[0; 17]);",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 17);",
                "    assert_eq!(bytes2.len(), 17);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert!(bytes2.is_empty() == false);",
                "    assert!(bytes1.capacity() >= 17);",
                "    assert!(bytes2.capacity() >= 17);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Equal);",
                "    bytes1.truncate(10);",
                "    assert_eq!(bytes1.len(), 10);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);",
                "    bytes2.truncate(5);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Greater);",
                "    bytes1.clear();",
                "    assert_eq!(bytes1.len(), 0);",
                "    assert_eq!(bytes1.cmp(&bytes2), cmp::Ordering::Less);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(17);",
                "    bytes1.extend_from_slice(&[0; 17]);",
                "    let mut bytes2 = BytesMut::with_capacity(17);",
                "    bytes2.extend_from_slice(&[1; 17]);",
                "    bytes1.cmp(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes1.len(), 17);",
                "    assert_eq!(bytes2.len(), 17);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert!(bytes2.is_empty() == false);",
                "    assert!(bytes1.capacity() >= 17);",
                "    assert!(bytes2.capacity() >= 17);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);"
              ],
              "code": [
                "{",
                "    let mut bytes1 = BytesMut::with_capacity(17);",
                "    bytes1.extend_from_slice(&[0; 17]);",
                "    let mut bytes2 = BytesMut::with_capacity(17);",
                "    bytes2.extend_from_slice(&[1; 17]);",
                "    bytes1.cmp(&bytes2);",
                "    assert_eq!(bytes1.len(), 17);",
                "    assert_eq!(bytes2.len(), 17);",
                "    assert!(bytes1.is_empty() == false);",
                "    assert!(bytes2.is_empty() == false);",
                "    assert!(bytes1.capacity() >= 17);",
                "    assert!(bytes2.capacity() >= 17);",
                "    assert!(bytes1.cmp(&bytes2) == cmp::Ordering::Less);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}