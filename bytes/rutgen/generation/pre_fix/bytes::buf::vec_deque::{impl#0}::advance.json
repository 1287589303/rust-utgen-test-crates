{
  "name": "bytes::buf::vec_deque::{impl#0}::advance",
  "mod_info": {
    "name": "buf::vec_deque",
    "loc": "src/buf/mod.rs:26:1:26:15"
  },
  "visible": true,
  "loc": "src/buf/vec_deque.rs:37:5:39:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "cnt: 0 to usize::MAX inclusive, with special case checks for when cnt exceeds the current length of the VecDeque, including boundary cases at current length and length + 1.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deque.remaining(), 4);",
                "    assert_eq!(deque.chunk(), &[1, 2, 3, 4]);",
                "    ",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(2);",
                "    assert_eq!(deque.remaining(), 2);",
                "    assert_eq!(deque.chunk(), &[3, 4]);",
                "    ",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(4);",
                "    assert_eq!(deque.remaining(), 0);",
                "    assert!(deque.chunk().is_empty());",
                "    ",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(5);",
                "    assert_eq!(deque.remaining(), 0);",
                "    assert!(deque.chunk().is_empty());"
              ],
              "code": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(0);",
                "    assert_eq!(deque.remaining(), 4);",
                "    assert_eq!(deque.chunk(), &[1, 2, 3, 4]);",
                "    ",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(2);",
                "    assert_eq!(deque.remaining(), 2);",
                "    assert_eq!(deque.chunk(), &[3, 4]);",
                "    ",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(4);",
                "    assert_eq!(deque.remaining(), 0);",
                "    assert!(deque.chunk().is_empty());",
                "    ",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(5);",
                "    assert_eq!(deque.remaining(), 0);",
                "    assert!(deque.chunk().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deque.remaining(), 0);",
                "    assert!(deque.is_empty());",
                "    deque.advance(0);",
                "    assert_eq!(deque.remaining(), 0);",
                "    deque.advance(2);",
                "    assert!(deque.is_empty());",
                "    deque.advance(1);",
                "    assert!(deque.is_empty());",
                "    deque.advance(5);",
                "    assert!(deque.is_empty());"
              ],
              "code": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(4);",
                "    assert_eq!(deque.remaining(), 0);",
                "    assert!(deque.is_empty());",
                "    deque.advance(0);",
                "    assert_eq!(deque.remaining(), 0);",
                "    deque.advance(2);",
                "    assert!(deque.is_empty());",
                "    deque.advance(1);",
                "    assert!(deque.is_empty());",
                "    deque.advance(5);",
                "    assert!(deque.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deque.remaining(), 3);",
                "    assert_eq!(deque.chunk(), &[2, 3, 4]);"
              ],
              "code": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(1);",
                "    assert_eq!(deque.remaining(), 3);",
                "    assert_eq!(deque.chunk(), &[2, 3, 4]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deque.len(), 0);",
                "    assert!(deque.is_empty());",
                "    assert_eq!(deque.remaining(), 0);"
              ],
              "code": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(5);",
                "    assert_eq!(deque.len(), 0);",
                "    assert!(deque.is_empty());",
                "    assert_eq!(deque.remaining(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(6);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deque.len(), 0);",
                "    assert!(deque.is_empty());",
                "    assert_eq!(deque.remaining(), 0);"
              ],
              "code": [
                "{",
                "    let mut deque = VecDeque::from(vec![1, 2, 3, 4]);",
                "    deque.advance(6);",
                "    assert_eq!(deque.len(), 0);",
                "    assert!(deque.is_empty());",
                "    assert_eq!(deque.remaining(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deque: VecDeque<u8> = VecDeque::new();",
                "    deque.advance(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(1);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(1);",
                "    deque.push_back(2);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 1);",
                "    assert_eq!(deque.front(), Some(&2));",
                "    deque.advance(2);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut deque: VecDeque<u8> = VecDeque::new();",
                "    deque.advance(0);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(1);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(1);",
                "    deque.push_back(2);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 1);",
                "    assert_eq!(deque.front(), Some(&2));",
                "    deque.advance(2);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut deque: VecDeque<u8> = VecDeque::new();",
                "    deque.advance(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(10);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(20);",
                "    deque.push_back(30);",
                "    deque.advance(1);",
                "    assert_eq!(deque.front(), Some(&30));",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(40);",
                "    deque.push_back(50);",
                "    deque.advance(2);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(60);",
                "    deque.push_back(70);",
                "    deque.advance(0);",
                "    assert_eq!(deque.len(), 2);",
                "    deque.advance(deque.len());",
                "    assert!(deque.is_empty());",
                "    deque.advance(1);"
              ],
              "code": [
                "{",
                "    let mut deque: VecDeque<u8> = VecDeque::new();",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(10);",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(20);",
                "    deque.push_back(30);",
                "    deque.advance(1);",
                "    assert_eq!(deque.front(), Some(&30));",
                "    deque.advance(1);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(40);",
                "    deque.push_back(50);",
                "    deque.advance(2);",
                "    assert_eq!(deque.len(), 0);",
                "    deque.push_back(60);",
                "    deque.push_back(70);",
                "    deque.advance(0);",
                "    assert_eq!(deque.len(), 2);",
                "    deque.advance(deque.len());",
                "    assert!(deque.is_empty());",
                "    deque.advance(1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}