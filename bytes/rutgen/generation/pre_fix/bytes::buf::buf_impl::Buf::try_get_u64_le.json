{
  "name": "bytes::buf::buf_impl::Buf::try_get_u64_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1651:5:1653:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining() = 0 to 7, where SIZE = 8; ensuring available bytes for scenarios returning Err(TryGetError)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
                "    assert_eq!(7, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
                "    assert_eq!(7, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
                "    assert_eq!(7, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
                "    assert_eq!(7, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64_le());",
                "    assert_eq!(4, buf.remaining());",
                "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\", offset: 0 };",
                "    assert_eq!(Ok(0x0807060504030201_u64), buf.try_get_u64_le());",
                "    assert_eq!(0, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64_le());",
                "    assert_eq!(4, buf.remaining());",
                "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\", offset: 0 };",
                "    assert_eq!(Ok(0x0807060504030201_u64), buf.try_get_u64_le());",
                "    assert_eq!(0, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), result);"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), result);"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), result);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));",
                "    ",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
                "    ",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
                "    ",
                "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));",
                "    ",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
                "    ",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
                "    ",
                "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "}"
              ],
              "oracle": [
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
                "    ",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\", offset: 0 };",
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_le());",
                "    assert_eq!(0, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "        offset: usize,",
                "    }",
                "    ",
                "    impl TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.offset",
                "        }",
                "",
                "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let bytes = &self.data[self.offset..self.offset + 8];",
                "            self.offset += 8;",
                "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
                "    let result = buf.try_get_u64_le();",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
                "    ",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\", offset: 0 };",
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_le());",
                "    assert_eq!(0, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "remaining: 8; remaining: 7; requested: 8; available: 7; buffer content: 8 bytes with valid little-endian representation (e.g., b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\") and 7 bytes without sufficient bytes for full read (e.g., b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\")\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.try_get_u64_le();",
                "    let remaining = buf.remaining();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_le());",
                "    assert_eq!(6, buf.remaining());",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
                "    assert_eq!(7, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.try_get_u64_le();",
                "    let remaining = buf.remaining();",
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_le());",
                "    assert_eq!(6, buf.remaining());",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
                "    assert_eq!(7, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    let result = buf.try_get_u64_le();",
                "    let remaining = buf.remaining();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError{requested: 8, available: 7}));",
                "    assert_eq!(remaining, 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
                "    let result = buf.try_get_u64_le();",
                "    let remaining = buf.remaining();",
                "    assert_eq!(result, Ok(0x0102030405060708_u64));",
                "    assert_eq!(remaining, 6);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
                "    let result = buf.try_get_u64_le();",
                "    let remaining = buf.remaining();",
                "    assert_eq!(result, Err(TryGetError{requested: 8, available: 7}));",
                "    assert_eq!(remaining, 7);",
                "    ",
                "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
                "    let result = buf.try_get_u64_le();",
                "    let remaining = buf.remaining();",
                "    assert_eq!(result, Ok(0x0102030405060708_u64));",
                "    assert_eq!(remaining, 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}