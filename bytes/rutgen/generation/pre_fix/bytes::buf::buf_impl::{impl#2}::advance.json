{
  "name": "bytes::buf::buf_impl::{impl#2}::advance",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:2901:5:2910:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.len() < cnt at line 2902 is true\n"
      ],
      "input_infer": "self.len() must be less than cnt, where cnt is greater than 0 and self.len() is an integer value ranging from 0 to any positive integer less than cnt.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &[u8] = &[];",
                "    buffer.advance(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let mut buffer: &mut [u8] = &mut [];",
                "    buffer.advance(1);",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let mut buffer: &[u8] = &[];",
                "    buffer.advance(1);",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let mut buffer: &mut [u8] = &mut [];",
                "    buffer.advance(1);",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &[u8] = &[1];",
                "    buffer.advance(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_advance(&TryGetError { requested: 2, available: 1 }), ());"
              ],
              "code": [
                "{",
                "    let mut buffer: &[u8] = &[1];",
                "    buffer.advance(2);",
                "    assert_eq!(panic_advance(&TryGetError { requested: 2, available: 1 }), ());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &[u8] = &[1, 2];",
                "    buffer.advance(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { buffer.advance(3); }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let mut buffer: &[u8] = &[1, 2];",
                "    buffer.advance(3);",
                "    assert_eq!(std::panic::catch_unwind(|| { buffer.advance(3); }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buffer: &[u8] = &[1, 2, 3];",
                "    buffer.advance(4);",
                "}"
              ],
              "oracle": [
                "    let buffer: &[u8] = &[1, 2, 3];",
                "    let result = std::panic::catch_unwind(|| { buffer.advance(4); });",
                "    assert!(result.is_err());",
                "    if let Some(err) = result.err() {",
                "    assert!(err.downcast_ref::<&str>().unwrap() == \"advance out of bounds: the len is 3 but advancing by 4\");",
                "    }"
              ],
              "code": [
                "{",
                "    let mut buffer: &[u8] = &[1, 2, 3];",
                "    buffer.advance(4);",
                "    let buffer: &[u8] = &[1, 2, 3];",
                "    let result = std::panic::catch_unwind(|| { buffer.advance(4); });",
                "    assert!(result.is_err());",
                "    if let Some(err) = result.err() {",
                "    assert!(err.downcast_ref::<&str>().unwrap() == \"advance out of bounds: the len is 3 but advancing by 4\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.len() < cnt at line 2902 is false, with bound self.len() == cnt\n"
      ],
      "input_infer": "self.len() == cnt (exact match), self.len() > cnt (greater), self.len() = 0 (underflow edge case)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &mut [u8] = &mut [1, 2, 3];",
                "    buf.advance(buf.len());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 3);",
                "    buf.advance(3);",
                "    assert_eq!(buf.len(), 0);",
                "    assert!(std::panic::catch_unwind(|| buf.advance(1)).is_err());",
                "    assert_eq!(buf.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [u8] = &mut [1, 2, 3];",
                "    buf.advance(buf.len());",
                "    assert_eq!(buf.len(), 3);",
                "    buf.advance(3);",
                "    assert_eq!(buf.len(), 0);",
                "    assert!(std::panic::catch_unwind(|| buf.advance(1)).is_err());",
                "    assert_eq!(buf.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &mut [u8] = &mut [1, 2, 3, 4, 5];",
                "    buf.advance(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(buf[0], 4);",
                "    assert_eq!(buf[1], 5);",
                "    assert!(std::panic::catch_unwind(|| buf.advance(3)).is_err());",
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(buf, &[4, 5]);"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [u8] = &mut [1, 2, 3, 4, 5];",
                "    buf.advance(3);",
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(buf[0], 4);",
                "    assert_eq!(buf[1], 5);",
                "    assert!(std::panic::catch_unwind(|| buf.advance(3)).is_err());",
                "    assert_eq!(buf.len(), 2);",
                "    assert_eq!(buf, &[4, 5]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &mut [u8] = &mut [];",
                "    buf.advance(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic_advance.call_count, 0);",
                "    assert_eq!(buf.len(), 0);",
                "    assert_eq!(panic_advance.last_error.requested, 1);",
                "    assert_eq!(panic_advance.last_error.available, 0);"
              ],
              "code": [
                "{",
                "    let mut buf: &mut [u8] = &mut [];",
                "    buf.advance(1);",
                "    assert_eq!(panic_advance.call_count, 0);",
                "    assert_eq!(buf.len(), 0);",
                "    assert_eq!(panic_advance.last_error.requested, 1);",
                "    assert_eq!(panic_advance.last_error.available, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}