{
  "name": "bytes::buf::buf_impl::Buf::get_uint_le",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:897:5:899:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "0 < nbytes <= 8 and nbytes <= remaining bytes in the buffer\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.get_uint_le(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x010203);",
                "    assert!(buf.remaining() == 2);",
                "    assert!(buf.has_remaining() == true);",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(8); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(4); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(1); }).is_ok());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x05\\x04\\x03\\x02\\x01\"[..];",
                "    let result = buf.get_uint_le(3);",
                "    assert_eq!(result, 0x010203);",
                "    assert!(buf.remaining() == 2);",
                "    assert!(buf.has_remaining() == true);",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(8); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(4); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { buf.get_uint_le(1); }).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
                "    let result = buf.get_uint_le(9);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 9, available: 3 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
                "    let result = buf.get_uint_le(9);",
                "    assert_eq!(result, Err(TryGetError { requested: 9, available: 3 }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let result = buf.get_uint_le(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
                "    assert_panics!(buf.get_uint_le(9));",
                "    assert_panics!(buf.get_uint_le(10));",
                "    buf.advance(1);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_panics!(buf.get_uint_le(1));",
                "    buf = &b\"\"[..];",
                "    assert_panics!(buf.get_uint_le(1));",
                "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
                "    assert_eq!(buf.get_uint_le(8), 0x0807060504030201);",
                "    buf.advance(8);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_panics!(buf.get_uint_le(1));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let result = buf.get_uint_le(2);",
                "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
                "    assert_panics!(buf.get_uint_le(9));",
                "    assert_panics!(buf.get_uint_le(10));",
                "    buf.advance(1);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_panics!(buf.get_uint_le(1));",
                "    buf = &b\"\"[..];",
                "    assert_panics!(buf.get_uint_le(1));",
                "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
                "    assert_eq!(buf.get_uint_le(8), 0x0807060504030201);",
                "    buf.advance(8);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert_panics!(buf.get_uint_le(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
                "    let result = buf.get_uint_le(8);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(0x0102030405060708, result);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buf.has_remaining() == false);",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(9)).is_err());",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(3)).is_ok());",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(0)).is_ok());",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(8)).is_ok());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
                "    let result = buf.get_uint_le(8);",
                "    assert_eq!(0x0102030405060708, result);",
                "    assert_eq!(buf.remaining(), 0);",
                "    assert!(buf.has_remaining() == false);",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(9)).is_err());",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(3)).is_ok());",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(0)).is_ok());",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(8)).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let result = buf.get_uint_le(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.get_uint_le(1), 0x01);",
                "    assert_panics!(buf.get_uint_le(2));",
                "    assert_panics!(buf.get_uint_le(9));",
                "    let mut buf: &[u8] = &b\"\\x03\\x02\\x01 hello\"[..];",
                "    assert_eq!(buf.get_uint_le(3), 0x010203);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let result = buf.get_uint_le(1);",
                "    assert_eq!(buf.get_uint_le(1), 0x01);",
                "    assert_panics!(buf.get_uint_le(2));",
                "    assert_panics!(buf.get_uint_le(9));",
                "    let mut buf: &[u8] = &b\"\\x03\\x02\\x01 hello\"[..];",
                "    assert_eq!(buf.get_uint_le(3), 0x010203);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x02\\x01\"[..];",
                "    let result = buf.get_uint_le(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x0102);",
                "    assert!(buf.remaining() == 0);",
                "    assert!(panic_does_not_fit!(buf.get_uint_le(3)));",
                "    assert_eq!(buf.remaining(), 2);",
                "    assert!(panic_does_not_fit!(buf.get_uint_le(0)));",
                "    assert!(panic_does_not_fit!(buf.get_uint_le(9)));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x02\\x01\"[..];",
                "    let result = buf.get_uint_le(2);",
                "    assert_eq!(result, 0x0102);",
                "    assert!(buf.remaining() == 0);",
                "    assert!(panic_does_not_fit!(buf.get_uint_le(3)));",
                "    assert_eq!(buf.remaining(), 2);",
                "    assert!(panic_does_not_fit!(buf.get_uint_le(0)));",
                "    assert!(panic_does_not_fit!(buf.get_uint_le(9)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let result = buf.get_uint_le(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 2);",
                "    assert!(buf.has_remaining());",
                "    assert_eq!(buf.get_uint_le(0), 0);   // Test with nbytes = 0 (should not panic)",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(9)).is_err()); // Test with nbytes > 8 (should panic)",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(3)).is_err()); // Test with insufficient remaining data (should panic)"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let result = buf.get_uint_le(0);",
                "    assert_eq!(buf.remaining(), 2);",
                "    assert!(buf.has_remaining());",
                "    assert_eq!(buf.get_uint_le(0), 0);   // Test with nbytes = 0 (should not panic)",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(9)).is_err()); // Test with nbytes > 8 (should panic)",
                "    assert!(std::panic::catch_unwind(|| buf.get_uint_le(3)).is_err()); // Test with insufficient remaining data (should panic)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}