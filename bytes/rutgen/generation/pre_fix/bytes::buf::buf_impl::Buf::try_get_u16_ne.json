{
  "name": "bytes::buf::buf_impl::Buf::try_get_u16_ne",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1334:5:1336:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining() == 0, remaining() == 1, remaining() == 2\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BufStruct {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buf for BufStruct {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_ne_bytes([self.data[self.position], self.data[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = BufStruct {",
                "        data: vec![],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 2, available: 0 }), buf.try_get_u16_ne());"
              ],
              "code": [
                "{",
                "    struct BufStruct {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buf for BufStruct {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_ne_bytes([self.data[self.position], self.data[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = BufStruct {",
                "        data: vec![],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 0 }), buf.try_get_u16_ne());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BufStruct {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buf for BufStruct {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_ne_bytes([self.data[self.position], self.data[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = BufStruct {",
                "        data: vec![0x08],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_u16_ne());"
              ],
              "code": [
                "{",
                "    struct BufStruct {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buf for BufStruct {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_ne_bytes([self.data[self.position], self.data[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = BufStruct {",
                "        data: vec![0x08],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_u16_ne());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BufStruct {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buf for BufStruct {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_ne_bytes([self.data[self.position], self.data[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = BufStruct {",
                "        data: vec![0x08, 0x09],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 2, available: 0 }), BufStruct { data: vec![], position: 0 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), BufStruct { data: vec![0x08], position: 0 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), BufStruct { data: vec![0x08, 0x01], position: 1 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 2 }), BufStruct { data: vec![0x08, 0x09], position: 0 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 2 }), BufStruct { data: vec![0x08, 0x09], position: 1 }.try_get_u16_ne());",
                "    assert_eq!(Ok(0x0809), BufStruct { data: vec![0x08, 0x09], position: 0 }.try_get_u16_ne());"
              ],
              "code": [
                "{",
                "    struct BufStruct {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "",
                "    impl Buf for BufStruct {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let value = u16::from_ne_bytes([self.data[self.position], self.data[self.position + 1]]);",
                "            self.position += 2;",
                "            Ok(value)",
                "        }",
                "    }",
                "",
                "    let mut buf = BufStruct {",
                "        data: vec![0x08, 0x09],",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 0 }), BufStruct { data: vec![], position: 0 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), BufStruct { data: vec![0x08], position: 0 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), BufStruct { data: vec![0x08, 0x01], position: 1 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 2 }), BufStruct { data: vec![0x08, 0x09], position: 0 }.try_get_u16_ne());",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 2 }), BufStruct { data: vec![0x08, 0x09], position: 1 }.try_get_u16_ne());",
                "    assert_eq!(Ok(0x0809), BufStruct { data: vec![0x08, 0x09], position: 0 }.try_get_u16_ne());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "remaining() == 2 or remaining() > 2; valid buffer length of at least 2 bytes for success; buffer containing valid native endian u16 data; 0 bytes (buffer exhausted) or 1 byte for error cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "    ",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "        ",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "        fn get_u16(&mut self) -> u16 {",
                "            self.position += 2;",
                "            u16::from_ne_bytes([self.data[self.position - 2], self.data[self.position - 1]])",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = self.get_u16();",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: vec![0x09, 0x08], // valid native endian u16 data",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0908_u16), buf.try_get_u16_ne());",
                "    assert_eq!(0, buf.remaining());",
                "    ",
                "    let mut buf = TestBuf {",
                "    data: vec![0x08], // insufficient data",
                "    position: 0,",
                "    };",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_u16_ne());",
                "    assert_eq!(1, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "    ",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "        ",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "        fn get_u16(&mut self) -> u16 {",
                "            self.position += 2;",
                "            u16::from_ne_bytes([self.data[self.position - 2], self.data[self.position - 1]])",
                "        }",
                "",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = self.get_u16();",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: vec![0x09, 0x08], // valid native endian u16 data",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "    assert_eq!(Ok(0x0908_u16), buf.try_get_u16_ne());",
                "    assert_eq!(0, buf.remaining());",
                "    ",
                "    let mut buf = TestBuf {",
                "    data: vec![0x08], // insufficient data",
                "    position: 0,",
                "    };",
                "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_u16_ne());",
                "    assert_eq!(1, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "    ",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = self.get_u16(); // This implementation isn't shown but assumes similar to success case",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: vec![0x08], // only 1 byte, insufficient for reading u16",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0809_u16), buf.try_get_u16_ne());",
                "    assert_eq!(6, buf.remaining());",
                "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_u16_ne());",
                "    assert_eq!(1, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: Vec<u8>,",
                "        position: usize,",
                "    }",
                "    ",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len() - self.position",
                "        }",
                "        ",
                "        fn chunk(&self) -> &[u8] {",
                "            &self.data[self.position..]",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.position += cnt;",
                "        }",
                "        ",
                "        fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {",
                "            if self.remaining() < 2 {",
                "                return Err(TryGetError {",
                "                    requested: 2,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = self.get_u16(); // This implementation isn't shown but assumes similar to success case",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf {",
                "        data: vec![0x08], // only 1 byte, insufficient for reading u16",
                "        position: 0,",
                "    };",
                "    let result = buf.try_get_u16_ne();",
                "    assert_eq!(Ok(0x0809_u16), buf.try_get_u16_ne());",
                "    assert_eq!(6, buf.remaining());",
                "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_u16_ne());",
                "    assert_eq!(1, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}