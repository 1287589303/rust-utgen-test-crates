{
  "name": "bytes::bytes_mut::{impl#3}::chunk_mut",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1191:5:1196:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.capacity() == self.len() at line 1192 is true\n",
        "expected return value/type: self.spare_capacity_mut().into()\n"
      ],
      "input_infer": "self.capacity() == self.len() and self.cap >= 64\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    let _ = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    assert!(bytes_mut.capacity() >= 64);",
                "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
                "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
                "    assert_eq!(bytes_mut.chunk_mut().0.len(), bytes_mut.capacity() - bytes_mut.len());",
                "    assert_eq!(bytes_mut.chunk_mut().0.as_ptr(), bytes_mut.spare_capacity_mut().as_ptr());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    let _ = bytes_mut.chunk_mut();",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    assert!(bytes_mut.capacity() >= 64);",
                "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
                "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
                "    assert_eq!(bytes_mut.chunk_mut().0.len(), bytes_mut.capacity() - bytes_mut.len());",
                "    assert_eq!(bytes_mut.chunk_mut().0.as_ptr(), bytes_mut.spare_capacity_mut().as_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(128);",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    let _ = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    assert_eq!(bytes_mut.spare_capacity_mut().len(), 64);",
                "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
                "    assert!(bytes_mut.chunk_mut().0.len() >= 64);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(128);",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    let _ = bytes_mut.chunk_mut();",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    assert_eq!(bytes_mut.spare_capacity_mut().len(), 64);",
                "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
                "    assert!(bytes_mut.chunk_mut().0.len() >= 64);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    bytes_mut.reserve(64);",
                "    let _ = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    bytes_mut.reserve(64);",
                "    let result = bytes_mut.chunk_mut();",
                "    assert!(result.len() > 0);",
                "    assert_eq!(result.as_slice().len(), bytes_mut.capacity() - bytes_mut.len());",
                "    assert_eq!(bytes_mut.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::new();",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    bytes_mut.reserve(64);",
                "    let _ = bytes_mut.chunk_mut();",
                "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
                "    bytes_mut.reserve(64);",
                "    let result = bytes_mut.chunk_mut();",
                "    assert!(result.len() > 0);",
                "    assert_eq!(result.as_slice().len(), bytes_mut.capacity() - bytes_mut.len());",
                "    assert_eq!(bytes_mut.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    let _ = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    bytes_mut.resize(64, 0);",
                "    let result = bytes_mut.chunk_mut();",
                "    assert_eq!(result.0.len(), 64);",
                "    assert!(bytes_mut.capacity() > bytes_mut.len());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    let _ = bytes_mut.chunk_mut();",
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    bytes_mut.resize(64, 0);",
                "    let result = bytes_mut.chunk_mut();",
                "    assert_eq!(result.0.len(), 64);",
                "    assert!(bytes_mut.capacity() > bytes_mut.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.capacity() == self.len() at line 1192 is false\n",
        "expected return value/type: self.spare_capacity_mut().into()\n"
      ],
      "input_infer": "self.capacity() > self.len() and self.spare_capacity_mut().length > 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(128);",
                "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(128);",
                "    unsafe { bytes_mut.set_len(64); }",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert_eq!(bytes_mut.capacity(), 128);",
                "    assert_eq!(bytes_mut.len(), 64);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert!(!bytes_mut.spare_capacity_mut().is_empty());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(128);",
                "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    let mut bytes_mut = BytesMut::with_capacity(128);",
                "    unsafe { bytes_mut.set_len(64); }",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert_eq!(bytes_mut.capacity(), 128);",
                "    assert_eq!(bytes_mut.len(), 64);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert!(!bytes_mut.spare_capacity_mut().is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    unsafe { bytes_mut.set_len(32); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    unsafe { bytes_mut.set_len(32); }",
                "    assert_eq!(bytes_mut.capacity(), 64);",
                "    assert_eq!(bytes_mut.len(), 32);",
                "    let slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert!(slice.0.len() > 0);",
                "    assert!(bytes_mut.capacity() > bytes_mut.len());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    unsafe { bytes_mut.set_len(32); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    let mut bytes_mut = BytesMut::with_capacity(64);",
                "    unsafe { bytes_mut.set_len(32); }",
                "    assert_eq!(bytes_mut.capacity(), 64);",
                "    assert_eq!(bytes_mut.len(), 32);",
                "    let slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert!(slice.0.len() > 0);",
                "    assert!(bytes_mut.capacity() > bytes_mut.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(256);",
                "    unsafe { bytes_mut.set_len(128); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(bytes_mut.capacity() > bytes_mut.len());",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert!(!bytes_mut.spare_capacity_mut().is_empty());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(256);",
                "    unsafe { bytes_mut.set_len(128); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert!(bytes_mut.capacity() > bytes_mut.len());",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert!(!bytes_mut.spare_capacity_mut().is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(65);",
                "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.capacity(), 65);",
                "    assert_eq!(bytes_mut.len(), 64);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert!(bytes_mut.spare_capacity_mut().len() > 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(65);",
                "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
                "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
                "    assert_eq!(bytes_mut.capacity(), 65);",
                "    assert_eq!(bytes_mut.len(), 64);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}