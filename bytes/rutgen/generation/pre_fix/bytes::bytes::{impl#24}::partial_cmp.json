{
  "name": "bytes::bytes::{impl#24}::partial_cmp",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:848:5:850:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: non-empty &[u8], other: non-empty &[u8] of same length, self: empty &[u8], other: empty &[u8], self: non-empty &[u8], other: empty &[u8], self: empty &[u8], other: non-empty &[u8], self: &[u8] with varying lengths and data, other: &[u8] with varying lengths and data\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Equal));",
                "    bytes_a.len = 4;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Greater));",
                "    bytes_b.len = 4;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);",
                "    bytes_a.len = 0;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Less));",
                "    bytes_b.len = 0;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Equal));"
              ],
              "code": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Equal));",
                "    bytes_a.len = 4;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Greater));",
                "    bytes_b.len = 4;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);",
                "    bytes_a.len = 0;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Less));",
                "    bytes_b.len = 0;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Equal));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_a.len, bytes_b.len);",
                "    assert!(bytes_a.ptr.is_null());",
                "    assert!(bytes_b.ptr.is_null());",
                "    let result = bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    bytes_a.len = 0;",
                "    let result_non_equal = bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(result_non_equal, Some(cmp::Ordering::Less));"
              ],
              "code": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(bytes_a.len, bytes_b.len);",
                "    assert!(bytes_a.ptr.is_null());",
                "    assert!(bytes_b.ptr.is_null());",
                "    let result = bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(result, Some(cmp::Ordering::Equal));",
                "    bytes_a.len = 0;",
                "    let result_non_equal = bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(result_non_equal, Some(cmp::Ordering::Less));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 5,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b).is_none(), true);",
                "    let bytes_a = Bytes { ptr: ptr::null(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    let bytes_b = Bytes { ptr: ptr::null(), len: 3, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    assert_eq!(bytes_a.len, 5);",
                "    assert_eq!(bytes_b.len, 3);",
                "    let result = bytes_a.partial_cmp(&bytes_b);",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap() == cmp::Ordering::Greater);",
                "    let bytes_c = Bytes { ptr: ptr::null(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    let bytes_d = Bytes { ptr: ptr::null(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    assert_eq!(bytes_c.partial_cmp(&bytes_d).unwrap(), cmp::Ordering::Equal);",
                "    let bytes_e = Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    let bytes_f = Bytes { ptr: ptr::null(), len: 1, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    assert_eq!(bytes_e.partial_cmp(&bytes_f).unwrap(), cmp::Ordering::Less);"
              ],
              "code": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 5,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b).is_none(), true);",
                "    let bytes_a = Bytes { ptr: ptr::null(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    let bytes_b = Bytes { ptr: ptr::null(), len: 3, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    assert_eq!(bytes_a.len, 5);",
                "    assert_eq!(bytes_b.len, 3);",
                "    let result = bytes_a.partial_cmp(&bytes_b);",
                "    assert!(result.is_some());",
                "    assert!(result.unwrap() == cmp::Ordering::Greater);",
                "    let bytes_c = Bytes { ptr: ptr::null(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    let bytes_d = Bytes { ptr: ptr::null(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    assert_eq!(bytes_c.partial_cmp(&bytes_d).unwrap(), cmp::Ordering::Equal);",
                "    let bytes_e = Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    let bytes_f = Bytes { ptr: ptr::null(), len: 1, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE, };",
                "    assert_eq!(bytes_e.partial_cmp(&bytes_f).unwrap(), cmp::Ordering::Less);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);",
                "    bytes_a.len = 5;",
                "    bytes_b.len = 3;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Greater));",
                "    bytes_a.len = 3;",
                "    bytes_b.len = 5;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Less));",
                "    bytes_a.len = 4;",
                "    bytes_b.len = 4;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Equal));",
                "    bytes_a.ptr = ptr::null();",
                "    bytes_b.ptr = ptr::null();",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);"
              ],
              "code": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);",
                "    bytes_a.len = 5;",
                "    bytes_b.len = 3;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Greater));",
                "    bytes_a.len = 3;",
                "    bytes_b.len = 5;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Less));",
                "    bytes_a.len = 4;",
                "    bytes_b.len = 4;",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Equal));",
                "    bytes_a.ptr = ptr::null();",
                "    bytes_b.ptr = ptr::null();",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);",
                "    assert!(bytes_a.partial_cmp(&bytes_b).is_none());",
                "    bytes_a.len = 0;",
                "    bytes_b.len = 3;",
                "    bytes_a.ptr = ptr::null();",
                "    bytes_b.ptr = ptr::null();"
              ],
              "code": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), None);",
                "    assert!(bytes_a.partial_cmp(&bytes_b).is_none());",
                "    bytes_a.len = 0;",
                "    bytes_b.len = 3;",
                "    bytes_a.ptr = ptr::null();",
                "    bytes_b.ptr = ptr::null();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "}"
              ],
              "oracle": [
                "    let bytes_a = Bytes { ptr: ptr::null(), len: 3, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let bytes_b = Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Greater));"
              ],
              "code": [
                "{",
                "    let bytes_a = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 3,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    let bytes_b = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    bytes_a.partial_cmp(&bytes_b);",
                "    let bytes_a = Bytes { ptr: ptr::null(), len: 3, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    let bytes_b = Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(bytes_a.partial_cmp(&bytes_b), Some(cmp::Ordering::Greater));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}