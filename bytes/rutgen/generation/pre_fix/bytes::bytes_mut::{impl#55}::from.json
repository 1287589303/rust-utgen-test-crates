{
  "name": "bytes::bytes_mut::{impl#55}::from",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1712:5:1743:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: kind == KIND_VEC at line 1716 is true\n",
        "expected return value/type: vec\n"
      ],
      "input_infer": "kind = KIND_VEC, ptr points to valid allocated memory, len in range [0, MAX_VEC_POS], cap in range [len, MAX_ORIGINAL_CAPACITY_WIDTH]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe {",
                "        bytes_mut.set_len(0);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "}"
              ],
              "oracle": [
                "    bytes_mut.capacity() == 10",
                "    bytes_mut.len() == 0",
                "    Vec::from(bytes_mut).len() == 0",
                "    Vec::from(bytes_mut) is of type Vec<u8>",
                "    Vec::from(bytes_mut).capacity() >= 10"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(10);",
                "    unsafe {",
                "        bytes_mut.set_len(0);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "    bytes_mut.capacity() == 10",
                "    bytes_mut.len() == 0",
                "    Vec::from(bytes_mut).len() == 0",
                "    Vec::from(bytes_mut) is of type Vec<u8>",
                "    Vec::from(bytes_mut).capacity() >= 10",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(MAX_VEC_POS);",
                "    unsafe {",
                "        bytes_mut.set_len(MAX_VEC_POS);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.capacity(), MAX_VEC_POS);",
                "    assert_eq!(bytes_mut.len(), MAX_VEC_POS);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert_eq!(Vec::from(bytes_mut).len(), MAX_VEC_POS);",
                "    assert_eq!(Vec::from(bytes_mut).capacity(), MAX_VEC_POS);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(MAX_VEC_POS);",
                "    unsafe {",
                "        bytes_mut.set_len(MAX_VEC_POS);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "    assert_eq!(bytes_mut.capacity(), MAX_VEC_POS);",
                "    assert_eq!(bytes_mut.len(), MAX_VEC_POS);",
                "    assert!(!bytes_mut.is_empty());",
                "    assert_eq!(Vec::from(bytes_mut).len(), MAX_VEC_POS);",
                "    assert_eq!(Vec::from(bytes_mut).capacity(), MAX_VEC_POS);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(20);",
                "    let data: &[u8] = &[1, 2, 3, 4, 5];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe {",
                "        bytes_mut.set_len(data.len());",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let bytes_mut = BytesMut::with_capacity(20);",
                "    let data: &[u8] = &[1, 2, 3, 4, 5];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe { bytes_mut.set_len(data.len()); }",
                "    let result = Vec::from(bytes_mut);",
                "    assert_eq!(result.len(), data.len());",
                "    assert_eq!(result, data.to_vec());"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(20);",
                "    let data: &[u8] = &[1, 2, 3, 4, 5];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe {",
                "        bytes_mut.set_len(data.len());",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "    let bytes_mut = BytesMut::with_capacity(20);",
                "    let data: &[u8] = &[1, 2, 3, 4, 5];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe { bytes_mut.set_len(data.len()); }",
                "    let result = Vec::from(bytes_mut);",
                "    assert_eq!(result.len(), data.len());",
                "    assert_eq!(result, data.to_vec());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(MAX_ORIGINAL_CAPACITY_WIDTH);",
                "    let data = vec![0u8; MAX_ORIGINAL_CAPACITY_WIDTH];",
                "    bytes_mut.extend_from_slice(&data);",
                "    unsafe {",
                "        bytes_mut.set_len(MAX_ORIGINAL_CAPACITY_WIDTH);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len(), MAX_ORIGINAL_CAPACITY_WIDTH);",
                "    assert!(bytes_mut.capacity() >= MAX_ORIGINAL_CAPACITY_WIDTH);",
                "    assert!(bytes_mut.as_slice() == &data[..]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(bytes_mut.spare_capacity_mut().len() == 0);"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(MAX_ORIGINAL_CAPACITY_WIDTH);",
                "    let data = vec![0u8; MAX_ORIGINAL_CAPACITY_WIDTH];",
                "    bytes_mut.extend_from_slice(&data);",
                "    unsafe {",
                "        bytes_mut.set_len(MAX_ORIGINAL_CAPACITY_WIDTH);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "    assert_eq!(bytes_mut.len(), MAX_ORIGINAL_CAPACITY_WIDTH);",
                "    assert!(bytes_mut.capacity() >= MAX_ORIGINAL_CAPACITY_WIDTH);",
                "    assert!(bytes_mut.as_slice() == &data[..]);",
                "    assert!(bytes_mut.is_empty() == false);",
                "    assert!(bytes_mut.spare_capacity_mut().len() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(1);",
                "    let data: &[u8] = &[42];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe {",
                "        bytes_mut.set_len(1);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let mut bytes_mut = BytesMut::with_capacity(1);",
                "    let data: &[u8] = &[42];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe {",
                "    bytes_mut.set_len(1);",
                "    let vec = Vec::from(bytes_mut);",
                "    assert_eq!(vec.len(), 1);",
                "    assert_eq!(vec[0], 42);",
                "    }"
              ],
              "code": [
                "{",
                "    let mut bytes_mut = BytesMut::with_capacity(1);",
                "    let data: &[u8] = &[42];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe {",
                "        bytes_mut.set_len(1);",
                "        let _ = Vec::from(bytes_mut);",
                "    }",
                "    let mut bytes_mut = BytesMut::with_capacity(1);",
                "    let data: &[u8] = &[42];",
                "    bytes_mut.extend_from_slice(data);",
                "    unsafe {",
                "    bytes_mut.set_len(1);",
                "    let vec = Vec::from(bytes_mut);",
                "    assert_eq!(vec.len(), 1);",
                "    assert_eq!(vec[0], 42);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: kind == KIND_VEC at line 1716 is false\n",
        "precondition: unsafe { (*shared).is_unique() } at line 1724 is true\n",
        "expected return value/type: vec\n"
      ],
      "input_infer": "BytesMut instance where kind != KIND_VEC and the associated Shared structure has a unique reference count (ref_count == 1).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![1, 2, 3, 4],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 4;",
                "        bytes.cap = 4;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared { vec: vec![1, 2, 3, 4], original_capacity_repr: 0, ref_count: AtomicUsize::new(1), }));",
                "    unsafe { bytes.data = shared as *mut Shared as *mut _; bytes.ptr = NonNull::new_unchecked(bytes.data); bytes.len = 4; bytes.cap = 4; }",
                "    let kind = bytes.kind();",
                "    assert_ne!(kind, KIND_VEC);",
                "    assert!(unsafe { (*shared).is_unique() });",
                "    let vec: Vec<u8> = Vec::from(bytes);",
                "    assert_eq!(vec, vec![1, 2, 3, 4]);",
                "    unsafe { release_shared(shared); }"
              ],
              "code": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![1, 2, 3, 4],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 4;",
                "        bytes.cap = 4;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared { vec: vec![1, 2, 3, 4], original_capacity_repr: 0, ref_count: AtomicUsize::new(1), }));",
                "    unsafe { bytes.data = shared as *mut Shared as *mut _; bytes.ptr = NonNull::new_unchecked(bytes.data); bytes.len = 4; bytes.cap = 4; }",
                "    let kind = bytes.kind();",
                "    assert_ne!(kind, KIND_VEC);",
                "    assert!(unsafe { (*shared).is_unique() });",
                "    let vec: Vec<u8> = Vec::from(bytes);",
                "    assert_eq!(vec, vec![1, 2, 3, 4]);",
                "    unsafe { release_shared(shared); }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![10; 1024],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 1024;",
                "        bytes.cap = 1024;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.kind(), KIND_ARC);",
                "    assert!(unsafe { (*shared).is_unique() });",
                "    assert_eq!(vec.len(), 1024);",
                "    assert_eq!(vec.as_slice(), &[10; 1024]);"
              ],
              "code": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![10; 1024],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "    ",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 1024;",
                "        bytes.cap = 1024;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "    assert_eq!(bytes.kind(), KIND_ARC);",
                "    assert!(unsafe { (*shared).is_unique() });",
                "    assert_eq!(vec.len(), 1024);",
                "    assert_eq!(vec.as_slice(), &[10; 1024]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 0;",
                "        bytes.cap = 0;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.kind(), KIND_VEC);",
                "    assert!(unsafe { (*shared).is_unique() });",
                "    let vec: Vec<u8> = Vec::from(bytes);",
                "    assert_eq!(vec.len(), 0);",
                "    assert_eq!(vec.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 0;",
                "        bytes.cap = 0;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "    assert_eq!(bytes.kind(), KIND_VEC);",
                "    assert!(unsafe { (*shared).is_unique() });",
                "    let vec: Vec<u8> = Vec::from(bytes);",
                "    assert_eq!(vec.len(), 0);",
                "    assert_eq!(vec.capacity(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![5, 6, 7],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 3;",
                "        bytes.cap = 3;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.kind(), KIND_VEC);",
                "    assert_eq!(unsafe { (*shared).is_unique() }, true);",
                "    assert_eq!(vec, vec![5, 6, 7]);",
                "    assert_eq!(bytes.len, 0);",
                "    assert_eq!(bytes.cap, 3);",
                "    assert_eq!(unsafe { (*shared).vec.is_empty() }, true);",
                "    assert_eq!(unsafe { (*shared).ref_count.load(Ordering::Acquire) }, 0);"
              ],
              "code": [
                "{",
                "    let mut bytes = BytesMut::new();",
                "    let shared = Box::into_raw(Box::new(Shared {",
                "        vec: vec![5, 6, 7],",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(1),",
                "    }));",
                "",
                "    unsafe {",
                "        bytes.data = shared as *mut Shared as *mut _;",
                "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
                "        bytes.len = 3;",
                "        bytes.cap = 3;",
                "",
                "        let vec: Vec<u8> = Vec::from(bytes);",
                "    }",
                "    assert_eq!(bytes.kind(), KIND_VEC);",
                "    assert_eq!(unsafe { (*shared).is_unique() }, true);",
                "    assert_eq!(vec, vec![5, 6, 7]);",
                "    assert_eq!(bytes.len, 0);",
                "    assert_eq!(bytes.cap, 3);",
                "    assert_eq!(unsafe { (*shared).vec.is_empty() }, true);",
                "    assert_eq!(unsafe { (*shared).ref_count.load(Ordering::Acquire) }, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: kind == KIND_VEC at line 1716 is false\n",
        "precondition: unsafe { (*shared).is_unique() } at line 1724 is false\n"
      ],
      "input_infer": "Test input conditions or ranges: Provide a BytesMut instance that is created with shared data (not uniquely owned), having a length greater than 0 and a non-zero capacity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let shared_bytesmut = {",
                "        let mut bytes = BytesMut::with_capacity(16);",
                "        bytes.put_bytes(1, 4); // length > 0",
                "        bytes.put_bytes(2, 4); // length > 0",
                "        bytes.put_bytes(3, 4); // length > 0",
                "        bytes",
                "    };",
                "",
                "    // Simulate shared ownership",
                "    let _shared = Box::new(Shared {",
                "        vec: Vec::new(),",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(2), // not unique",
                "    });",
                "",
                "    // Direct access to the `data` field simulating shared state",
                "    let shared_bytesmut_pointer: *mut Shared = Box::into_raw(_shared);",
                "    let mut shared_data = ManuallyDrop::new(shared_bytesmut);",
                "    unsafe {",
                "        shared_data.data = shared_bytesmut_pointer as *mut _;",
                "    }",
                "    ",
                "    let _ = Vec::from(shared_data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(shared_data.kind(), KIND_VEC);",
                "    assert!(!unsafe { (*shared_bytesmut_pointer).is_unique() });",
                "    let vec_from_shared: Vec<u8> = Vec::from(shared_data);",
                "    assert_eq!(vec_from_shared.len(), 12);",
                "    assert_eq!(vec_from_shared[0], 1);",
                "    assert_eq!(vec_from_shared[1], 1);",
                "    assert_eq!(vec_from_shared[2], 1);",
                "    assert_eq!(vec_from_shared[3], 1);",
                "    assert_eq!(vec_from_shared[4], 2);",
                "    assert_eq!(vec_from_shared[5], 2);",
                "    assert_eq!(vec_from_shared[6], 2);",
                "    assert_eq!(vec_from_shared[7], 2);",
                "    assert_eq!(vec_from_shared[8], 3);",
                "    assert_eq!(vec_from_shared[9], 3);",
                "    assert_eq!(vec_from_shared[10], 3);",
                "    assert_eq!(vec_from_shared[11], 3);"
              ],
              "code": [
                "{",
                "    let shared_bytesmut = {",
                "        let mut bytes = BytesMut::with_capacity(16);",
                "        bytes.put_bytes(1, 4); // length > 0",
                "        bytes.put_bytes(2, 4); // length > 0",
                "        bytes.put_bytes(3, 4); // length > 0",
                "        bytes",
                "    };",
                "",
                "    // Simulate shared ownership",
                "    let _shared = Box::new(Shared {",
                "        vec: Vec::new(),",
                "        original_capacity_repr: 0,",
                "        ref_count: AtomicUsize::new(2), // not unique",
                "    });",
                "",
                "    // Direct access to the `data` field simulating shared state",
                "    let shared_bytesmut_pointer: *mut Shared = Box::into_raw(_shared);",
                "    let mut shared_data = ManuallyDrop::new(shared_bytesmut);",
                "    unsafe {",
                "        shared_data.data = shared_bytesmut_pointer as *mut _;",
                "    }",
                "    ",
                "    let _ = Vec::from(shared_data);",
                "    assert_eq!(shared_data.kind(), KIND_VEC);",
                "    assert!(!unsafe { (*shared_bytesmut_pointer).is_unique() });",
                "    let vec_from_shared: Vec<u8> = Vec::from(shared_data);",
                "    assert_eq!(vec_from_shared.len(), 12);",
                "    assert_eq!(vec_from_shared[0], 1);",
                "    assert_eq!(vec_from_shared[1], 1);",
                "    assert_eq!(vec_from_shared[2], 1);",
                "    assert_eq!(vec_from_shared[3], 1);",
                "    assert_eq!(vec_from_shared[4], 2);",
                "    assert_eq!(vec_from_shared[5], 2);",
                "    assert_eq!(vec_from_shared[6], 2);",
                "    assert_eq!(vec_from_shared[7], 2);",
                "    assert_eq!(vec_from_shared[8], 3);",
                "    assert_eq!(vec_from_shared[9], 3);",
                "    assert_eq!(vec_from_shared[10], 3);",
                "    assert_eq!(vec_from_shared[11], 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}