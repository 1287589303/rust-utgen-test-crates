{
  "name": "bytes::bytes::{impl#0}::copy_from_slice",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:347:5:349:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: provide non-empty byte slices of varying lengths and ensure edge cases with empty slices and maximum length boundary cases for the data input, which can go up to the maximum allowed `usize` value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: &[u8] = &[];",
                "    let bytes = Bytes::copy_from_slice(data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.len(), 0);",
                "    assert!(bytes.is_empty());",
                "    assert_eq!(bytes.as_slice(), &[]);",
                "    assert_eq!(bytes.data.load(Ordering::Relaxed), ptr::null_mut());",
                "    assert_eq!(bytes.ptr, NonNull::dangling().as_ptr());"
              ],
              "code": [
                "{",
                "    let data: &[u8] = &[];",
                "    let bytes = Bytes::copy_from_slice(data);",
                "    assert_eq!(bytes.len(), 0);",
                "    assert!(bytes.is_empty());",
                "    assert_eq!(bytes.as_slice(), &[]);",
                "    assert_eq!(bytes.data.load(Ordering::Relaxed), ptr::null_mut());",
                "    assert_eq!(bytes.ptr, NonNull::dangling().as_ptr());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: &[u8] = &[1];",
                "    let bytes = Bytes::copy_from_slice(data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.len(), 1);",
                "    assert_eq!(bytes.as_slice(), &[1]);",
                "    assert!(!bytes.is_empty());",
                "    assert!(bytes.is_unique());"
              ],
              "code": [
                "{",
                "    let data: &[u8] = &[1];",
                "    let bytes = Bytes::copy_from_slice(data);",
                "    assert_eq!(bytes.len(), 1);",
                "    assert_eq!(bytes.as_slice(), &[1]);",
                "    assert!(!bytes.is_empty());",
                "    assert!(bytes.is_unique());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes = Bytes::copy_from_slice(data);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes.len(), 5);",
                "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5]);",
                "    assert!(!bytes.is_empty());",
                "    assert!(bytes.is_unique());"
              ],
              "code": [
                "{",
                "    let data: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes = Bytes::copy_from_slice(data);",
                "    assert_eq!(bytes.len(), 5);",
                "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5]);",
                "    assert!(!bytes.is_empty());",
                "    assert!(bytes.is_unique());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data = vec![0u8; usize::MAX]; // Assuming `usize::MAX` is allowed in a real context",
                "    let bytes = Bytes::copy_from_slice(&data);",
                "}"
              ],
              "oracle": [
                "    Bytes::copy_from_slice(&[]) // Test with empty slice",
                "    Bytes::copy_from_slice(&[0u8, 1u8, 2u8]) // Test with small slice",
                "    let bytes = Bytes::copy_from_slice(&data); assert_eq!(bytes.len(), data.len()) // Validate length matches input data",
                "    let bytes = Bytes::copy_from_slice(&data); assert!(bytes.is_empty() == false) // Validate not empty with non-empty input",
                "    let bytes = Bytes::copy_from_slice(&data); assert!(bytes.as_slice() == data.as_slice()) // Validate copied content matches input",
                "    let bytes = Bytes::copy_from_slice(&[5u8; 10]); assert_eq!(bytes.len(), 10); assert_eq!(bytes.as_slice(), &[5u8; 10]); // Validate consistent results with same element",
                "    let bytes = Bytes::copy_from_slice(&vec![u8::MAX; 50]); assert_eq!(bytes.len(), 50); assert_eq!(bytes.as_slice(), &[u8::MAX; 50]); // Validate boundary values with max u8"
              ],
              "code": [
                "{",
                "    let data = vec![0u8; usize::MAX]; // Assuming `usize::MAX` is allowed in a real context",
                "    let bytes = Bytes::copy_from_slice(&data);",
                "    Bytes::copy_from_slice(&[]) // Test with empty slice",
                "    Bytes::copy_from_slice(&[0u8, 1u8, 2u8]) // Test with small slice",
                "    let bytes = Bytes::copy_from_slice(&data); assert_eq!(bytes.len(), data.len()) // Validate length matches input data",
                "    let bytes = Bytes::copy_from_slice(&data); assert!(bytes.is_empty() == false) // Validate not empty with non-empty input",
                "    let bytes = Bytes::copy_from_slice(&data); assert!(bytes.as_slice() == data.as_slice()) // Validate copied content matches input",
                "    let bytes = Bytes::copy_from_slice(&[5u8; 10]); assert_eq!(bytes.len(), 10); assert_eq!(bytes.as_slice(), &[5u8; 10]); // Validate consistent results with same element",
                "    let bytes = Bytes::copy_from_slice(&vec![u8::MAX; 50]); assert_eq!(bytes.len(), 50); assert_eq!(bytes.as_slice(), &[u8::MAX; 50]); // Validate boundary values with max u8",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}