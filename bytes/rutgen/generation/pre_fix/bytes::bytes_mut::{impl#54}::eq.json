{
  "name": "bytes::bytes_mut::{impl#54}::eq",
  "mod_info": {
    "name": "bytes_mut",
    "loc": "src/lib.rs:83:1:83:15"
  },
  "visible": true,
  "loc": "src/bytes_mut.rs:1706:5:1708:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: BytesMut instance with varying lengths (0 to MAX_VEC_POS), other: Bytes instance with length corresponding to self, comparing both for equality (true/false).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([]))).unwrap(),",
                "        len: 0,",
                "        cap: 0,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.len, 0);",
                "    assert_eq!(bytes.len, 0);",
                "    assert!(bytes_mut.eq(&bytes) == true);"
              ],
              "code": [
                "{",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([]))).unwrap(),",
                "        len: 0,",
                "        cap: 0,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: ptr::null(),",
                "        len: 0,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "    assert_eq!(bytes_mut.len, 0);",
                "    assert_eq!(bytes.len, 0);",
                "    assert!(bytes_mut.eq(&bytes) == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(data.clone())).cast::<u8>()),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: data.as_ptr(),",
                "        len: data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.eq(&bytes), true);",
                "    assert_eq!(bytes_mut.len, data.len());",
                "    assert!(bytes_mut.ptr.as_ptr() != ptr::null_mut());",
                "    assert!(bytes.ptr != ptr::null());",
                "    assert_eq!(bytes.len, data.len());",
                "    assert!(bytes_mut.cap >= bytes.len);",
                "    assert!(bytes_mut.deref() == data.as_slice());"
              ],
              "code": [
                "{",
                "    let data: Vec<u8> = vec![1, 2, 3, 4, 5];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(data.clone())).cast::<u8>()),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: data.as_ptr(),",
                "        len: data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "    assert_eq!(bytes_mut.eq(&bytes), true);",
                "    assert_eq!(bytes_mut.len, data.len());",
                "    assert!(bytes_mut.ptr.as_ptr() != ptr::null_mut());",
                "    assert!(bytes.ptr != ptr::null());",
                "    assert_eq!(bytes.len, data.len());",
                "    assert!(bytes_mut.cap >= bytes.len);",
                "    assert!(bytes_mut.deref() == data.as_slice());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3])).cast::<u8>()).unwrap(),",
                "        len: 3,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: Box::into_raw(Box::new([1, 2, 3, 4])).cast::<u8>(),",
                "        len: 4,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "}"
              ],
              "oracle": [
                "    assert!(bytes_mut.eq(&bytes) == false);",
                "    let bytes2 = Bytes {",
                "    ptr: Box::into_raw(Box::new([4, 5, 6])).cast::<u8>(),",
                "    len: 3,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes2) == false);",
                "    let bytes3 = Bytes {",
                "    ptr: bytes_mut.ptr.as_ptr(),",
                "    len: bytes_mut.len,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes3) == true);",
                "    let bytes_empty = Bytes {",
                "    ptr: ptr::null(),",
                "    len: 0,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes_empty) == false);",
                "    let bytes_large = Bytes {",
                "    ptr: Box::into_raw(Box::new([1, 2, 3, 4, 5, 6])).cast::<u8>(),",
                "    len: 6,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes_large) == false);"
              ],
              "code": [
                "{",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3])).cast::<u8>()).unwrap(),",
                "        len: 3,",
                "        cap: 3,",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: Box::into_raw(Box::new([1, 2, 3, 4])).cast::<u8>(),",
                "        len: 4,",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "    assert!(bytes_mut.eq(&bytes) == false);",
                "    let bytes2 = Bytes {",
                "    ptr: Box::into_raw(Box::new([4, 5, 6])).cast::<u8>(),",
                "    len: 3,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes2) == false);",
                "    let bytes3 = Bytes {",
                "    ptr: bytes_mut.ptr.as_ptr(),",
                "    len: bytes_mut.len,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes3) == true);",
                "    let bytes_empty = Bytes {",
                "    ptr: ptr::null(),",
                "    len: 0,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes_empty) == false);",
                "    let bytes_large = Bytes {",
                "    ptr: Box::into_raw(Box::new([1, 2, 3, 4, 5, 6])).cast::<u8>(),",
                "    len: 6,",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert!(bytes_mut.eq(&bytes_large) == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: Vec<u8> = vec![10, 20, 30];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(data.clone())).cast::<u8>()).unwrap(),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: data.as_ptr(),",
                "        len: data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.eq(&bytes), true);",
                "    let data_empty: Vec<u8> = vec![];",
                "    let bytes_mut_empty = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(data_empty.clone())).cast::<u8>()).unwrap(),",
                "    len: data_empty.len(),",
                "    cap: data_empty.len(),",
                "    data: ptr::null_mut(),",
                "    };",
                "    let bytes_empty = Bytes {",
                "    ptr: data_empty.as_ptr(),",
                "    len: data_empty.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(bytes_mut_empty.eq(&bytes_empty), true);",
                "    let data_different: Vec<u8> = vec![40, 50, 60];",
                "    let bytes_different = Bytes {",
                "    ptr: data_different.as_ptr(),",
                "    len: data_different.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(bytes_mut.eq(&bytes_different), false);",
                "    let data_identical: Vec<u8> = vec![10, 20, 30];",
                "    let bytes_identical = Bytes {",
                "    ptr: data_identical.as_ptr(),",
                "    len: data_identical.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(bytes_mut.eq(&bytes_identical), true);",
                "    let bytes_mut_shorter = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(vec![10, 20])).cast::<u8>()).unwrap(),",
                "    len: 2,",
                "    cap: 2,",
                "    data: ptr::null_mut(),",
                "    };",
                "    assert_eq!(bytes_mut_shorter.eq(&bytes), false);",
                "    let bytes_mut_longer = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(vec![10, 20, 30, 40])).cast::<u8>()).unwrap(),",
                "    len: 4,",
                "    cap: 4,",
                "    data: ptr::null_mut(),",
                "    };",
                "    assert_eq!(bytes_mut_longer.eq(&bytes), false);"
              ],
              "code": [
                "{",
                "    let data: Vec<u8> = vec![10, 20, 30];",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(data.clone())).cast::<u8>()).unwrap(),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: data.as_ptr(),",
                "        len: data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "    assert_eq!(bytes_mut.eq(&bytes), true);",
                "    let data_empty: Vec<u8> = vec![];",
                "    let bytes_mut_empty = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(data_empty.clone())).cast::<u8>()).unwrap(),",
                "    len: data_empty.len(),",
                "    cap: data_empty.len(),",
                "    data: ptr::null_mut(),",
                "    };",
                "    let bytes_empty = Bytes {",
                "    ptr: data_empty.as_ptr(),",
                "    len: data_empty.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(bytes_mut_empty.eq(&bytes_empty), true);",
                "    let data_different: Vec<u8> = vec![40, 50, 60];",
                "    let bytes_different = Bytes {",
                "    ptr: data_different.as_ptr(),",
                "    len: data_different.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(bytes_mut.eq(&bytes_different), false);",
                "    let data_identical: Vec<u8> = vec![10, 20, 30];",
                "    let bytes_identical = Bytes {",
                "    ptr: data_identical.as_ptr(),",
                "    len: data_identical.len(),",
                "    data: AtomicPtr::new(ptr::null_mut()),",
                "    vtable: &SHARED_VTABLE,",
                "    };",
                "    assert_eq!(bytes_mut.eq(&bytes_identical), true);",
                "    let bytes_mut_shorter = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(vec![10, 20])).cast::<u8>()).unwrap(),",
                "    len: 2,",
                "    cap: 2,",
                "    data: ptr::null_mut(),",
                "    };",
                "    assert_eq!(bytes_mut_shorter.eq(&bytes), false);",
                "    let bytes_mut_longer = BytesMut {",
                "    ptr: NonNull::new(Box::into_raw(Box::new(vec![10, 20, 30, 40])).cast::<u8>()).unwrap(),",
                "    len: 4,",
                "    cap: 4,",
                "    data: ptr::null_mut(),",
                "    };",
                "    assert_eq!(bytes_mut_longer.eq(&bytes), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data: Vec<u8> = (0..MAX_VEC_POS).map(|x| x as u8).collect();",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(data.clone())).cast::<u8>()).unwrap(),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: data.as_ptr(),",
                "        len: data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes_mut.eq(&bytes), true);",
                "    assert_eq!(bytes_mut.len, bytes.len);",
                "    assert_ne!(bytes_mut.eq(&Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), true);",
                "    assert_eq!(bytes_mut.eq(&Bytes { ptr: bytes.ptr, len: bytes.len, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), true);",
                "    assert_eq!(bytes_mut.eq(&Bytes { ptr: bytes.ptr, len: bytes.len + 1, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), false);",
                "    let different_data: Vec<u8> = (1..MAX_VEC_POS+1).map(|x| x as u8).collect();",
                "    let different_bytes = Bytes { ptr: different_data.as_ptr(), len: different_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(bytes_mut.eq(&different_bytes), false);"
              ],
              "code": [
                "{",
                "    let data: Vec<u8> = (0..MAX_VEC_POS).map(|x| x as u8).collect();",
                "    let bytes_mut = BytesMut {",
                "        ptr: NonNull::new(Box::into_raw(Box::new(data.clone())).cast::<u8>()).unwrap(),",
                "        len: data.len(),",
                "        cap: data.len(),",
                "        data: ptr::null_mut(),",
                "    };",
                "    let bytes = Bytes {",
                "        ptr: data.as_ptr(),",
                "        len: data.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let _ = bytes_mut.eq(&bytes);",
                "    assert_eq!(bytes_mut.eq(&bytes), true);",
                "    assert_eq!(bytes_mut.len, bytes.len);",
                "    assert_ne!(bytes_mut.eq(&Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), true);",
                "    assert_eq!(bytes_mut.eq(&Bytes { ptr: bytes.ptr, len: bytes.len, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), true);",
                "    assert_eq!(bytes_mut.eq(&Bytes { ptr: bytes.ptr, len: bytes.len + 1, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), false);",
                "    let different_data: Vec<u8> = (1..MAX_VEC_POS+1).map(|x| x as u8).collect();",
                "    let different_bytes = Bytes { ptr: different_data.as_ptr(), len: different_data.len(), data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE };",
                "    assert_eq!(bytes_mut.eq(&different_bytes), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}