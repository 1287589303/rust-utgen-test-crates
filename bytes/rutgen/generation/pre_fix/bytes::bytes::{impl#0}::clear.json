{
  "name": "bytes::bytes::{impl#0}::clear",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:619:5:621:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "mut self: &mut Bytes; expected behavior: buf.is_empty() should return true after buf.clear() is called; test with non-empty Bytes (len > 0) and check edge case with empty Bytes (len == 0)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = Bytes::from_static(b\"hello world\");",
                "    buf.clear();",
                "    buf.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.ptr.is_null());",
                "    assert_eq!(buf.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert!(buf.vtable as *const Vtable == &STATIC_VTABLE);",
                "    assert!(buf.is_unique());"
              ],
              "code": [
                "{",
                "    let mut buf = Bytes::from_static(b\"hello world\");",
                "    buf.clear();",
                "    buf.is_empty();",
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.ptr.is_null());",
                "    assert_eq!(buf.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert!(buf.vtable as *const Vtable == &STATIC_VTABLE);",
                "    assert!(buf.is_unique());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = Bytes::new();",
                "    buf.clear();",
                "    buf.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.is_empty());",
                "    assert_eq!(buf.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert_eq!(buf.ptr, ptr::null());",
                "    assert_eq!(buf.vtable, &STATIC_VTABLE);"
              ],
              "code": [
                "{",
                "    let mut buf = Bytes::new();",
                "    buf.clear();",
                "    buf.is_empty();",
                "    assert_eq!(buf.len(), 0);",
                "    assert!(buf.is_empty());",
                "    assert_eq!(buf.data.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert_eq!(buf.ptr, ptr::null());",
                "    assert_eq!(buf.vtable, &STATIC_VTABLE);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}