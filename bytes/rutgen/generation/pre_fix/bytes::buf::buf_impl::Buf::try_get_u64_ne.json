{
  "name": "bytes::buf::buf_impl::Buf::try_get_u64_ne",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1682:5:1684:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining() < 8 and remaining() > 0; remaining values in range 0 to 7 bytes inclusive for edge cases\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
                "    assert_eq!(7, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
                "    assert_eq!(7, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError{requested: 8, available: 6}), buf.try_get_u64_ne());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    assert_eq!(Err(TryGetError{requested: 8, available: 6}), buf.try_get_u64_ne());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), result);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64_ne());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64_ne());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), result);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    assert_eq!(result, Err(TryGetError{requested: 8, available: 2}));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    assert_eq!(result, Err(TryGetError{requested: 8, available: 2}));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), result);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "}"
              ],
              "oracle": [
                "    let buf: &[u8] = &b\"\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    // The assertion is omitted as per instructions",
                "    let buf: &[u8] = &b\"\"[..];",
                "    let result = buf.try_get_u64_ne();",
                "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "this.remaining() == 8 for successful retrieval, this.remaining() < 8 for TryGetError; buffer contains valid U64 values in native-endian representation for success.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "    }",
                "",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            self.data",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.data = &self.data[cnt..];",
                "        }",
                "",
                "        fn get_u8(&mut self) -> u8 {",
                "            self.data[0]",
                "        }",
                "",
                "        fn try_get_u64_ne(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = u64::from_ne_bytes(self.data[0..8].try_into().unwrap());",
                "            self.advance(8);",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\" };",
                "    let result = buf.try_get_u64_ne();",
                "    // The result should be Ok with the corresponding value.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_ne());",
                "    assert_eq!(6, buf.remaining());",
                "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\" };",
                "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_u64_ne());",
                "    assert_eq!(7, buf.remaining());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "    }",
                "",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            self.data",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.data = &self.data[cnt..];",
                "        }",
                "",
                "        fn get_u8(&mut self) -> u8 {",
                "            self.data[0]",
                "        }",
                "",
                "        fn try_get_u64_ne(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = u64::from_ne_bytes(self.data[0..8].try_into().unwrap());",
                "            self.advance(8);",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\" };",
                "    let result = buf.try_get_u64_ne();",
                "    // The result should be Ok with the corresponding value.",
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_ne());",
                "    assert_eq!(6, buf.remaining());",
                "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\" };",
                "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_u64_ne());",
                "    assert_eq!(7, buf.remaining());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "    }",
                "",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            self.data",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.data = &self.data[cnt..];",
                "        }",
                "",
                "        fn try_get_u64_ne(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = u64::from_ne_bytes(self.data[0..8].try_into().unwrap());",
                "            self.advance(8);",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\" };",
                "    let result = buf.try_get_u64_ne();",
                "    // The result should be Err with the appropriate TryGetError.",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_ne());",
                "    assert_eq!(7, buf.remaining());",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_ne());"
              ],
              "code": [
                "{",
                "    struct TestBuf {",
                "        data: &'static [u8],",
                "    }",
                "",
                "    impl Buf for TestBuf {",
                "        fn remaining(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "",
                "        fn chunk(&self) -> &[u8] {",
                "            self.data",
                "        }",
                "",
                "        fn advance(&mut self, cnt: usize) {",
                "            self.data = &self.data[cnt..];",
                "        }",
                "",
                "        fn try_get_u64_ne(&mut self) -> Result<u64, TryGetError> {",
                "            if self.remaining() < 8 {",
                "                return Err(TryGetError {",
                "                    requested: 8,",
                "                    available: self.remaining(),",
                "                });",
                "            }",
                "            let ret = u64::from_ne_bytes(self.data[0..8].try_into().unwrap());",
                "            self.advance(8);",
                "            Ok(ret)",
                "        }",
                "    }",
                "",
                "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\" };",
                "    let result = buf.try_get_u64_ne();",
                "    // The result should be Err with the appropriate TryGetError.",
                "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_ne());",
                "    assert_eq!(7, buf.remaining());",
                "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_ne());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}