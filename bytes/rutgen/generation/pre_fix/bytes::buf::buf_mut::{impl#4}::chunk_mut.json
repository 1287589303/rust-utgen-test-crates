{
  "name": "bytes::buf::buf_mut::{impl#4}::chunk_mut",
  "mod_info": {
    "name": "buf::buf_mut",
    "loc": "src/buf/mod.rs:18:1:18:13"
  },
  "visible": true,
  "loc": "src/buf/buf_mut.rs:1623:5:1636:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.capacity() == self.len() at line 1624 is true\n",
        "expected return value/type: unsafe { UninitSlice::from_raw_parts_mut(ptr.add(len), cap - len) }\n"
      ],
      "input_infer": "self.capacity() = self.len() (both should equal a non-negative integer), self.len() < capacity() + 64 (to ensure reserve grows the vec)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
                "    vec.resize(0, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
                "    vec.resize(0, 0);",
                "    assert_eq!(vec.capacity(), 0);",
                "    assert_eq!(vec.len(), 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(0), 0) }.len() == 0);"
              ],
              "code": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
                "    vec.resize(0, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
                "    vec.resize(0, 0);",
                "    assert_eq!(vec.capacity(), 0);",
                "    assert_eq!(vec.len(), 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(0), 0) }.len() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(10);",
                "    vec.resize(10, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec.len(), 10);",
                "    assert!(vec.capacity() > vec.len());",
                "    assert!(!vec.chunk_mut().0.is_empty());",
                "    assert_eq!(vec.chunk_mut().0.len(), vec.capacity() - vec.len());"
              ],
              "code": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(10);",
                "    vec.resize(10, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    assert_eq!(vec.len(), 10);",
                "    assert!(vec.capacity() > vec.len());",
                "    assert!(!vec.chunk_mut().0.is_empty());",
                "    assert_eq!(vec.chunk_mut().0.len(), vec.capacity() - vec.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
                "    vec.resize(5, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
                "    vec.resize(5, 0);",
                "    assert_eq!(vec.len(), 5);",
                "    assert_eq!(vec.capacity(), 5);",
                "    let uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(!uninit_slice.as_mut_ptr().is_null());",
                "    assert_eq!(uninit_slice.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
                "    vec.resize(5, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
                "    vec.resize(5, 0);",
                "    assert_eq!(vec.len(), 5);",
                "    assert_eq!(vec.capacity(), 5);",
                "    let uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(!uninit_slice.as_mut_ptr().is_null());",
                "    assert_eq!(uninit_slice.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(15);",
                "    vec.resize(10, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec.capacity(), 15);",
                "    assert_eq!(vec.len(), 10);",
                "    assert!(vec.has_remaining_mut());",
                "    assert_eq!(vec.chunk_mut().len(), 5);",
                "    assert!(vec.chunk_mut() as *mut _ != ptr::null_mut());",
                "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(vec.len()), vec.capacity() - vec.len()) } as *mut _ != ptr::null_mut());"
              ],
              "code": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(15);",
                "    vec.resize(10, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    assert_eq!(vec.capacity(), 15);",
                "    assert_eq!(vec.len(), 10);",
                "    assert!(vec.has_remaining_mut());",
                "    assert_eq!(vec.chunk_mut().len(), 5);",
                "    assert!(vec.chunk_mut() as *mut _ != ptr::null_mut());",
                "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(vec.len()), vec.capacity() - vec.len()) } as *mut _ != ptr::null_mut());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(20);",
                "    vec.resize(20, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec.capacity(), 20);",
                "    assert_eq!(vec.len(), 20);",
                "    assert_eq!(_uninit_slice.len(), 0);",
                "    assert!(vec.as_mut_ptr() != _uninit_slice.as_mut_ptr());",
                "    assert!(unsafe { _uninit_slice.as_uninit_slice_mut() }.len() == 0);"
              ],
              "code": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(20);",
                "    vec.resize(20, 0);",
                "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
                "    assert_eq!(vec.capacity(), 20);",
                "    assert_eq!(vec.len(), 20);",
                "    assert_eq!(_uninit_slice.len(), 0);",
                "    assert!(vec.as_mut_ptr() != _uninit_slice.as_mut_ptr());",
                "    assert!(unsafe { _uninit_slice.as_uninit_slice_mut() }.len() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.capacity() == self.len() at line 1624 is false\n",
        "expected return value/type: unsafe { UninitSlice::from_raw_parts_mut(ptr.add(len), cap - len) }\n"
      ],
      "input_infer": "self.capacity() > self.len() and self.len() < capacity limit (e.g., < 2^64) to ensure valid pointer arithmetic and prevent overflow in `from_raw_parts_mut`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec = Vec::with_capacity(64);",
                "    vec.push(1);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec.capacity(), 64);",
                "    assert_eq!(vec.len(), 1);",
                "    assert!(result.len() > 0);",
                "    assert!(unsafe { result.as_mut_ptr() } != vec.as_mut_ptr());",
                "    assert!(unsafe { result.as_uninit_slice_mut() }.len() == 63);",
                "    assert!(result as *mut _ as usize % mem::align_of::<u8>() == 0);",
                "    assert!(ptr::eq(unsafe { result.as_mut_ptr().add(vec.len()) }, unsafe { vec.as_mut_ptr() }));"
              ],
              "code": [
                "{",
                "    let mut vec = Vec::with_capacity(64);",
                "    vec.push(1);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    assert_eq!(vec.capacity(), 64);",
                "    assert_eq!(vec.len(), 1);",
                "    assert!(result.len() > 0);",
                "    assert!(unsafe { result.as_mut_ptr() } != vec.as_mut_ptr());",
                "    assert!(unsafe { result.as_uninit_slice_mut() }.len() == 63);",
                "    assert!(result as *mut _ as usize % mem::align_of::<u8>() == 0);",
                "    assert!(ptr::eq(unsafe { result.as_mut_ptr().add(vec.len()) }, unsafe { vec.as_mut_ptr() }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec = Vec::with_capacity(128);",
                "    vec.push(1);",
                "    vec.push(2);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    let mut vec = Vec::with_capacity(128);",
                "    vec.push(1);",
                "    vec.push(2);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(result.len() > 0);"
              ],
              "code": [
                "{",
                "    let mut vec = Vec::with_capacity(128);",
                "    vec.push(1);",
                "    vec.push(2);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    let mut vec = Vec::with_capacity(128);",
                "    vec.push(1);",
                "    vec.push(2);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(result.len() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec = Vec::with_capacity(256);",
                "    for _ in 0..255 {",
                "        vec.push(1);",
                "    }",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(vec.capacity(), 256);",
                "    assert_eq!(vec.len(), 255);",
                "    assert!(result.len() > 0);",
                "    assert_eq!(result.as_mut_ptr(), vec.as_mut_ptr().add(255));",
                "    assert_eq!(unsafe { result.as_uninit_slice_mut().len() }, 1);",
                "    assert!(result.is::<UninitSlice>());",
                "    assert!(unsafe { ptr::is_null(result.as_mut_ptr().add(1)) });"
              ],
              "code": [
                "{",
                "    let mut vec = Vec::with_capacity(256);",
                "    for _ in 0..255 {",
                "        vec.push(1);",
                "    }",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    assert_eq!(vec.capacity(), 256);",
                "    assert_eq!(vec.len(), 255);",
                "    assert!(result.len() > 0);",
                "    assert_eq!(result.as_mut_ptr(), vec.as_mut_ptr().add(255));",
                "    assert_eq!(unsafe { result.as_uninit_slice_mut().len() }, 1);",
                "    assert!(result.is::<UninitSlice>());",
                "    assert!(unsafe { ptr::is_null(result.as_mut_ptr().add(1)) });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(32);",
                "    // capacity is greater than length (which is 0)",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "}"
              ],
              "oracle": [
                "    let mut vec: Vec<u8> = Vec::with_capacity(32);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(vec.capacity() > vec.len());",
                "    assert_eq!(result.len(), 32);"
              ],
              "code": [
                "{",
                "    let mut vec: Vec<u8> = Vec::with_capacity(32);",
                "    // capacity is greater than length (which is 0)",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    let mut vec: Vec<u8> = Vec::with_capacity(32);",
                "    let result: &mut UninitSlice = vec.chunk_mut();",
                "    assert!(vec.capacity() > vec.len());",
                "    assert_eq!(result.len(), 32);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}