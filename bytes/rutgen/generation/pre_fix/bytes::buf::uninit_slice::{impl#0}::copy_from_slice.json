{
  "name": "bytes::buf::uninit_slice::{impl#0}::copy_from_slice",
  "mod_info": {
    "name": "buf::uninit_slice",
    "loc": "src/buf/mod.rs:25:1:25:18"
  },
  "visible": true,
  "loc": "src/buf/uninit_slice.rs:134:5:142:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (*left_val == *right_val) at line 40 is true\n"
      ],
      "input_infer": "self.len() == src.len() where self.len() is in the range [0, N] for some N, and src can be an empty slice or of length N, ensuring both are equal.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data: [u8; 0] = [];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
                "    slice.copy_from_slice(&[]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice.len(), 0);",
                "    assert_panics!(slice.copy_from_slice(b\"foo\"));",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"foo\");",
                "    assert_eq!(data, b\"foo\");",
                "    slice.copy_from_slice(b\"bar\");",
                "    assert_eq!(data, b\"bar\");",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    assert_panics!(slice.copy_from_slice(b\"barfoo\"));"
              ],
              "code": [
                "{",
                "    let mut data: [u8; 0] = [];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
                "    slice.copy_from_slice(&[]);",
                "    assert_eq!(slice.len(), 0);",
                "    assert_panics!(slice.copy_from_slice(b\"foo\"));",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"foo\");",
                "    assert_eq!(data, b\"foo\");",
                "    slice.copy_from_slice(b\"bar\");",
                "    assert_eq!(data, b\"bar\");",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    assert_panics!(slice.copy_from_slice(b\"barfoo\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 1];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 1) };",
                "    slice.copy_from_slice(b\"b\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data[0], b'b');",
                "    assert_eq!(slice.len(), 1);",
                "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 1];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 1) };",
                "    slice.copy_from_slice(b\"b\");",
                "    assert_eq!(data[0], b'b');",
                "    assert_eq!(slice.len(), 1);",
                "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"foo\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, b\"foo\");",
                "    let mut data_empty = [0u8; 3];",
                "    let slice_empty = unsafe { UninitSlice::from_raw_parts_mut(data_empty.as_mut_ptr(), 3) };",
                "    slice_empty.copy_from_slice(b\"\");",
                "    assert_eq!(data_empty, b\"\");",
                "    let mut data_diff_size = [0u8; 5];",
                "    let slice_diff_size = unsafe { UninitSlice::from_raw_parts_mut(data_diff_size.as_mut_ptr(), 5) };",
                "    slice_diff_size.copy_from_slice(b\"hello\");",
                "    assert_eq!(data_diff_size[..5], b\"hello\");",
                "    let mut data_panic = [0u8; 3];",
                "    let slice_panic = unsafe { UninitSlice::from_raw_parts_mut(data_panic.as_mut_ptr(), 3) };",
                "    // Assert panic when copying different lengths",
                "    let result = std::panic::catch_unwind(|| {",
                "    slice_panic.copy_from_slice(b\"longer than three\");",
                "    });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"foo\");",
                "    assert_eq!(data, b\"foo\");",
                "    let mut data_empty = [0u8; 3];",
                "    let slice_empty = unsafe { UninitSlice::from_raw_parts_mut(data_empty.as_mut_ptr(), 3) };",
                "    slice_empty.copy_from_slice(b\"\");",
                "    assert_eq!(data_empty, b\"\");",
                "    let mut data_diff_size = [0u8; 5];",
                "    let slice_diff_size = unsafe { UninitSlice::from_raw_parts_mut(data_diff_size.as_mut_ptr(), 5) };",
                "    slice_diff_size.copy_from_slice(b\"hello\");",
                "    assert_eq!(data_diff_size[..5], b\"hello\");",
                "    let mut data_panic = [0u8; 3];",
                "    let slice_panic = unsafe { UninitSlice::from_raw_parts_mut(data_panic.as_mut_ptr(), 3) };",
                "    // Assert panic when copying different lengths",
                "    let result = std::panic::catch_unwind(|| {",
                "    slice_panic.copy_from_slice(b\"longer than three\");",
                "    });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"barb\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, [0u8; 3]);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"barb\");",
                "    }).is_err());",
                "    assert!(data.iter().all(|&x| x == 0u8));"
              ],
              "code": [
                "{",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"barb\");",
                "    assert_eq!(data, [0u8; 3]);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut data = [0u8; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"barb\");",
                "    }).is_err());",
                "    assert!(data.iter().all(|&x| x == 0u8));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (*left_val == *right_val) at line 40 is false\n"
      ],
      "input_infer": "src must be an array of u8 of varying lengths (including 0 to max array size) and *mut u8 must point to a valid memory location applicable for the specified lengths.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(&[]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, [0, 0, 0]);",
                "    panic!(\"Expected panic due to length mismatch\");",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"foo\");",
                "    assert_eq!(data, [b'f', b'o', b'o']);",
                "    slice.copy_from_slice(b\"ba\");",
                "    panic!(\"Expected panic due to length mismatch\");"
              ],
              "code": [
                "{",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(&[]);",
                "    assert_eq!(data, [0, 0, 0]);",
                "    panic!(\"Expected panic due to length mismatch\");",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(b\"foo\");",
                "    assert_eq!(data, [b'f', b'o', b'o']);",
                "    slice.copy_from_slice(b\"ba\");",
                "    panic!(\"Expected panic due to length mismatch\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(&[1, 2]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, [0, 0, 0]);",
                "    assert!(data.len() == 3);",
                "    assert!(slice.len() == 3);",
                "    assert!(std::ptr::eq(slice.as_mut_ptr(), data.as_mut_ptr()));",
                "    assert!(std::panic::catch_unwind(|| { slice.copy_from_slice(&[1, 2]) }).is_err());",
                "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);"
              ],
              "code": [
                "{",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(&[1, 2]);",
                "    assert_eq!(data, [0, 0, 0]);",
                "    assert!(data.len() == 3);",
                "    assert!(slice.len() == 3);",
                "    assert!(std::ptr::eq(slice.as_mut_ptr(), data.as_mut_ptr()));",
                "    assert!(std::panic::catch_unwind(|| { slice.copy_from_slice(&[1, 2]) }).is_err());",
                "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(&[1, 2, 3, 4]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, [0, 0, 0]);",
                "    assert_eq!(slice.len(), 3);",
                "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
                "    assert!(core::panic::catch_unwind(|| slice.copy_from_slice(&[1, 2, 3, 4])).is_err());",
                "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);"
              ],
              "code": [
                "{",
                "    let mut data: [u8; 3] = [0; 3];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
                "    slice.copy_from_slice(&[1, 2, 3, 4]);",
                "    assert_eq!(data, [0, 0, 0]);",
                "    assert_eq!(slice.len(), 3);",
                "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
                "    assert!(core::panic::catch_unwind(|| slice.copy_from_slice(&[1, 2, 3, 4])).is_err());",
                "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut data: [u8; 4] = [0; 4];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 4) };",
                "    slice.copy_from_slice(&[1, 2, 3, 4]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(data, [1, 2, 3, 4]);",
                "    assert_eq!(slice.len(), 4);",
                "    assert!(unsafe { slice.as_uninit_slice_mut() }.len() == 4);",
                "    assert!(data[0] == 1);",
                "    assert!(data[1] == 2);",
                "    assert!(data[2] == 3);",
                "    assert!(data[3] == 4);"
              ],
              "code": [
                "{",
                "    let mut data: [u8; 4] = [0; 4];",
                "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 4) };",
                "    slice.copy_from_slice(&[1, 2, 3, 4]);",
                "    assert_eq!(data, [1, 2, 3, 4]);",
                "    assert_eq!(slice.len(), 4);",
                "    assert!(unsafe { slice.as_uninit_slice_mut() }.len() == 4);",
                "    assert!(data[0] == 1);",
                "    assert!(data[1] == 2);",
                "    assert!(data[2] == 3);",
                "    assert!(data[3] == 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}