{
  "name": "bytes::bytes::{impl#23}::eq",
  "mod_info": {
    "name": "bytes",
    "loc": "src/lib.rs:82:1:82:11"
  },
  "visible": true,
  "loc": "src/bytes.rs:842:5:844:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self should be a reference to a Bytes struct with a valid memory pointer and length > 0, other should be a reference to a Bytes struct that either matches the content of self or is empty, both should be properly initialized; expected return values are true for equal content and false for non-matching content or one being empty.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    ",
                "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "    ",
                "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[5, 4, 3, 2, 1];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[5, 4, 3, 2, 1];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data1: &[u8] = &[];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let data1: &[u8] = &[];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let data1: &[u8] = &[];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let data1: &[u8] = &[];",
                "    let bytes1 = Bytes {",
                "        ptr: data1.as_ptr(),",
                "        len: data1.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let data2: &[u8] = &[];",
                "    let bytes2 = Bytes {",
                "        ptr: data2.as_ptr(),",
                "        len: data2.len(),",
                "        data: AtomicPtr::new(ptr::null_mut()),",
                "        vtable: &SHARED_VTABLE,",
                "    };",
                "",
                "    let result = bytes1.eq(&bytes2);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}