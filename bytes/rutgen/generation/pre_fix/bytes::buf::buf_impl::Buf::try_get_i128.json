{
  "name": "bytes::buf::buf_impl::Buf::try_get_i128",
  "mod_info": {
    "name": "buf::buf_impl",
    "loc": "src/buf/mod.rs:17:1:17:14"
  },
  "visible": true,
  "loc": "src/buf/buf_impl.rs:1884:5:1886:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is true\n",
        "expected return value/type: Err(TryGetError {\n                requested: SIZE,\n                available: $this.remaining(),\n            })\n"
      ],
      "input_infer": "remaining() < 16 for buffer sizes from 0 to 15, also test with remaining() == 16 for success case and remaining() >= 16 for other valid reads\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];",
                "    let _result = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(6, buf.remaining());",
                "    let mut buf_short: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf_short.try_get_i128());",
                "    assert_eq!(15, buf_short.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];",
                "    let _result = buf.try_get_i128();",
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(6, buf.remaining());",
                "    let mut buf_short: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf_short.try_get_i128());",
                "    assert_eq!(15, buf_short.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    let _result = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128());",
                "    assert_eq!(15, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    let _result = buf.try_get_i128();",
                "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128());",
                "    assert_eq!(15, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..];",
                "    let _result = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 0 }));",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));",
                "    assert_eq!(buf.remaining(), 15);"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\"[..];",
                "    let _result = buf.try_get_i128();",
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 0 }));",
                "    assert_eq!(buf.remaining(), 0);",
                "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));",
                "    assert_eq!(buf.remaining(), 15);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let _result = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 1 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\"[..];",
                "    let _result = buf.try_get_i128();",
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 1 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let _result = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Err(TryGetError { requested: 16, available: 2 }), buf.try_get_i128());",
                "    assert_eq!(2, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
                "    let _result = buf.try_get_i128();",
                "    assert_eq!(Err(TryGetError { requested: 16, available: 2 }), buf.try_get_i128());",
                "    assert_eq!(2, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    let _result = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));"
              ],
              "code": [
                "{",
                "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    let _result = buf.try_get_i128();",
                "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: $this.remaining() < SIZE at line 17 is false, with bound $this.remaining() == SIZE\n",
        "precondition: let Some(ret) = ret at line 32 is true\n",
        "expected return value/type: Ok(ret)\n"
      ],
      "input_infer": "remaining_bytes == 16 or remaining_bytes > 16 for Ok(ret), remaining_bytes == 15 for Err(TryGetError) with requested 16 and available 15\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\"[..];",
                "    let _ = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(0, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\"[..];",
                "    let _ = buf.try_get_i128();",
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(0, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    let _ = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(buf.remaining(), 15);",
                "    assert_eq!(buf.try_get_i128(), Err(TryGetError{requested: 16, available: 15}));",
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(buf.remaining(), 6);",
                "    assert!(matches!(buf.try_get_i128(), Ok(_)));"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    let _ = buf.try_get_i128();",
                "    assert_eq!(buf.remaining(), 15);",
                "    assert_eq!(buf.try_get_i128(), Err(TryGetError{requested: 16, available: 15}));",
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(buf.remaining(), 6);",
                "    assert!(matches!(buf.try_get_i128(), Ok(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let _ = buf.try_get_i128();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Ok(0_i128), buf.try_get_i128());",
                "    assert_eq!(0, buf.remaining());",
                "    ",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];",
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(6, buf.remaining());",
                "    ",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    assert_eq!(Err(TryGetError{requested: 16, available: 15}), buf.try_get_i128());",
                "    assert_eq!(15, buf.remaining());"
              ],
              "code": [
                "{",
                "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
                "    let _ = buf.try_get_i128();",
                "    assert_eq!(Ok(0_i128), buf.try_get_i128());",
                "    assert_eq!(0, buf.remaining());",
                "    ",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];",
                "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
                "    assert_eq!(6, buf.remaining());",
                "    ",
                "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
                "    assert_eq!(Err(TryGetError{requested: 16, available: 15}), buf.try_get_i128());",
                "    assert_eq!(15, buf.remaining());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}