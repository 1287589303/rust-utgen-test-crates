[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64_le());",
          "    assert_eq!(4, buf.remaining());",
          "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\", offset: 0 };",
          "    assert_eq!(Ok(0x0807060504030201_u64), buf.try_get_u64_le());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64_le());",
          "    assert_eq!(4, buf.remaining());",
          "    let mut buf = TestBuf { data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\", offset: 0 };",
          "    assert_eq!(Ok(0x0807060504030201_u64), buf.try_get_u64_le());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), result);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), result);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));",
          "    ",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
          "    ",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
          "    ",
          "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\\x08\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));",
          "    ",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
          "    ",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
          "    ",
          "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "}"
        ],
        "oracle": [
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
          "    ",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\", offset: 0 };",
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_le());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        offset: usize,",
          "    }",
          "    ",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.offset",
          "        }",
          "",
          "        fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = &self.data[self.offset..self.offset + 8];",
          "            self.offset += 8;",
          "            Ok(u64::from_le_bytes(bytes.try_into().unwrap()))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: b\"\", offset: 0 };",
          "    let result = buf.try_get_u64_le();",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\", offset: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64_le());",
          "    ",
          "    let mut buf = TestBuf { data: b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\", offset: 0 };",
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64_le());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]