[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
          "    vec.resize(0, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
          "    vec.resize(0, 0);",
          "    assert_eq!(vec.capacity(), 0);",
          "    assert_eq!(vec.len(), 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(0), 0) }.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
          "    vec.resize(0, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    let mut vec: Vec<u8> = Vec::with_capacity(0);",
          "    vec.resize(0, 0);",
          "    assert_eq!(vec.capacity(), 0);",
          "    assert_eq!(vec.len(), 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(0), 0) }.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(10);",
          "    vec.resize(10, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.len(), 10);",
          "    assert!(vec.capacity() > vec.len());",
          "    assert!(!vec.chunk_mut().0.is_empty());",
          "    assert_eq!(vec.chunk_mut().0.len(), vec.capacity() - vec.len());"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(10);",
          "    vec.resize(10, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    assert_eq!(vec.len(), 10);",
          "    assert!(vec.capacity() > vec.len());",
          "    assert!(!vec.chunk_mut().0.is_empty());",
          "    assert_eq!(vec.chunk_mut().0.len(), vec.capacity() - vec.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
          "    vec.resize(5, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
          "    vec.resize(5, 0);",
          "    assert_eq!(vec.len(), 5);",
          "    assert_eq!(vec.capacity(), 5);",
          "    let uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    assert!(!uninit_slice.as_mut_ptr().is_null());",
          "    assert_eq!(uninit_slice.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
          "    vec.resize(5, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
          "    vec.resize(5, 0);",
          "    assert_eq!(vec.len(), 5);",
          "    assert_eq!(vec.capacity(), 5);",
          "    let uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    assert!(!uninit_slice.as_mut_ptr().is_null());",
          "    assert_eq!(uninit_slice.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(15);",
          "    vec.resize(10, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.capacity(), 15);",
          "    assert_eq!(vec.len(), 10);",
          "    assert!(vec.has_remaining_mut());",
          "    assert_eq!(vec.chunk_mut().len(), 5);",
          "    assert!(vec.chunk_mut() as *mut _ != ptr::null_mut());",
          "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(vec.len()), vec.capacity() - vec.len()) } as *mut _ != ptr::null_mut());"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(15);",
          "    vec.resize(10, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    assert_eq!(vec.capacity(), 15);",
          "    assert_eq!(vec.len(), 10);",
          "    assert!(vec.has_remaining_mut());",
          "    assert_eq!(vec.chunk_mut().len(), 5);",
          "    assert!(vec.chunk_mut() as *mut _ != ptr::null_mut());",
          "    assert!(unsafe { UninitSlice::from_raw_parts_mut(vec.as_mut_ptr().add(vec.len()), vec.capacity() - vec.len()) } as *mut _ != ptr::null_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(20);",
          "    vec.resize(20, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.capacity(), 20);",
          "    assert_eq!(vec.len(), 20);",
          "    assert_eq!(_uninit_slice.len(), 0);",
          "    assert!(vec.as_mut_ptr() != _uninit_slice.as_mut_ptr());",
          "    assert!(unsafe { _uninit_slice.as_uninit_slice_mut() }.len() == 0);"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(20);",
          "    vec.resize(20, 0);",
          "    let _uninit_slice: &mut UninitSlice = vec.chunk_mut();",
          "    assert_eq!(vec.capacity(), 20);",
          "    assert_eq!(vec.len(), 20);",
          "    assert_eq!(_uninit_slice.len(), 0);",
          "    assert!(vec.as_mut_ptr() != _uninit_slice.as_mut_ptr());",
          "    assert!(unsafe { _uninit_slice.as_uninit_slice_mut() }.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]