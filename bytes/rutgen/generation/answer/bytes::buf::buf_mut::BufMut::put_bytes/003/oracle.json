[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0; 6];",
          "    {",
          "        let mut buf = &mut dst[..];",
          "        buf.put_bytes(b'a', 6);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, buf.remaining_mut());",
          "    assert_eq!(b\"aaaaaa\", &dst);",
          "    assert!(match panic::catch_unwind(|| buf.put_bytes(b'a', 1)) { Err(_) => true, _ => false });",
          "    assert!(match panic::catch_unwind(|| buf.put_bytes(b'a', 7)) { Err(_) => true, _ => false });",
          "    assert_eq!(0, buf.remaining_mut());",
          "    buf.put_bytes(b'b', 0);",
          "    assert_eq!(0, buf.remaining_mut());",
          "    assert_eq!(b\"aaaaaa\", &dst);"
        ],
        "code": [
          "{",
          "    let mut dst = [0; 6];",
          "    {",
          "        let mut buf = &mut dst[..];",
          "        buf.put_bytes(b'a', 6);",
          "    }",
          "    assert_eq!(0, buf.remaining_mut());",
          "    assert_eq!(b\"aaaaaa\", &dst);",
          "    assert!(match panic::catch_unwind(|| buf.put_bytes(b'a', 1)) { Err(_) => true, _ => false });",
          "    assert!(match panic::catch_unwind(|| buf.put_bytes(b'a', 7)) { Err(_) => true, _ => false });",
          "    assert_eq!(0, buf.remaining_mut());",
          "    buf.put_bytes(b'b', 0);",
          "    assert_eq!(0, buf.remaining_mut());",
          "    assert_eq!(b\"aaaaaa\", &dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut dst = [0; 6];",
          "    {",
          "        let mut buf = &mut dst[..];",
          "        buf.put_bytes(b'a', 7);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut dst = [0; 6];",
          "    let mut buf = &mut dst[..];",
          "    buf.put_bytes(b'a', 7);",
          "    }).is_err());",
          "    ",
          "    let mut dst = [0; 6];",
          "    let mut buf = &mut dst[..];",
          "    buf.put_bytes(b'a', 6);",
          "    assert_eq!(b\"aaaaaa\", &dst);",
          "    ",
          "    let mut dst = [0; 6];",
          "    let mut buf = &mut dst[..];",
          "    buf.put_bytes(b'a', 0);",
          "    assert_eq!(b\"\\0\\0\\0\\0\\0\\0\", &dst);"
        ],
        "code": [
          "{",
          "    let mut dst = [0; 6];",
          "    {",
          "        let mut buf = &mut dst[..];",
          "        buf.put_bytes(b'a', 7);",
          "    }",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut dst = [0; 6];",
          "    let mut buf = &mut dst[..];",
          "    buf.put_bytes(b'a', 7);",
          "    }).is_err());",
          "    ",
          "    let mut dst = [0; 6];",
          "    let mut buf = &mut dst[..];",
          "    buf.put_bytes(b'a', 6);",
          "    assert_eq!(b\"aaaaaa\", &dst);",
          "    ",
          "    let mut dst = [0; 6];",
          "    let mut buf = &mut dst[..];",
          "    buf.put_bytes(b'a', 0);",
          "    assert_eq!(b\"\\0\\0\\0\\0\\0\\0\", &dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut dst = [0; 6];",
          "    {",
          "        let mut buf = &mut dst[..];",
          "        buf.put_bytes(b'a', 0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(b\"\\0\\0\\0\\0\\0\\0\", &dst);",
          "    assert_eq!(2, buf.remaining_mut());",
          "    assert!(panic_advance_called);",
          "    assert!(self.remaining_mut() >= cnt);",
          "    assert!(cnt == 0);"
        ],
        "code": [
          "{",
          "    let mut dst = [0; 6];",
          "    {",
          "        let mut buf = &mut dst[..];",
          "        buf.put_bytes(b'a', 0);",
          "    }",
          "    assert_eq!(b\"\\0\\0\\0\\0\\0\\0\", &dst);",
          "    assert_eq!(2, buf.remaining_mut());",
          "    assert!(panic_advance_called);",
          "    assert!(self.remaining_mut() >= cnt);",
          "    assert!(cnt == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]