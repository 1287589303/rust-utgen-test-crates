[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: [u8; 5],",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for TestBuf {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            UninitSlice::new(&mut self.data[self.position..])",
          "        }",
          "        ",
          "        fn put_u8(&mut self, _n: u8) {}",
          "    }",
          "    ",
          "    let mut buf = TestBuf { data: [0; 5], position: 0 };",
          "    buf.put_bytes(b'a', 6); // Panic expected",
          "}"
        ],
        "oracle": [
          "    assert_panics!(buf.put_bytes(b'a', 6));",
          "    assert_eq!(buf.remaining_mut(), 5);",
          "    assert_eq!(buf.data, [0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: [u8; 5],",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for TestBuf {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            UninitSlice::new(&mut self.data[self.position..])",
          "        }",
          "        ",
          "        fn put_u8(&mut self, _n: u8) {}",
          "    }",
          "    ",
          "    let mut buf = TestBuf { data: [0; 5], position: 0 };",
          "    buf.put_bytes(b'a', 6); // Panic expected",
          "    assert_panics!(buf.put_bytes(b'a', 6));",
          "    assert_eq!(buf.remaining_mut(), 5);",
          "    assert_eq!(buf.data, [0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: [u8; 10],",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for TestBuf {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            UninitSlice::new(&mut self.data[self.position..])",
          "        }",
          "",
          "        fn put_u8(&mut self, _n: u8) {}",
          "    }",
          "    ",
          "    let mut buf = TestBuf { data: [0; 10], position: 5 };",
          "    buf.put_bytes(b'b', 6); // Panic expected",
          "}"
        ],
        "oracle": [
          "    panic_advance(&TryGetError { requested: 6, available: 5 });",
          "    ",
          "    assert_eq!(buf.position, 5);",
          "    ",
          "    assert_eq!(buf.data, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: [u8; 10],",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for TestBuf {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            UninitSlice::new(&mut self.data[self.position..])",
          "        }",
          "",
          "        fn put_u8(&mut self, _n: u8) {}",
          "    }",
          "    ",
          "    let mut buf = TestBuf { data: [0; 10], position: 5 };",
          "    buf.put_bytes(b'b', 6); // Panic expected",
          "    panic_advance(&TryGetError { requested: 6, available: 5 });",
          "    ",
          "    assert_eq!(buf.position, 5);",
          "    ",
          "    assert_eq!(buf.data, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: [u8; 15],",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for TestBuf {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            UninitSlice::new(&mut self.data[self.position..])",
          "        }",
          "",
          "        fn put_u8(&mut self, _n: u8) {}",
          "    }",
          "    ",
          "    let mut buf = TestBuf { data: [0; 15], position: 10 };",
          "    buf.put_bytes(b'c', 6); // Panic expected",
          "}"
        ],
        "oracle": [
          "    assert_panics!(|| buf.put_bytes(b'c', 6));",
          "    assert_eq!(buf.position, 10);",
          "    assert_eq!(buf.data, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(buf.remaining_mut(), 5);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: [u8; 15],",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for TestBuf {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            UninitSlice::new(&mut self.data[self.position..])",
          "        }",
          "",
          "        fn put_u8(&mut self, _n: u8) {}",
          "    }",
          "    ",
          "    let mut buf = TestBuf { data: [0; 15], position: 10 };",
          "    buf.put_bytes(b'c', 6); // Panic expected",
          "    assert_panics!(|| buf.put_bytes(b'c', 6));",
          "    assert_eq!(buf.position, 10);",
          "    assert_eq!(buf.data, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(buf.remaining_mut(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]