[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = [0; 4];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 4);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf, [b'a', b'a', b'a', b'a']);",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    slice.put_bytes(b'b', 0);",
          "    assert_eq!(buf, [b'a', b'a', b'a', b'a']);",
          "    assert_panics!(slice.put_bytes(b'a', 1));",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    assert_panics!(slice.put_bytes(b'a', 5));"
        ],
        "code": [
          "{",
          "    let mut buf = [0; 4];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 4);",
          "    }",
          "    assert_eq!(buf, [b'a', b'a', b'a', b'a']);",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    slice.put_bytes(b'b', 0);",
          "    assert_eq!(buf, [b'a', b'a', b'a', b'a']);",
          "    assert_panics!(slice.put_bytes(b'a', 1));",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    assert_panics!(slice.put_bytes(b'a', 5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = [0; 1];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 1);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf[0], b'a');",
          "    assert_eq!(buf[1], 0);",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    assert!(panic_caught);  // used for testing panic when self.remaining_mut() < cnt",
          "    slice.put_bytes(b'a', 2);  // This line triggers panic",
          "    assert!(slice.remaining_mut() >= 1);   // after put_bytes for 1 byte",
          "    assert!(slice.remaining_mut() == 0);   // after fully using the buffer",
          "    slice.put_bytes(b'a', 0);  // Should not panic with 0 count"
        ],
        "code": [
          "{",
          "    let mut buf = [0; 1];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 1);",
          "    }",
          "    assert_eq!(buf[0], b'a');",
          "    assert_eq!(buf[1], 0);",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    assert!(panic_caught);  // used for testing panic when self.remaining_mut() < cnt",
          "    slice.put_bytes(b'a', 2);  // This line triggers panic",
          "    assert!(slice.remaining_mut() >= 1);   // after put_bytes for 1 byte",
          "    assert!(slice.remaining_mut() == 0);   // after fully using the buffer",
          "    slice.put_bytes(b'a', 0);  // Should not panic with 0 count",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = [0; 2];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 2);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0, buf.remaining_mut());",
          "    assert_eq!(b\"aa\", &buf);",
          "    let mut buf_empty = [0; 2];",
          "    let mut slice_empty = &mut buf_empty[..];",
          "    slice_empty.put_bytes(b'a', 2);",
          "    assert_eq!(0, slice_empty.remaining_mut());",
          "    assert_eq!(b\"aa\", &buf_empty);"
        ],
        "code": [
          "{",
          "    let mut buf = [0; 2];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 2);",
          "    }",
          "    assert_eq!(0, buf.remaining_mut());",
          "    assert_eq!(b\"aa\", &buf);",
          "    let mut buf_empty = [0; 2];",
          "    let mut slice_empty = &mut buf_empty[..];",
          "    slice_empty.put_bytes(b'a', 2);",
          "    assert_eq!(0, slice_empty.remaining_mut());",
          "    assert_eq!(b\"aa\", &buf_empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = [0; 3];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 3);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf, [b'a', b'a', b'a']);",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    assert!(std::panic::catch_unwind(|| slice.put_bytes(b'a', 1)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = [0; 3];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 3);",
          "    }",
          "    assert_eq!(buf, [b'a', b'a', b'a']);",
          "    assert_eq!(slice.remaining_mut(), 0);",
          "    assert!(std::panic::catch_unwind(|| slice.put_bytes(b'a', 1)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = [0; 6];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf, [0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(slice.remaining_mut(), 6);",
          "    assert_eq!(slice.len(), 6);",
          "    assert_eq!(slice.chunk_mut().len(), 6);",
          "    assert!(slice.has_remaining_mut());"
        ],
        "code": [
          "{",
          "    let mut buf = [0; 6];",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 0);",
          "    }",
          "    assert_eq!(buf, [0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(slice.remaining_mut(), 6);",
          "    assert_eq!(slice.len(), 6);",
          "    assert_eq!(slice.chunk_mut().len(), 6);",
          "    assert!(slice.has_remaining_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = [0; 0]; // remaining_mut() = 0",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 1); // panic case, cnt = 1",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining_mut(), 0); // Verify remaining capacity is 0 before operation",
          "    assert!(std::panic::catch_unwind(|| slice.put_bytes(b'a', 1)).is_err()); // Ensure panic occurs for insufficient capacity",
          "    buf[0] == 0; // Ensure buffer remains unchanged after panic"
        ],
        "code": [
          "{",
          "    let mut buf = [0; 0]; // remaining_mut() = 0",
          "    {",
          "        let mut slice = &mut buf[..];",
          "        slice.put_bytes(b'a', 1); // panic case, cnt = 1",
          "    }",
          "    assert_eq!(buf.remaining_mut(), 0); // Verify remaining capacity is 0 before operation",
          "    assert!(std::panic::catch_unwind(|| slice.put_bytes(b'a', 1)).is_err()); // Ensure panic occurs for insufficient capacity",
          "    buf[0] == 0; // Ensure buffer remains unchanged after panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]