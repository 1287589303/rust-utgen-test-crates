[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 hello\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(0.0));",
          "    assert_eq!(buf.remaining(), 7);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(1.2));",
          "    assert_eq!(buf.remaining(), 7);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf.remaining(), 7);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 6 }));",
          "    assert_eq!(buf.remaining(), 6);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x40\\x59\\x0C\\xCC\\xCC\\xCC\\xCC\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(3.14159));",
          "    assert_eq!(buf.remaining(), 1);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(0.0));",
          "    assert_eq!(buf.remaining(), 1);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 hello\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(0.0));",
          "    assert_eq!(buf.remaining(), 7);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(1.2));",
          "    assert_eq!(buf.remaining(), 7);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf.remaining(), 7);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 6 }));",
          "    assert_eq!(buf.remaining(), 6);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x40\\x59\\x0C\\xCC\\xCC\\xCC\\xCC\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(3.14159));",
          "    assert_eq!(buf.remaining(), 1);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(0.0));",
          "    assert_eq!(buf.remaining(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(f64::from_bits(0x7FF8000000000000)));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(f64::from_bits(0x7FF8000000000000)));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(3.141592653589793));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(3.141592653589793));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(3.141592653589793));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x40\\x09\\x21\\xf9\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(3.141592653589793));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]