[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 1 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 2 }));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 2 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError{requested: 8, available: 3}));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError{requested: 8, available: 3}));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError{ requested: 8, available: 4 }));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError{ requested: 8, available: 4 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
          "    assert_eq!(buf.remaining(), 5);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
          "    assert_eq!(buf.remaining(), 7);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 5 }));",
          "    assert_eq!(buf.remaining(), 5);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 8, available: 7 }));",
          "    assert_eq!(buf.remaining(), 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(1.2));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 7 }));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x33\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let result = buf.try_get_f64_le();",
          "    assert_eq!(result, Ok(1.2));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.try_get_f64_le(), Err(TryGetError { requested: 8, available: 7 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]