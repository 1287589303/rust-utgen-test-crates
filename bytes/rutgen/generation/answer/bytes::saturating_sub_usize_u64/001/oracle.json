[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 100; // arbitrary usize value",
          "    let b: u64 = usize::MAX as u64 + 1; // b is greater than usize::MAX to trigger Err",
          "    saturating_sub_usize_u64(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(saturating_sub_usize_u64(100, usize::MAX as u64 + 1), 0);"
        ],
        "code": [
          "{",
          "    let a: usize = 100; // arbitrary usize value",
          "    let b: u64 = usize::MAX as u64 + 1; // b is greater than usize::MAX to trigger Err",
          "    saturating_sub_usize_u64(a, b);",
          "    assert_eq!(saturating_sub_usize_u64(100, usize::MAX as u64 + 1), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: usize = 0; // edge case",
          "    let b: u64 = u64::MAX; // b is a high value, provoking Err",
          "    saturating_sub_usize_u64(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(saturating_sub_usize_u64(0, u64::MAX), 0);"
        ],
        "code": [
          "{",
          "    let a: usize = 0; // edge case",
          "    let b: u64 = u64::MAX; // b is a high value, provoking Err",
          "    saturating_sub_usize_u64(a, b);",
          "    assert_eq!(saturating_sub_usize_u64(0, u64::MAX), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]