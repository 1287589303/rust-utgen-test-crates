[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = 10_usize;",
          "    let b = 5_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 5_u64), 5_usize);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 10_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 15_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(5_usize, 3_u64), 2_usize);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 0_u64), 0_usize);"
        ],
        "code": [
          "{",
          "    let a = 10_usize;",
          "    let b = 5_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 5_u64), 5_usize);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 10_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 15_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(5_usize, 3_u64), 2_usize);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 0_u64), 0_usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = 5_usize;",
          "    let b = 5_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(saturating_sub_usize_u64(5_usize, 5_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 5_u64), 5);",
          "    assert_eq!(saturating_sub_usize_u64(5_usize, u64::MAX), 0);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 10_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(7_usize, 3_u64), 4);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, usize::MAX as u64), 0);"
        ],
        "code": [
          "{",
          "    let a = 5_usize;",
          "    let b = 5_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "    assert_eq!(saturating_sub_usize_u64(5_usize, 5_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 5_u64), 5);",
          "    assert_eq!(saturating_sub_usize_u64(5_usize, u64::MAX), 0);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 10_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(7_usize, 3_u64), 4);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, usize::MAX as u64), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = usize::MAX;",
          "    let b = 1_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(10, 5_u64), 5);",
          "    assert_eq!(saturating_sub_usize_u64(20, 10_u64), 10);",
          "    assert_eq!(saturating_sub_usize_u64(0, 0_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(5, 5_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(100, 99_u64), 1);",
          "    assert_eq!(saturating_sub_usize_u64(50, 51_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, usize::MAX as u64), 0);"
        ],
        "code": [
          "{",
          "    let a = usize::MAX;",
          "    let b = 1_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(10, 5_u64), 5);",
          "    assert_eq!(saturating_sub_usize_u64(20, 10_u64), 10);",
          "    assert_eq!(saturating_sub_usize_u64(0, 0_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(5, 5_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(100, 99_u64), 1);",
          "    assert_eq!(saturating_sub_usize_u64(50, 51_u64), 0);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, usize::MAX as u64), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = 15_usize;",
          "    let b = usize::MAX as u64;",
          "    saturating_sub_usize_u64(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 10_u64), 5_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 15_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 16_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 0_u64), 15_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, usize::MAX as u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, usize::MAX as u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 1_u64), 0_usize);"
        ],
        "code": [
          "{",
          "    let a = 15_usize;",
          "    let b = usize::MAX as u64;",
          "    saturating_sub_usize_u64(a, b);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 10_u64), 5_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 15_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 16_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 0_u64), 15_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, usize::MAX as u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, usize::MAX as u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 1_u64), 0_usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = 20_usize;",
          "    let b = 0_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(saturating_sub_usize_u64(20_usize, 0_u64), 20_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 10_u64), 5_usize);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 10_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(5_usize, 6_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 0_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, u64::MAX), 0_usize);"
        ],
        "code": [
          "{",
          "    let a = 20_usize;",
          "    let b = 0_u64;",
          "    saturating_sub_usize_u64(a, b);",
          "    assert_eq!(saturating_sub_usize_u64(20_usize, 0_u64), 20_usize);",
          "    assert_eq!(saturating_sub_usize_u64(15_usize, 10_u64), 5_usize);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, 10_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(5_usize, 6_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(0_usize, 0_u64), 0_usize);",
          "    assert_eq!(saturating_sub_usize_u64(usize::MAX, 1_u64), usize::MAX - 1);",
          "    assert_eq!(saturating_sub_usize_u64(10_usize, u64::MAX), 0_usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]