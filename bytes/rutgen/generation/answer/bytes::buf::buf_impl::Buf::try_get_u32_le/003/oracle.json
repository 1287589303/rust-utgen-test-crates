[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\xA1\\xA0\\x09\\x08\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(remaining, 0);",
          "    assert_eq!(result, Ok(0x0809A0A1_u32));",
          "    buf.advance(4);",
          "    assert!(buf.has_remaining());",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\xA1\\xA0\\x09\\x08\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(remaining, 0);",
          "    assert_eq!(result, Ok(0x0809A0A1_u32));",
          "    buf.advance(4);",
          "    assert!(buf.has_remaining());",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0809A0A1_u32), buf.try_get_u32_le());",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_u32_le());",
          "    assert_eq!(3, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x0809A0A1_u32), buf.try_get_u32_le());",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_u32_le());",
          "    assert_eq!(3, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\xA1\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 1);",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));",
          "    buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    assert_eq!(result, Ok(0x0809A0A1_u32));",
          "    assert_eq!(buf.remaining(), 6);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\xA1\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.remaining(), 1);",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));",
          "    buf = &b\"\\xA1\\xA0\\x09\\x08 hello\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    assert_eq!(result, Ok(0x0809A0A1_u32));",
          "    assert_eq!(buf.remaining(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\xA1\\xA0\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_u32_le());",
          "    assert_eq!(2, remaining);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\xA1\\xA0\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_u32_le());",
          "    assert_eq!(2, remaining);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\xA1\\xA0\\x09\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x090A0A1_u32), buf.try_get_u32_le());",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), result);",
          "    assert_eq!(remaining, 3);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\xA1\\xA0\\x09\"[..];",
          "    let result = buf.try_get_u32_le();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x090A0A1_u32), buf.try_get_u32_le());",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), result);",
          "    assert_eq!(remaining, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]