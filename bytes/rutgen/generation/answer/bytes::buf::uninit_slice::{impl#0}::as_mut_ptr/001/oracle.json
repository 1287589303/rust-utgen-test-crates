[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 1] = [MaybeUninit::uninit()];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "}"
        ],
        "oracle": [
          "    let mut data: [MaybeUninit<u8>; 1] = [MaybeUninit::uninit()];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, data.as_mut_ptr() as *mut u8);"
        ],
        "code": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 1] = [MaybeUninit::uninit()];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    let mut data: [MaybeUninit<u8>; 1] = [MaybeUninit::uninit()];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, data.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 10] = [MaybeUninit::uninit(); 10];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "}"
        ],
        "oracle": [
          "    let data: [MaybeUninit<u8>; 10] = [MaybeUninit::uninit(); 10];",
          "    let slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, (&data as *const _ as *mut _));",
          "    assert!(!ptr.is_null());",
          "    assert_eq!(slice.len(), 10);"
        ],
        "code": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 10] = [MaybeUninit::uninit(); 10];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    let data: [MaybeUninit<u8>; 10] = [MaybeUninit::uninit(); 10];",
          "    let slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, (&data as *const _ as *mut _));",
          "    assert!(!ptr.is_null());",
          "    assert_eq!(slice.len(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 100] = [MaybeUninit::uninit(); 100];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "}"
        ],
        "oracle": [
          "    let mut data: [MaybeUninit<u8>; 100] = [MaybeUninit::uninit(); 100];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, data.as_mut_ptr());",
          "    assert!(ptr.is_non_null());",
          "    assert!(ptr as usize % core::mem::align_of::<u8>() == 0);",
          "    assert!(ptr >= data.as_mut_ptr() && ptr < unsafe { data.as_mut_ptr().add(data.len()) });",
          "    assert!(unsafe { *ptr }.is_uninit());"
        ],
        "code": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 100] = [MaybeUninit::uninit(); 100];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    let mut data: [MaybeUninit<u8>; 100] = [MaybeUninit::uninit(); 100];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, data.as_mut_ptr());",
          "    assert!(ptr.is_non_null());",
          "    assert!(ptr as usize % core::mem::align_of::<u8>() == 0);",
          "    assert!(ptr >= data.as_mut_ptr() && ptr < unsafe { data.as_mut_ptr().add(data.len()) });",
          "    assert!(unsafe { *ptr }.is_uninit());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 512] = [MaybeUninit::uninit(); 512];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "}"
        ],
        "oracle": [
          "    let mut data: [MaybeUninit<u8>; 512] = [MaybeUninit::uninit(); 512];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, data.as_mut_ptr());",
          "    assert!(!ptr.is_null());",
          "    assert_eq!(unsafe { ptr.add(512).is_null() }, true);"
        ],
        "code": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 512] = [MaybeUninit::uninit(); 512];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    let mut data: [MaybeUninit<u8>; 512] = [MaybeUninit::uninit(); 512];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, data.as_mut_ptr());",
          "    assert!(!ptr.is_null());",
          "    assert_eq!(unsafe { ptr.add(512).is_null() }, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 1024] = [MaybeUninit::uninit(); 1024];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "}"
        ],
        "oracle": [
          "    *let mut data: [MaybeUninit<u8>; 1024] = [MaybeUninit::uninit(); 1024];*",
          "    *let mut slice = UninitSlice::uninit(&mut data);*",
          "    *let ptr = slice.as_mut_ptr();*",
          "    *assert_eq!(ptr, data.as_mut_ptr() as *mut u8);*",
          "    *assert!(ptr != core::ptr::null_mut());*"
        ],
        "code": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 1024] = [MaybeUninit::uninit(); 1024];",
          "    let mut slice = UninitSlice::uninit(&mut data);",
          "    let ptr = slice.as_mut_ptr();",
          "    *let mut data: [MaybeUninit<u8>; 1024] = [MaybeUninit::uninit(); 1024];*",
          "    *let mut slice = UninitSlice::uninit(&mut data);*",
          "    *let ptr = slice.as_mut_ptr();*",
          "    *assert_eq!(ptr, data.as_mut_ptr() as *mut u8);*",
          "    *assert!(ptr != core::ptr::null_mut());*",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]