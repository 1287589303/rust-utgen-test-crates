[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec_deque = VecDeque::from(vec![1, 2, 3]);",
          "    let mut dst: [io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let mut vec_deque = VecDeque::from(vec![1, 2, 3]);",
          "    let mut dst: [io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let mut vec_deque = VecDeque::from(vec![1, 2, 3]);",
          "    let mut dst: [io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut dst);",
          "    let mut vec_deque = VecDeque::from(vec![1, 2, 3]);",
          "    let mut dst: [io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec_deque = VecDeque::from(vec![10]);",
          "    let mut dst: [io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    assert!(dst[0].len() > 0);",
          "    assert!(dst[1].is_empty());",
          "    assert!(!vec_deque.is_empty());",
          "    assert!(!dst.is_empty());"
        ],
        "code": [
          "{",
          "    let mut vec_deque = VecDeque::from(vec![10]);",
          "    let mut dst: [io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 1);",
          "    assert!(dst[0].len() > 0);",
          "    assert!(dst[1].is_empty());",
          "    assert!(!vec_deque.is_empty());",
          "    assert!(!dst.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]