[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buf: VecDeque<u8> = VecDeque::new();",
          "    let mut dst = vec![io::IoSlice::new(&[]); 2];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let buf: VecDeque<u8> = VecDeque::new();",
          "    let mut dst = vec![io::IoSlice::new(&[]); 2];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buf: VecDeque<u8> = VecDeque::new();",
          "    let mut dst = vec![io::IoSlice::new(&[0u8]); 2];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let buf: VecDeque<u8> = VecDeque::new();",
          "    let mut dst = vec![io::IoSlice::new(&[0u8]); 2];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let buf: VecDeque<u8> = VecDeque::from(vec![1, 2, 3]);",
          "    let mut dst = vec![];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "}"
        ],
        "oracle": [
          "    let buf: VecDeque<u8> = VecDeque::from(vec![]);",
          "    let mut dst = vec![];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let buf: VecDeque<u8> = VecDeque::from(vec![1, 2, 3]);",
          "    let mut dst = vec![];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "    let buf: VecDeque<u8> = VecDeque::from(vec![]);",
          "    let mut dst = vec![];",
          "    let result = buf.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]