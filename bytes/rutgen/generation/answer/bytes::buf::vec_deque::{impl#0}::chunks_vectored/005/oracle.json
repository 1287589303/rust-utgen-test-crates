[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        inner: VecDeque<u8>,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.inner.len()",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            self.inner.as_slices().0",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            for _ in 0..cnt {",
          "                self.inner.pop_front();",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { ",
          "        inner: VecDeque::from(vec![1, 2, 3, 4, 5, 6]) ",
          "    };",
          "    let mut dst = vec![io::IoSlice::new(&[]); 2]; // preallocate space for two slices",
          "    let result = buf.chunks_vectored(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 2);",
          "    assert!(!buf.inner.is_empty());",
          "    assert!(!dst.is_empty());",
          "    assert!(buf.inner.len() > 1);",
          "    assert!(dst.len() == 2);",
          "    assert_eq!(dst[0].len(), 6);",
          "    assert_eq!(dst[1].len(), 0);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        inner: VecDeque<u8>,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.inner.len()",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            self.inner.as_slices().0",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            for _ in 0..cnt {",
          "                self.inner.pop_front();",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { ",
          "        inner: VecDeque::from(vec![1, 2, 3, 4, 5, 6]) ",
          "    };",
          "    let mut dst = vec![io::IoSlice::new(&[]); 2]; // preallocate space for two slices",
          "    let result = buf.chunks_vectored(&mut dst);",
          "    assert_eq!(result, 2);",
          "    assert!(!buf.inner.is_empty());",
          "    assert!(!dst.is_empty());",
          "    assert!(buf.inner.len() > 1);",
          "    assert!(dst.len() == 2);",
          "    assert_eq!(dst[0].len(), 6);",
          "    assert_eq!(dst[1].len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]