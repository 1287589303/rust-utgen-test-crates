[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![1, 2, 3, 4]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "}"
        ],
        "oracle": [
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![1, 2, 3, 4]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "    assert_eq!(result, 1);"
        ],
        "code": [
          "{",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![1, 2, 3, 4]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![1, 2, 3, 4]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "    assert_eq!(result, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![5, 6, 7, 8]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "}"
        ],
        "oracle": [
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![5, 6, 7, 8]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "    assert_eq!(result, 1);",
          "    assert!(!vec_deque.is_empty());",
          "    assert!(!io_slices.is_empty());",
          "    let (s1, s2) = vec_deque.as_slices();",
          "    assert!(!s2.is_empty());",
          "    assert!(io_slices.len() > 1);"
        ],
        "code": [
          "{",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![5, 6, 7, 8]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![5, 6, 7, 8]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "    assert_eq!(result, 1);",
          "    assert!(!vec_deque.is_empty());",
          "    assert!(!io_slices.is_empty());",
          "    let (s1, s2) = vec_deque.as_slices();",
          "    assert!(!s2.is_empty());",
          "    assert!(io_slices.len() > 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![9; 100]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "}"
        ],
        "oracle": [
          "    assert!(result == 1);",
          "    assert!(io_slices[0].len() > 0);",
          "    assert!(io_slices[1].len() > 0);",
          "    assert!(io_slices[1].len() > io_slices[0].len());"
        ],
        "code": [
          "{",
          "    let mut vec_deque: VecDeque<u8> = VecDeque::from(vec![9; 100]);",
          "    let mut io_slices: [std::io::IoSlice; 2] = Default::default();",
          "    let result = vec_deque.chunks_vectored(&mut io_slices);",
          "    assert!(result == 1);",
          "    assert!(io_slices[0].len() > 0);",
          "    assert!(io_slices[1].len() > 0);",
          "    assert!(io_slices[1].len() > io_slices[0].len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]