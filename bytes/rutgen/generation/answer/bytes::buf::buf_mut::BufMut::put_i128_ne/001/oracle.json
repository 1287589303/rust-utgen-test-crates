[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleBuf {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl SimpleBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                pos: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::new_uninit_slice(&mut self.data[self.pos..])",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"Not enough capacity\");",
          "            }",
          "            let cnt = src.len();",
          "            self.data[self.pos..self.pos + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) }",
          "        }",
          "    }",
          "",
          "    let mut buf = SimpleBuf::new(16);",
          "    buf.put_i128_ne(0x01020304050607080910111213141516);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.data, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");",
          "    assert_eq!(buf.pos, 16);",
          "    let mut buf2 = SimpleBuf::new(15);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf2.put_i128_ne(0x01020304050607080910111213141516);",
          "    });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    struct SimpleBuf {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl SimpleBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                pos: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::new_uninit_slice(&mut self.data[self.pos..])",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"Not enough capacity\");",
          "            }",
          "            let cnt = src.len();",
          "            self.data[self.pos..self.pos + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) }",
          "        }",
          "    }",
          "",
          "    let mut buf = SimpleBuf::new(16);",
          "    buf.put_i128_ne(0x01020304050607080910111213141516);",
          "    assert_eq!(buf.data, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");",
          "    assert_eq!(buf.pos, 16);",
          "    let mut buf2 = SimpleBuf::new(15);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf2.put_i128_ne(0x01020304050607080910111213141516);",
          "    });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleBuf {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl SimpleBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                pos: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::new_uninit_slice(&mut self.data[self.pos..])",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"Not enough capacity\");",
          "            }",
          "            let cnt = src.len();",
          "            self.data[self.pos..self.pos + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) }",
          "        }",
          "    }",
          "",
          "    let mut buf = SimpleBuf::new(16);",
          "    buf.put_i128_ne(-0x01020304050607080910111213141516);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.data, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");",
          "    ",
          "    let mut buf_overflow = SimpleBuf::new(15);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf_overflow.put_i128_ne(0x01020304050607080910111213141516);",
          "    });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf_edge_case = SimpleBuf::new(16);",
          "    buf_edge_case.put_i128_ne(0);",
          "    assert_eq!(buf_edge_case.data, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");"
        ],
        "code": [
          "{",
          "    struct SimpleBuf {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl SimpleBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                pos: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::new_uninit_slice(&mut self.data[self.pos..])",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"Not enough capacity\");",
          "            }",
          "            let cnt = src.len();",
          "            self.data[self.pos..self.pos + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) }",
          "        }",
          "    }",
          "",
          "    let mut buf = SimpleBuf::new(16);",
          "    buf.put_i128_ne(-0x01020304050607080910111213141516);",
          "    assert_eq!(buf.data, b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\");",
          "    ",
          "    let mut buf_overflow = SimpleBuf::new(15);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf_overflow.put_i128_ne(0x01020304050607080910111213141516);",
          "    });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf_edge_case = SimpleBuf::new(16);",
          "    buf_edge_case.put_i128_ne(0);",
          "    assert_eq!(buf_edge_case.data, b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct SimpleBuf {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl SimpleBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                pos: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::new_uninit_slice(&mut self.data[self.pos..])",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"Not enough capacity\");",
          "            }",
          "            let cnt = src.len();",
          "            self.data[self.pos..self.pos + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) }",
          "        }",
          "    }",
          "",
          "    let mut buf = SimpleBuf::new(15);",
          "    buf.put_i128_ne(0x01020304050607080910111213141516);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining_mut(), 15);",
          "    assert_eq!(buf.data, vec![0; 15]);",
          "    buf.put_slice(&0x01020304050607080910111213141516.to_ne_bytes());",
          "    assert!(panic_does_not_fit());",
          "    assert_eq!(buf.pos, 0);",
          "    assert_eq!(buf.data[0..16], &[0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]);",
          "    assert!(buf.remaining_mut() < 16);"
        ],
        "code": [
          "{",
          "    struct SimpleBuf {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl SimpleBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                pos: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::new_uninit_slice(&mut self.data[self.pos..])",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"Not enough capacity\");",
          "            }",
          "            let cnt = src.len();",
          "            self.data[self.pos..self.pos + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) }",
          "        }",
          "    }",
          "",
          "    let mut buf = SimpleBuf::new(15);",
          "    buf.put_i128_ne(0x01020304050607080910111213141516);",
          "    assert_eq!(buf.remaining_mut(), 15);",
          "    assert_eq!(buf.data, vec![0; 15]);",
          "    buf.put_slice(&0x01020304050607080910111213141516.to_ne_bytes());",
          "    assert!(panic_does_not_fit());",
          "    assert_eq!(buf.pos, 0);",
          "    assert_eq!(buf.data[0..16], &[0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]);",
          "    assert!(buf.remaining_mut() < 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]