[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);"
        ],
        "code": [
          "{",
          "    let vec = vec![];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 0,",
          "        cap: 0,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);",
          "    assert!(vec.is_empty());",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert!(bytes_mut.ptr.is_null());",
          "    assert!(bytes_mut.data.is_null());",
          "    assert!(bytes_mut.remaining_mut() == 0);",
          "    assert!(bytes_mut.has_remaining_mut() == false);"
        ],
        "code": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 0,",
          "        cap: 0,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);",
          "    assert!(vec.is_empty());",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert!(bytes_mut.ptr.is_null());",
          "    assert!(bytes_mut.data.is_null());",
          "    assert!(bytes_mut.remaining_mut() == 0);",
          "    assert!(bytes_mut.has_remaining_mut() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);"
        ],
        "code": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![1, 2];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);"
        ],
        "code": [
          "{",
          "    let vec = vec![1, 2];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![1, 2, 3, 4];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);"
        ],
        "code": [
          "{",
          "    let vec = vec![1, 2, 3, 4];",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 5,",
          "        data: ptr::null_mut(),",
          "    };",
          "    vec.partial_cmp(&bytes_mut);",
          "    assert_eq!(vec.partial_cmp(&bytes_mut), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]