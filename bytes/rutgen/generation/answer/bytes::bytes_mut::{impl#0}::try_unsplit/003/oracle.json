[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::with_capacity(10);",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(1);",
          "        }",
          "        bytes_mut",
          "    };",
          "    ",
          "    let other_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::new();",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(1);",
          "        }",
          "        bytes_mut",
          "    };",
          "    ",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(other_bytes_mut));"
        ],
        "code": [
          "{",
          "    let mut self_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::with_capacity(10);",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(1);",
          "        }",
          "        bytes_mut",
          "    };",
          "    ",
          "    let other_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::new();",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(1);",
          "        }",
          "        bytes_mut",
          "    };",
          "    ",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    assert_eq!(result, Err(other_bytes_mut));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::with_capacity(20);",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(2);",
          "        }",
          "        bytes_mut",
          "    };",
          "",
          "    let other_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::new();",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(2);",
          "        }",
          "        bytes_mut",
          "    };",
          "    ",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "}"
        ],
        "oracle": [
          "    let mut self_bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe { self_bytes_mut.promote_to_shared(2); }",
          "    let other_bytes_mut = BytesMut::new();",
          "    unsafe { other_bytes_mut.promote_to_shared(2); }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    assert_eq!(result, Err(other_bytes_mut));"
        ],
        "code": [
          "{",
          "    let mut self_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::with_capacity(20);",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(2);",
          "        }",
          "        bytes_mut",
          "    };",
          "",
          "    let other_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::new();",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(2);",
          "        }",
          "        bytes_mut",
          "    };",
          "    ",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    let mut self_bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe { self_bytes_mut.promote_to_shared(2); }",
          "    let other_bytes_mut = BytesMut::new();",
          "    unsafe { other_bytes_mut.promote_to_shared(2); }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    assert_eq!(result, Err(other_bytes_mut));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::with_capacity(15);",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(3);",
          "        }",
          "        bytes_mut",
          "    };",
          "",
          "    let other_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::new();",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(4);",
          "        }",
          "        bytes_mut",
          "    };",
          "",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(other_bytes_mut));"
        ],
        "code": [
          "{",
          "    let mut self_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::with_capacity(15);",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(3);",
          "        }",
          "        bytes_mut",
          "    };",
          "",
          "    let other_bytes_mut = {",
          "        let mut bytes_mut = BytesMut::new();",
          "        unsafe {",
          "            bytes_mut.promote_to_shared(4);",
          "        }",
          "        bytes_mut",
          "    };",
          "",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    assert_eq!(result, Err(other_bytes_mut));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]