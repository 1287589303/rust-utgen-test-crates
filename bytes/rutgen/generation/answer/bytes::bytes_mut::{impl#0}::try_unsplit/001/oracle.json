[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_bytes_mut = BytesMut::with_capacity(10);",
          "    let other_bytes_mut = BytesMut::with_capacity(5);",
          "    unsafe {",
          "        self_bytes_mut.set_len(0);",
          "        self_bytes_mut.ptr = NonNull::new_unchecked(other_bytes_mut.ptr.as_ptr());",
          "    }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut self_bytes_mut = BytesMut::with_capacity(10);",
          "    let other_bytes_mut = BytesMut::with_capacity(5);",
          "    unsafe {",
          "        self_bytes_mut.set_len(0);",
          "        self_bytes_mut.ptr = NonNull::new_unchecked(other_bytes_mut.ptr.as_ptr());",
          "    }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_bytes_mut = BytesMut::with_capacity(usize::MAX >> 5);",
          "    let other_bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe {",
          "        self_bytes_mut.set_len(self_bytes_mut.capacity());",
          "        self_bytes_mut.ptr = NonNull::new_unchecked(other_bytes_mut.ptr.as_ptr());",
          "    }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), other_bytes_mut);",
          "    assert_eq!(self_bytes_mut.len(), self_bytes_mut.capacity() + other_bytes_mut.len());",
          "    assert_eq!(self_bytes_mut.cap(), self_bytes_mut.cap() + other_bytes_mut.cap());",
          "    assert_eq!(self_bytes_mut.data, other_bytes_mut.data);"
        ],
        "code": [
          "{",
          "    let mut self_bytes_mut = BytesMut::with_capacity(usize::MAX >> 5);",
          "    let other_bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe {",
          "        self_bytes_mut.set_len(self_bytes_mut.capacity());",
          "        self_bytes_mut.ptr = NonNull::new_unchecked(other_bytes_mut.ptr.as_ptr());",
          "    }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), other_bytes_mut);",
          "    assert_eq!(self_bytes_mut.len(), self_bytes_mut.capacity() + other_bytes_mut.len());",
          "    assert_eq!(self_bytes_mut.cap(), self_bytes_mut.cap() + other_bytes_mut.cap());",
          "    assert_eq!(self_bytes_mut.data, other_bytes_mut.data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_bytes_mut = BytesMut::with_capacity(20);",
          "    let other_bytes_mut = BytesMut::with_capacity(15);",
          "    unsafe {",
          "        self_bytes_mut.set_len(5);",
          "        self_bytes_mut.ptr = NonNull::new_unchecked(other_bytes_mut.ptr.as_ptr());",
          "    }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let mut self_bytes_mut = BytesMut::with_capacity(20);",
          "    let other_bytes_mut = BytesMut::with_capacity(15);",
          "    unsafe {",
          "        self_bytes_mut.set_len(5);",
          "        self_bytes_mut.ptr = NonNull::new_unchecked(other_bytes_mut.ptr.as_ptr());",
          "    }",
          "    let result = self_bytes_mut.try_unsplit(other_bytes_mut);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]