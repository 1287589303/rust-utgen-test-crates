[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5]; // len = 5, cap = default capacity",
          "    let bytes = Bytes::from(vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len, 5);",
          "    assert!(unsafe { (bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK) == 0 });",
          "    assert_eq!(bytes.vtable, &SHARED_VTABLE);",
          "    assert_eq!(bytes.ptr as *const u8, vec.as_ptr());",
          "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.cap, vec.capacity());",
          "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.ref_cnt.load(Ordering::SeqCst), 1);"
        ],
        "code": [
          "{",
          "    let vec: Vec<u8> = vec![1, 2, 3, 4, 5]; // len = 5, cap = default capacity",
          "    let bytes = Bytes::from(vec);",
          "    assert_eq!(bytes.len, 5);",
          "    assert!(unsafe { (bytes.data.load(Ordering::SeqCst) as usize & KIND_MASK) == 0 });",
          "    assert_eq!(bytes.vtable, &SHARED_VTABLE);",
          "    assert_eq!(bytes.ptr as *const u8, vec.as_ptr());",
          "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.cap, vec.capacity());",
          "    assert_eq!(unsafe { *(bytes.data.load(Ordering::SeqCst) as *mut Shared) }.ref_cnt.load(Ordering::SeqCst), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
          "    vec.extend_from_slice(&[1, 2, 3, 4, 5]); // len = 5, cap = 5",
          "    let bytes = Bytes::from(vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 5);",
          "    assert_eq!(cap, 5);",
          "    assert!(len != cap);",
          "    assert!(0 == (shared as usize & KIND_MASK));",
          "    assert!(bytes.len() == 5);",
          "    assert!(bytes.ptr == vec.as_mut_ptr());",
          "    assert!(bytes.data.load(Ordering::SeqCst) != ptr::null_mut());"
        ],
        "code": [
          "{",
          "    let mut vec: Vec<u8> = Vec::with_capacity(5);",
          "    vec.extend_from_slice(&[1, 2, 3, 4, 5]); // len = 5, cap = 5",
          "    let bytes = Bytes::from(vec);",
          "    assert_eq!(len, 5);",
          "    assert_eq!(cap, 5);",
          "    assert!(len != cap);",
          "    assert!(0 == (shared as usize & KIND_MASK));",
          "    assert!(bytes.len() == 5);",
          "    assert!(bytes.ptr == vec.as_mut_ptr());",
          "    assert!(bytes.data.load(Ordering::SeqCst) != ptr::null_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec: Vec<u8> = vec![1, 2, 3, 4]; // len = 4, cap = default capacity",
          "    let alignment_check = {",
          "        let bytes = Bytes::from(vec);",
          "        let shared_ptr = bytes.data.load(Ordering::SeqCst);",
          "        shared_ptr as usize & KIND_MASK == 0",
          "    };",
          "    assert!(alignment_check);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).len, 4);",
          "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) as usize & KIND_MASK == 0);",
          "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) != ptr::null_mut());",
          "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).vtable, &SHARED_VTABLE);"
        ],
        "code": [
          "{",
          "    let vec: Vec<u8> = vec![1, 2, 3, 4]; // len = 4, cap = default capacity",
          "    let alignment_check = {",
          "        let bytes = Bytes::from(vec);",
          "        let shared_ptr = bytes.data.load(Ordering::SeqCst);",
          "        shared_ptr as usize & KIND_MASK == 0",
          "    };",
          "    assert!(alignment_check);",
          "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).len, 4);",
          "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) as usize & KIND_MASK == 0);",
          "    assert!(Bytes::from(vec![1, 2, 3, 4]).data.load(Ordering::SeqCst) != ptr::null_mut());",
          "    assert_eq!(Bytes::from(vec![1, 2, 3, 4]).vtable, &SHARED_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]