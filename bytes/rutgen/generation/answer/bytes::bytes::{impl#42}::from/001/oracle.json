[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_vec = Vec::from(&[1, 2, 3]);",
          "    let result = Bytes::from(input_vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len, 3);",
          "    assert_eq!(result.ptr, input_vec.as_ptr());",
          "    assert_eq!(result.data.load(Ordering::SeqCst) as usize % 2, 0);",
          "    assert!(unsafe { (result.data.load(Ordering::SeqCst) as *mut Shared).as_ref() }.is_some());",
          "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).cap }, 3);",
          "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).ref_cnt.load(Ordering::SeqCst) }, 1);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);"
        ],
        "code": [
          "{",
          "    let input_vec = Vec::from(&[1, 2, 3]);",
          "    let result = Bytes::from(input_vec);",
          "    assert_eq!(result.len, 3);",
          "    assert_eq!(result.ptr, input_vec.as_ptr());",
          "    assert_eq!(result.data.load(Ordering::SeqCst) as usize % 2, 0);",
          "    assert!(unsafe { (result.data.load(Ordering::SeqCst) as *mut Shared).as_ref() }.is_some());",
          "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).cap }, 3);",
          "    assert_eq!(unsafe { (*(result.data.load(Ordering::SeqCst) as *mut Shared)).ref_cnt.load(Ordering::SeqCst) }, 1);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_vec = Vec::from(&[0u8; 1024]);",
          "    let result = Bytes::from(input_vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 1024);",
          "    assert_eq!(result.ptr, input_vec.as_ptr());",
          "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert!(unsafe { (*result.data.load(Ordering::SeqCst) as *mut Shared).ref_cnt.load(Ordering::SeqCst) }, 1);",
          "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).buf } == input_vec.as_mut_ptr());",
          "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).cap } == 1024);",
          "    assert!(mem::align_of_val(&result) > 0);"
        ],
        "code": [
          "{",
          "    let input_vec = Vec::from(&[0u8; 1024]);",
          "    let result = Bytes::from(input_vec);",
          "    assert_eq!(result.len(), 1024);",
          "    assert_eq!(result.ptr, input_vec.as_ptr());",
          "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert!(unsafe { (*result.data.load(Ordering::SeqCst) as *mut Shared).ref_cnt.load(Ordering::SeqCst) }, 1);",
          "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).buf } == input_vec.as_mut_ptr());",
          "    assert!(unsafe { (*result.data.load(Ordering::SeqCst)).cap } == 1024);",
          "    assert!(mem::align_of_val(&result) > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_vec = Vec::from(&[255]);",
          "    let result = Bytes::from(input_vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len, 1);",
          "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert_eq!(result.ptr, input_vec.as_mut_ptr());"
        ],
        "code": [
          "{",
          "    let input_vec = Vec::from(&[255]);",
          "    let result = Bytes::from(input_vec);",
          "    assert_eq!(result.len, 1);",
          "    assert!(result.data.load(Ordering::SeqCst).is_null() == false);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert_eq!(result.ptr, input_vec.as_mut_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_vec = Vec::from(&[42, 43]);",
          "    let result = Bytes::from(input_vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len, 2);",
          "    assert_eq!(result.ptr, input_vec.as_ptr());",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert!(unsafe { result.data.load(Ordering::SeqCst).is_null() } == false);"
        ],
        "code": [
          "{",
          "    let input_vec = Vec::from(&[42, 43]);",
          "    let result = Bytes::from(input_vec);",
          "    assert_eq!(result.len, 2);",
          "    assert_eq!(result.ptr, input_vec.as_ptr());",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert!(unsafe { result.data.load(Ordering::SeqCst).is_null() } == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]