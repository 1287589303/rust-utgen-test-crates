[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_vec_pos(0); }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(unsafe { core::ptr::addr_of_mut!(bytes_mut.data).read() } & NOT_VEC_POS_MASK == 0);",
          "    assert!(bytes_mut.data != core::ptr::null_mut());",
          "    assert!(unsafe { bytes_mut.data } as usize <= MAX_VEC_POS);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_vec_pos(0); }",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(unsafe { core::ptr::addr_of_mut!(bytes_mut.data).read() } & NOT_VEC_POS_MASK == 0);",
          "    assert!(bytes_mut.data != core::ptr::null_mut());",
          "    assert!(unsafe { bytes_mut.data } as usize <= MAX_VEC_POS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_vec_pos(MAX_VEC_POS); }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.data as usize & NOT_VEC_POS_MASK == 0);",
          "    assert_eq!(bytes_mut.data as usize, (MAX_VEC_POS << VEC_POS_OFFSET) | (bytes_mut.data as usize & NOT_VEC_POS_MASK));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_vec_pos(MAX_VEC_POS); }",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.data as usize & NOT_VEC_POS_MASK == 0);",
          "    assert_eq!(bytes_mut.data as usize, (MAX_VEC_POS << VEC_POS_OFFSET) | (bytes_mut.data as usize & NOT_VEC_POS_MASK));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_vec_pos(MAX_VEC_POS + 1); }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(pos > MAX_VEC_POS);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_vec_pos(MAX_VEC_POS + 1); }",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(pos > MAX_VEC_POS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]