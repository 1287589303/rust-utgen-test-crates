[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockBytesMut {",
          "        data: *mut Shared,",
          "        kind: usize,",
          "    }",
          "",
          "    impl MockBytesMut {",
          "        unsafe fn set_vec_pos(&mut self, pos: usize) {",
          "            debug_assert_eq!(self.kind, KIND_VEC);",
          "            debug_assert!(pos <= MAX_VEC_POS);",
          "",
          "            self.data = invalid_ptr((pos << VEC_POS_OFFSET) | (self.data as usize & NOT_VEC_POS_MASK));",
          "        }",
          "    }",
          "",
          "    let mut mock = MockBytesMut {",
          "        data: core::ptr::null_mut(),",
          "        kind: KIND_VEC,",
          "    };",
          "",
          "    let pos = MAX_VEC_POS;",
          "    unsafe {",
          "        mock.set_vec_pos(pos);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mock.data, invalid_ptr((MAX_VEC_POS << VEC_POS_OFFSET) | (core::ptr::null_mut() as usize & NOT_VEC_POS_MASK)));",
          "    assert!(mock.kind == KIND_VEC);",
          "    assert!(pos <= MAX_VEC_POS);",
          "    debug_assert!(mock.data != core::ptr::null_mut());",
          "    debug_assert_eq!(mock.kind, KIND_VEC);"
        ],
        "code": [
          "{",
          "    struct MockBytesMut {",
          "        data: *mut Shared,",
          "        kind: usize,",
          "    }",
          "",
          "    impl MockBytesMut {",
          "        unsafe fn set_vec_pos(&mut self, pos: usize) {",
          "            debug_assert_eq!(self.kind, KIND_VEC);",
          "            debug_assert!(pos <= MAX_VEC_POS);",
          "",
          "            self.data = invalid_ptr((pos << VEC_POS_OFFSET) | (self.data as usize & NOT_VEC_POS_MASK));",
          "        }",
          "    }",
          "",
          "    let mut mock = MockBytesMut {",
          "        data: core::ptr::null_mut(),",
          "        kind: KIND_VEC,",
          "    };",
          "",
          "    let pos = MAX_VEC_POS;",
          "    unsafe {",
          "        mock.set_vec_pos(pos);",
          "    }",
          "    assert_eq!(mock.data, invalid_ptr((MAX_VEC_POS << VEC_POS_OFFSET) | (core::ptr::null_mut() as usize & NOT_VEC_POS_MASK)));",
          "    assert!(mock.kind == KIND_VEC);",
          "    assert!(pos <= MAX_VEC_POS);",
          "    debug_assert!(mock.data != core::ptr::null_mut());",
          "    debug_assert_eq!(mock.kind, KIND_VEC);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct MockBytesMut {",
          "        data: *mut Shared,",
          "        kind: usize,",
          "    }",
          "",
          "    impl MockBytesMut {",
          "        unsafe fn set_vec_pos(&mut self, pos: usize) {",
          "            debug_assert_eq!(self.kind, KIND_VEC);",
          "            debug_assert!(pos <= MAX_VEC_POS);",
          "",
          "            self.data = invalid_ptr((pos << VEC_POS_OFFSET) | (self.data as usize & NOT_VEC_POS_MASK));",
          "        }",
          "    }",
          "",
          "    let mut mock = MockBytesMut {",
          "        data: core::ptr::null_mut(),",
          "        kind: KIND_VEC,",
          "    };",
          "",
          "    let pos = MAX_VEC_POS + 1; // Exceeds the maximum valid position",
          "    unsafe {",
          "        mock.set_vec_pos(pos);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mock.kind, KIND_VEC);",
          "    assert!(pos <= MAX_VEC_POS);"
        ],
        "code": [
          "{",
          "    struct MockBytesMut {",
          "        data: *mut Shared,",
          "        kind: usize,",
          "    }",
          "",
          "    impl MockBytesMut {",
          "        unsafe fn set_vec_pos(&mut self, pos: usize) {",
          "            debug_assert_eq!(self.kind, KIND_VEC);",
          "            debug_assert!(pos <= MAX_VEC_POS);",
          "",
          "            self.data = invalid_ptr((pos << VEC_POS_OFFSET) | (self.data as usize & NOT_VEC_POS_MASK));",
          "        }",
          "    }",
          "",
          "    let mut mock = MockBytesMut {",
          "        data: core::ptr::null_mut(),",
          "        kind: KIND_VEC,",
          "    };",
          "",
          "    let pos = MAX_VEC_POS + 1; // Exceeds the maximum valid position",
          "    unsafe {",
          "        mock.set_vec_pos(pos);",
          "    }",
          "    assert_eq!(mock.kind, KIND_VEC);",
          "    assert!(pos <= MAX_VEC_POS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]