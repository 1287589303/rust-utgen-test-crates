[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 1] = [MaybeUninit::uninit()];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 1);",
          "    assert!(slice.as_mut_ptr() != core::ptr::null_mut());",
          "    assert_eq!(unsafe { &*(slice as *const UninitSlice as *const [MaybeUninit<u8>]) }, buffer);",
          "    assert!(unsafe { &*(slice as *const UninitSlice) }.as_uninit_slice_mut() as *const _ == buffer.as_mut_ptr() as *const _);"
        ],
        "code": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 1] = [MaybeUninit::uninit()];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "    assert_eq!(slice.len(), 1);",
          "    assert!(slice.as_mut_ptr() != core::ptr::null_mut());",
          "    assert_eq!(unsafe { &*(slice as *const UninitSlice as *const [MaybeUninit<u8>]) }, buffer);",
          "    assert!(unsafe { &*(slice as *const UninitSlice) }.as_uninit_slice_mut() as *const _ == buffer.as_mut_ptr() as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 32] = [MaybeUninit::uninit(); 32];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let mut buffer: [MaybeUninit<u8>; 32] = [MaybeUninit::uninit(); 32];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "    assert_eq!(slice.len(), 32);",
          "    assert!(slice.as_mut_ptr() == buffer.as_mut_ptr() as *mut u8);",
          "    unsafe { assert!(!slice.as_uninit_slice_mut().is_empty()); }",
          "    assert_eq!(slice.as_uninit_slice_mut().len(), 32);",
          "    assert_eq!(slice as *mut UninitSlice as *mut [MaybeUninit<u8>], &mut buffer as *mut _);"
        ],
        "code": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 32] = [MaybeUninit::uninit(); 32];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "    let mut buffer: [MaybeUninit<u8>; 32] = [MaybeUninit::uninit(); 32];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "    assert_eq!(slice.len(), 32);",
          "    assert!(slice.as_mut_ptr() == buffer.as_mut_ptr() as *mut u8);",
          "    unsafe { assert!(!slice.as_uninit_slice_mut().is_empty()); }",
          "    assert_eq!(slice.as_uninit_slice_mut().len(), 32);",
          "    assert_eq!(slice as *mut UninitSlice as *mut [MaybeUninit<u8>], &mut buffer as *mut _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "}"
        ],
        "oracle": [
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "    assert!(!slice.is_null());",
          "    assert_eq!(slice.len(), 64);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, buffer.as_mut_ptr() as *mut u8);"
        ],
        "code": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer);",
          "    assert!(!slice.is_null());",
          "    assert_eq!(slice.len(), 64);",
          "    let ptr = slice.as_mut_ptr();",
          "    assert_eq!(ptr, buffer.as_mut_ptr() as *mut u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer[..]);",
          "}"
        ],
        "oracle": [
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer[..]);",
          "    assert!(!slice.is_null());",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice as *mut _ as *mut MaybeUninit<u8>, buffer.as_mut_ptr());",
          "    assert_eq!(slice as *const _ as *const UninitSlice, &buffer as *const _ as *const UninitSlice);",
          "    assert_eq!(std::mem::size_of::<UninitSlice>(), std::mem::size_of::<[MaybeUninit<u8>; 64]>());"
        ],
        "code": [
          "{",
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer[..]);",
          "    let mut buffer: [MaybeUninit<u8>; 64] = [MaybeUninit::uninit(); 64];",
          "    let slice = UninitSlice::uninit(&mut buffer[..]);",
          "    assert!(!slice.is_null());",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice as *mut _ as *mut MaybeUninit<u8>, buffer.as_mut_ptr());",
          "    assert_eq!(slice as *const _ as *const UninitSlice, &buffer as *const _ as *const UninitSlice);",
          "    assert_eq!(std::mem::size_of::<UninitSlice>(), std::mem::size_of::<[MaybeUninit<u8>; 64]>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]