[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBufA;",
          "    impl Buf for TestBufA {",
          "        fn remaining(&self) -> usize { 0 }",
          "        fn chunk(&self) -> &[u8] { &[] }",
          "        fn advance(&mut self, _cnt: usize) {}",
          "        fn has_remaining(&self) -> bool { false }",
          "        fn copy_to_slice(&mut self, _dst: &mut [u8]) {}",
          "        fn get_u8(&mut self) -> u8 { 0 }",
          "        // Implement other required traits with no-op or unimplemented",
          "    }",
          "    ",
          "    struct TestBufB {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    impl Buf for TestBufB {",
          "        fn remaining(&self) -> usize { self.data.len() - self.position }",
          "        fn chunk(&self) -> &[u8] { &self.data[self.position..] }",
          "        fn advance(&mut self, cnt: usize) { self.position += cnt; }",
          "        fn has_remaining(&self) -> bool { self.position < self.data.len() }",
          "        fn copy_to_slice(&mut self, dst: &mut [u8]) {",
          "            let remaining = self.remaining();",
          "            dst.copy_from_slice(&self.data[self.position..self.position + remaining]);",
          "            self.position += remaining;",
          "        }",
          "        fn get_u8(&mut self) -> u8 { ",
          "            let byte = self.data[self.position]; ",
          "            self.position += 1; ",
          "            byte ",
          "        }",
          "        // Implement other required traits with no-op or unimplemented",
          "    }",
          "",
          "    let a = TestBufA;",
          "    let b = TestBufB { data: vec![1, 2, 3, 4], position: 0 };",
          "    let mut chain = Chain { a, b };",
          "    let len = 4; // len > 0, self.a.remaining() == 0, self.b.remaining() == 4",
          "",
          "    chain.copy_to_bytes(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chain.a.remaining(), 0);",
          "    assert_eq!(chain.b.remaining(), 4);",
          "    let result = chain.copy_to_bytes(len);",
          "    assert!(result.len() == len);",
          "    assert_eq!(chain.b.position, 4);",
          "    assert_eq!(result.as_slice(), &[1, 2, 3, 4]);"
        ],
        "code": [
          "{",
          "    struct TestBufA;",
          "    impl Buf for TestBufA {",
          "        fn remaining(&self) -> usize { 0 }",
          "        fn chunk(&self) -> &[u8] { &[] }",
          "        fn advance(&mut self, _cnt: usize) {}",
          "        fn has_remaining(&self) -> bool { false }",
          "        fn copy_to_slice(&mut self, _dst: &mut [u8]) {}",
          "        fn get_u8(&mut self) -> u8 { 0 }",
          "        // Implement other required traits with no-op or unimplemented",
          "    }",
          "    ",
          "    struct TestBufB {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    impl Buf for TestBufB {",
          "        fn remaining(&self) -> usize { self.data.len() - self.position }",
          "        fn chunk(&self) -> &[u8] { &self.data[self.position..] }",
          "        fn advance(&mut self, cnt: usize) { self.position += cnt; }",
          "        fn has_remaining(&self) -> bool { self.position < self.data.len() }",
          "        fn copy_to_slice(&mut self, dst: &mut [u8]) {",
          "            let remaining = self.remaining();",
          "            dst.copy_from_slice(&self.data[self.position..self.position + remaining]);",
          "            self.position += remaining;",
          "        }",
          "        fn get_u8(&mut self) -> u8 { ",
          "            let byte = self.data[self.position]; ",
          "            self.position += 1; ",
          "            byte ",
          "        }",
          "        // Implement other required traits with no-op or unimplemented",
          "    }",
          "",
          "    let a = TestBufA;",
          "    let b = TestBufB { data: vec![1, 2, 3, 4], position: 0 };",
          "    let mut chain = Chain { a, b };",
          "    let len = 4; // len > 0, self.a.remaining() == 0, self.b.remaining() == 4",
          "",
          "    chain.copy_to_bytes(len);",
          "    assert_eq!(chain.a.remaining(), 0);",
          "    assert_eq!(chain.b.remaining(), 4);",
          "    let result = chain.copy_to_bytes(len);",
          "    assert!(result.len() == len);",
          "    assert_eq!(chain.b.position, 4);",
          "    assert_eq!(result.as_slice(), &[1, 2, 3, 4]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]