[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(0);",
          "    }",
          "    let _result = bytes_mut.remaining_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.remaining_mut(), usize::MAX - 0);",
          "    let bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe { bytes_mut.set_len(10); }",
          "    assert_eq!(bytes_mut.remaining_mut(), usize::MAX - 10);",
          "    let bytes_mut = BytesMut::with_capacity(5);",
          "    unsafe { bytes_mut.set_len(usize::MAX); }",
          "    assert_eq!(bytes_mut.remaining_mut(), 0);",
          "    let bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_len(usize::MAX - 1); }",
          "    assert_eq!(bytes_mut.remaining_mut(), 1);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(0);",
          "    }",
          "    let _result = bytes_mut.remaining_mut();",
          "    assert_eq!(bytes_mut.remaining_mut(), usize::MAX - 0);",
          "    let bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe { bytes_mut.set_len(10); }",
          "    assert_eq!(bytes_mut.remaining_mut(), usize::MAX - 10);",
          "    let bytes_mut = BytesMut::with_capacity(5);",
          "    unsafe { bytes_mut.set_len(usize::MAX); }",
          "    assert_eq!(bytes_mut.remaining_mut(), 0);",
          "    let bytes_mut = BytesMut::new();",
          "    unsafe { bytes_mut.set_len(usize::MAX - 1); }",
          "    assert_eq!(bytes_mut.remaining_mut(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut::with_capacity(100);",
          "    unsafe {",
          "        bytes_mut.set_len(50);",
          "    }",
          "    let _result = bytes_mut.remaining_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.remaining_mut(), usize::MAX - 50);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut::with_capacity(100);",
          "    unsafe {",
          "        bytes_mut.set_len(50);",
          "    }",
          "    let _result = bytes_mut.remaining_mut();",
          "    assert_eq!(bytes_mut.remaining_mut(), usize::MAX - 50);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut::with_capacity(usize::MAX);",
          "    unsafe {",
          "        bytes_mut.set_len(usize::MAX);",
          "    }",
          "    let _result = bytes_mut.remaining_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.remaining_mut(), 0);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut::with_capacity(usize::MAX);",
          "    unsafe {",
          "        bytes_mut.set_len(usize::MAX);",
          "    }",
          "    let _result = bytes_mut.remaining_mut();",
          "    assert_eq!(bytes_mut.remaining_mut(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]