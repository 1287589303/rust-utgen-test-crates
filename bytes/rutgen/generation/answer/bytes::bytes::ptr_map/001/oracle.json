[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x + 1;",
          "    let new_ptr = ptr_map(ptr, f);",
          "}"
        ],
        "oracle": [
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x + 1;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr, (ptr as usize + 1) as *mut u8);",
          "    unsafe { assert_eq!(*new_ptr, value); }"
        ],
        "code": [
          "{",
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x + 1;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x + 1;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr, (ptr as usize + 1) as *mut u8);",
          "    unsafe { assert_eq!(*new_ptr, value); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| 0;",
          "    let new_ptr = ptr_map(ptr, f);",
          "}"
        ],
        "oracle": [
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| 0;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr, 0 as *mut u8);",
          "    assert!(new_ptr.is_null());"
        ],
        "code": [
          "{",
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| 0;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    let value: u8 = 42;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| 0;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr, 0 as *mut u8);",
          "    assert!(new_ptr.is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 255;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_add(100);",
          "    let new_ptr = ptr_map(ptr, f);",
          "}"
        ],
        "oracle": [
          "    let value: u8 = 255;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_add(100);",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr as usize, (ptr as usize).wrapping_add(100));"
        ],
        "code": [
          "{",
          "    let value: u8 = 255;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_add(100);",
          "    let new_ptr = ptr_map(ptr, f);",
          "    let value: u8 = 255;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_add(100);",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr as usize, (ptr as usize).wrapping_add(100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 10;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x;",
          "    let new_ptr = ptr_map(ptr, f);",
          "}"
        ],
        "oracle": [
          "    let value: u8 = 10;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr, ptr);"
        ],
        "code": [
          "{",
          "    let value: u8 = 10;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    let value: u8 = 10;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x;",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr, ptr);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u8 = 32;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_sub(1);",
          "    let new_ptr = ptr_map(ptr, f);",
          "}"
        ],
        "oracle": [
          "    let value: u8 = 32;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_sub(1);",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr as usize, (ptr as usize).wrapping_sub(1));",
          "    assert_ne!(new_ptr, ptr);",
          "    Box::from_raw(ptr);"
        ],
        "code": [
          "{",
          "    let value: u8 = 32;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_sub(1);",
          "    let new_ptr = ptr_map(ptr, f);",
          "    let value: u8 = 32;",
          "    let ptr: *mut u8 = Box::into_raw(Box::new(value));",
          "    let f = |x: usize| x.wrapping_sub(1);",
          "    let new_ptr = ptr_map(ptr, f);",
          "    assert_eq!(new_ptr as usize, (ptr as usize).wrapping_sub(1));",
          "    assert_ne!(new_ptr, ptr);",
          "    Box::from_raw(ptr);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]