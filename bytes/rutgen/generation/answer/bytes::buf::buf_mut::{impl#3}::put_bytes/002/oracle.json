[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
          "    let cnt = 5;",
          "    let val: u8 = 42;",
          "    unsafe {",
          "        // Initialize buffer to zero before testing",
          "        ptr::write_bytes(buffer.as_mut_ptr() as *mut u8, 0, buffer.len());",
          "        let buf_mut = &mut buffer;",
          "        buf_mut.put_bytes(val, cnt);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer[0].assume_init(), 42);",
          "    assert_eq!(buffer[1].assume_init(), 42);",
          "    assert_eq!(buffer[2].assume_init(), 42);",
          "    assert_eq!(buffer[3].assume_init(), 42);",
          "    assert_eq!(buffer[4].assume_init(), 42);",
          "    assert!(std::mem::size_of_val(buffer) == 5);"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
          "    let cnt = 5;",
          "    let val: u8 = 42;",
          "    unsafe {",
          "        // Initialize buffer to zero before testing",
          "        ptr::write_bytes(buffer.as_mut_ptr() as *mut u8, 0, buffer.len());",
          "        let buf_mut = &mut buffer;",
          "        buf_mut.put_bytes(val, cnt);",
          "    }",
          "    assert_eq!(buffer[0].assume_init(), 42);",
          "    assert_eq!(buffer[1].assume_init(), 42);",
          "    assert_eq!(buffer[2].assume_init(), 42);",
          "    assert_eq!(buffer[3].assume_init(), 42);",
          "    assert_eq!(buffer[4].assume_init(), 42);",
          "    assert!(std::mem::size_of_val(buffer) == 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
          "    let cnt = 10;",
          "    let val: u8 = 255;",
          "    unsafe {",
          "        // Initialize buffer to zero before testing",
          "        ptr::write_bytes(buffer.as_mut_ptr() as *mut u8, 0, buffer.len());",
          "        let buf_mut = &mut buffer;",
          "        buf_mut.put_bytes(val, cnt);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer[0].assume_init(), 255);",
          "    assert_eq!(buffer[1].assume_init(), 255);",
          "    assert_eq!(buffer[2].assume_init(), 255);",
          "    assert_eq!(buffer[3].assume_init(), 255);",
          "    assert_eq!(buffer[4].assume_init(), 255);",
          "    assert_eq!(buffer[5].assume_init(), 255);",
          "    assert_eq!(buffer[6].assume_init(), 255);",
          "    assert_eq!(buffer[7].assume_init(), 255);",
          "    assert_eq!(buffer[8].assume_init(), 255);",
          "    assert_eq!(buffer[9].assume_init(), 255);"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
          "    let cnt = 10;",
          "    let val: u8 = 255;",
          "    unsafe {",
          "        // Initialize buffer to zero before testing",
          "        ptr::write_bytes(buffer.as_mut_ptr() as *mut u8, 0, buffer.len());",
          "        let buf_mut = &mut buffer;",
          "        buf_mut.put_bytes(val, cnt);",
          "    }",
          "    assert_eq!(buffer[0].assume_init(), 255);",
          "    assert_eq!(buffer[1].assume_init(), 255);",
          "    assert_eq!(buffer[2].assume_init(), 255);",
          "    assert_eq!(buffer[3].assume_init(), 255);",
          "    assert_eq!(buffer[4].assume_init(), 255);",
          "    assert_eq!(buffer[5].assume_init(), 255);",
          "    assert_eq!(buffer[6].assume_init(), 255);",
          "    assert_eq!(buffer[7].assume_init(), 255);",
          "    assert_eq!(buffer[8].assume_init(), 255);",
          "    assert_eq!(buffer[9].assume_init(), 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]