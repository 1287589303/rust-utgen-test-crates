[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
          "        core::mem::MaybeUninit::new(0), ",
          "        core::mem::MaybeUninit::new(1)",
          "    ];",
          "    let cnt = buffer.len();",
          "    unsafe { buffer.advance_mut(cnt) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
          "        core::mem::MaybeUninit::new(0), ",
          "        core::mem::MaybeUninit::new(1)",
          "    ];",
          "    let cnt = buffer.len();",
          "    unsafe { buffer.advance_mut(cnt) };",
          "    assert_eq!(buffer.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
          "        core::mem::MaybeUninit::new(42)",
          "    ];",
          "    let cnt = buffer.len();",
          "    unsafe { buffer.advance_mut(cnt) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [",
          "        core::mem::MaybeUninit::new(42)",
          "    ];",
          "    let cnt = buffer.len();",
          "    unsafe { buffer.advance_mut(cnt) };",
          "    assert_eq!(buffer.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]