[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
          "    let cnt = 10; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(panic_advance(&TryGetError { requested: 10, available: 5 }), ());"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 5];",
          "    let cnt = 10; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "    assert_eq!(panic_advance(&TryGetError { requested: 10, available: 5 }), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let cnt = 1; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let cnt = 1; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "    }), Err(_));"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let cnt = 1; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let cnt = 1; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "    }), Err(_));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    let cnt = 5; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "}"
        ],
        "oracle": [
          "    panic_advance(&TryGetError { requested: 5, available: 3 });",
          "    self.len() < cnt;",
          "    cnt = 5;",
          "    buf.len() == 3;"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    let cnt = 5; // cnt is greater than buf.len()",
          "    unsafe { buf.advance_mut(cnt) };",
          "    panic_advance(&TryGetError { requested: 5, available: 3 });",
          "    self.len() < cnt;",
          "    cnt = 5;",
          "    buf.len() == 3;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]