[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"; // 8 bytes followed by more data",
          "    let result = buf.try_get_f64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(1.2));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(buf.has_remaining());",
          "    assert_eq!(buf.copy_to_slice(&mut [0; 8]), 8);",
          "    assert!(buf.try_get_f64_ne().is_ok());",
          "    assert_eq!(buf.try_get_f64_ne().unwrap_err().requested, 8);",
          "    assert_eq!(buf.try_get_f64_ne().unwrap_err().available, 7);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33 hello\"; // 8 bytes followed by more data",
          "    let result = buf.try_get_f64_ne();",
          "    assert_eq!(result, Ok(1.2));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(buf.has_remaining());",
          "    assert_eq!(buf.copy_to_slice(&mut [0; 8]), 8);",
          "    assert!(buf.try_get_f64_ne().is_ok());",
          "    assert_eq!(buf.try_get_f64_ne().unwrap_err().requested, 8);",
          "    assert_eq!(buf.try_get_f64_ne().unwrap_err().available, 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"; // 8 bytes followed by more data",
          "    let result = buf.try_get_f64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(f64::from_bits(0xF3333333333343F)));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(buf.has_remaining());",
          "    assert!(matches!(buf.try_get_f64_ne(), Err(TryGetError { requested: 8, available: 7 })));",
          "    assert_eq!(buf.remaining(), 7);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x33\\x33\\x33\\x33\\x33\\x33\\xF3\\x3F hello\"; // 8 bytes followed by more data",
          "    let result = buf.try_get_f64_ne();",
          "    assert_eq!(result, Ok(f64::from_bits(0xF3333333333343F)));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(buf.has_remaining());",
          "    assert!(matches!(buf.try_get_f64_ne(), Err(TryGetError { requested: 8, available: 7 })));",
          "    assert_eq!(buf.remaining(), 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..]; // 7 bytes",
          "    let result = buf.try_get_f64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(1.2), result);",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64_ne());",
          "    buf.advance(7);",
          "    assert_eq!(1.2, f64::from_bits(buf.try_get_u64_ne().unwrap()));"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\"[..]; // 7 bytes",
          "    let result = buf.try_get_f64_ne();",
          "    assert_eq!(Ok(1.2), result);",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64_ne());",
          "    buf.advance(7);",
          "    assert_eq!(1.2, f64::from_bits(buf.try_get_u64_ne().unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &[]; // 0 bytes",
          "    let result = buf.try_get_f64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(f64::from_bits(0)));",
          "    assert_eq!(result.is_ok(), false);",
          "    assert_eq!(result.unwrap_err().requested, 8);",
          "    assert_eq!(result.unwrap_err().available, 0);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.advance(8);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.try_get_u64_ne();",
          "    assert_eq!(result.unwrap_err().requested, 8);",
          "    assert_eq!(result.unwrap_err().available, 0);",
          "    result = buf.try_get_f64_ne();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().requested, 8);",
          "    assert_eq!(result.unwrap_err().available, 1);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &[]; // 0 bytes",
          "    let result = buf.try_get_f64_ne();",
          "    assert_eq!(result, Ok(f64::from_bits(0)));",
          "    assert_eq!(result.is_ok(), false);",
          "    assert_eq!(result.unwrap_err().requested, 8);",
          "    assert_eq!(result.unwrap_err().available, 0);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.advance(8);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.try_get_u64_ne();",
          "    assert_eq!(result.unwrap_err().requested, 8);",
          "    assert_eq!(result.unwrap_err().available, 0);",
          "    result = buf.try_get_f64_ne();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().requested, 8);",
          "    assert_eq!(result.unwrap_err().available, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\"; // Exactly 8 bytes",
          "    let result = buf.try_get_f64_ne();",
          "}"
        ],
        "oracle": [
          "    let mut buf: &[u8] = b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\"; // Exactly 8 bytes",
          "    assert_eq!(result, Ok(f64::from_bits(0x3FF3333333333333)); // Expected double-precision value in native endian",
          "    assert_eq!(buf.remaining(), 0); // Buffer should have no remaining bytes after reading",
          "    assert!(buf.has_remaining() == false); // Verifying has_remaining returns false"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\"; // Exactly 8 bytes",
          "    let result = buf.try_get_f64_ne();",
          "    let mut buf: &[u8] = b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\"; // Exactly 8 bytes",
          "    assert_eq!(result, Ok(f64::from_bits(0x3FF3333333333333)); // Expected double-precision value in native endian",
          "    assert_eq!(buf.remaining(), 0); // Buffer should have no remaining bytes after reading",
          "    assert!(buf.has_remaining() == false); // Verifying has_remaining returns false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]