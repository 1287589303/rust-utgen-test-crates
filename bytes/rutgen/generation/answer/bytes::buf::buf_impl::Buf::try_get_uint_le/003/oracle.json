[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(1_u64), buf.try_get_uint_le(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_uint_le(2));",
          "    assert_eq!(1, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(1);",
          "    assert_eq!(Ok(1_u64), buf.try_get_uint_le(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_uint_le(2));",
          "    assert_eq!(1, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102_u64), buf.try_get_uint_le(2));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 3, available: 0}), buf.try_get_uint_le(3));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 0}), buf.try_get_uint_le(5));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(2);",
          "    assert_eq!(Ok(0x0102_u64), buf.try_get_uint_le(2));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 3, available: 0}), buf.try_get_uint_le(3));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 0}), buf.try_get_uint_le(5));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_large = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf_large.try_get_uint_le(9);",
          "    assert!(result.is_err());",
          "    panic_does_not_fit(8, 9);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(3);",
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_large = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf_large.try_get_uint_le(9);",
          "    assert!(result.is_err());",
          "    panic_does_not_fit(8, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_overflow = &mut b\"\\x01\\x02\\x03\"[..];",
          "    assert_panics!(buf_overflow.try_get_uint_le(9));  // Expect panic for nbytes > 8",
          "    let mut buf_zero = &mut b\"\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf_zero.try_get_uint_le(1));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(4);",
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_overflow = &mut b\"\\x01\\x02\\x03\"[..];",
          "    assert_panics!(buf_overflow.try_get_uint_le(9));  // Expect panic for nbytes > 8",
          "    let mut buf_zero = &mut b\"\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf_zero.try_get_uint_le(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_le(4));",
          "    assert_eq!(Ok(0x0102030405_u64), buf.try_get_uint_le(5));",
          "    assert_eq!(Err(TryGetError { requested: 6, available: 1 }), buf.try_get_uint_le(6));",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_uint_le(8));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 5 }), buf.try_get_uint_le(9));",
          "    assert_eq!(Err(TryGetError { requested: 10, available: 5 }), buf.try_get_uint_le(10));",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_le(9)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(5);",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_le(4));",
          "    assert_eq!(Ok(0x0102030405_u64), buf.try_get_uint_le(5));",
          "    assert_eq!(Err(TryGetError { requested: 6, available: 1 }), buf.try_get_uint_le(6));",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_uint_le(8));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 5 }), buf.try_get_uint_le(9));",
          "    assert_eq!(Err(TryGetError { requested: 10, available: 5 }), buf.try_get_uint_le(10));",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_le(9)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 3}), buf.try_get_uint_le(5));",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(Ok(0x0807060504030201_u64), buf.try_get_uint_le(8));",
          "    let mut buf = &mut b\"\\x01\"[..];",
          "    let result = buf.try_get_uint_le(1);",
          "    assert!(result.is_ok());",
          "    let result = buf.try_get_uint_le(10);",
          "    assert_eq!(Err(TryGetError{requested: 10, available: 1}), result);",
          "    let mut buf = &mut b\"\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint_le(1));",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\"[..];",
          "    assert_eq!(Ok(0x0A09080706050403_u64), buf.try_get_uint_le(8));",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(6);",
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 3}), buf.try_get_uint_le(5));",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(Ok(0x0807060504030201_u64), buf.try_get_uint_le(8));",
          "    let mut buf = &mut b\"\\x01\"[..];",
          "    let result = buf.try_get_uint_le(1);",
          "    assert!(result.is_ok());",
          "    let result = buf.try_get_uint_le(10);",
          "    assert_eq!(Err(TryGetError{requested: 10, available: 1}), result);",
          "    let mut buf = &mut b\"\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint_le(1));",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\"[..];",
          "    assert_eq!(Ok(0x0A09080706050403_u64), buf.try_get_uint_le(8));",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(7);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_uint_le(8));",
          "    assert_eq!(Ok(0x010204_u64), buf.try_get_uint_le(5));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x0304_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_uint_le(2));",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(7);",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_uint_le(8));",
          "    assert_eq!(Ok(0x010204_u64), buf.try_get_uint_le(5));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x0304_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_uint_le(2));",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_le(4));",
          "    assert_eq!(Err(TryGetError { requested: 10, available: 8 }), buf.try_get_uint_le(10));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(6, buf.try_get_uint_le(6).unwrap_err().available);",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_uint_le(9)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(8);",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_le(4));",
          "    assert_eq!(Err(TryGetError { requested: 10, available: 8 }), buf.try_get_uint_le(10));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(6, buf.try_get_uint_le(6).unwrap_err().available);",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_uint_le(9)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(2);",
          "}"
        ],
        "oracle": [
          "    assert!(buf.get_mut(0..2).is_none());",
          "    assert_eq!(buf.remaining(), 1);",
          "    assert_eq!(buf.try_get_uint_le(2), Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\"[..];",
          "    let _ = buf.try_get_uint_le(2);",
          "    assert!(buf.get_mut(0..2).is_none());",
          "    assert_eq!(buf.remaining(), 1);",
          "    assert_eq!(buf.try_get_uint_le(2), Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\"[..];",
          "    let _ = buf.try_get_uint_le(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_uint_le(4));",
          "    assert_eq!(Err(TryGetError{requested: 3, available: 2}), buf.try_get_uint_le(3));",
          "    assert_eq!(Ok(0x0102_u64), buf.try_get_uint_le(2));",
          "    assert_eq!(2, buf.remaining());",
          "    assert_eq!(Ok(0x01_u64), buf.try_get_uint_le(1));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_uint_le(2));",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 0}), buf.try_get_uint_le(8));",
          "    assert!(panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\"[..];",
          "    let _ = buf.try_get_uint_le(3);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_uint_le(4));",
          "    assert_eq!(Err(TryGetError{requested: 3, available: 2}), buf.try_get_uint_le(3));",
          "    assert_eq!(Ok(0x0102_u64), buf.try_get_uint_le(2));",
          "    assert_eq!(2, buf.remaining());",
          "    assert_eq!(Ok(0x01_u64), buf.try_get_uint_le(1));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_uint_le(2));",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 0}), buf.try_get_uint_le(8));",
          "    assert!(panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_uint_le(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_uint_le(4));",
          "    assert_eq!(3, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_uint_le(4);",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_uint_le(4));",
          "    assert_eq!(3, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _ = buf.try_get_uint_le(5);",
          "}"
        ],
        "oracle": [
          "    assert!(panic_does_not_fit_called());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_uint_le(5));",
          "    assert_eq!(4, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _ = buf.try_get_uint_le(5);",
          "    assert!(panic_does_not_fit_called());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_uint_le(5));",
          "    assert_eq!(4, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _ = buf.try_get_uint_le(6);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(buf.try_get_uint_le(6), Err(TryGetError { requested: 6, available: 5 })));",
          "    assert_eq!(buf.remaining(), 5);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _ = buf.try_get_uint_le(6);",
          "    assert!(matches!(buf.try_get_uint_le(6), Err(TryGetError { requested: 6, available: 5 })));",
          "    assert_eq!(buf.remaining(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _ = buf.try_get_uint_le(7);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_uint_le(7));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 1, available: 0 }), buf.try_get_uint_le(1));",
          "    assert_eq!(Ok(0x04030201_u64), buf.try_get_uint_le(4));",
          "    assert_eq!(2, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _ = buf.try_get_uint_le(7);",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_uint_le(7));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 1, available: 0 }), buf.try_get_uint_le(1));",
          "    assert_eq!(Ok(0x04030201_u64), buf.try_get_uint_le(4));",
          "    assert_eq!(2, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _ = buf.try_get_uint_le(8);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(buf.try_get_uint_le(8), Err(TryGetError { requested: 8, available: 7 })));",
          "    assert_eq!(buf.remaining(), 7);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _ = buf.try_get_uint_le(8);",
          "    assert!(matches!(buf.try_get_uint_le(8), Err(TryGetError { requested: 8, available: 7 })));",
          "    assert_eq!(buf.remaining(), 7);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_uint_le(9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_uint_le(9));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_uint_le(9);",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_uint_le(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]