[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01_u64), buf.try_get_uint_le(1));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_uint_le(2));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 6}), buf.try_get_uint_le(9));",
          "    assert_eq!(6, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(1);",
          "    assert_eq!(Ok(0x01_u64), buf.try_get_uint_le(1));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_uint_le(2));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 6}), buf.try_get_uint_le(9));",
          "    assert_eq!(6, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint_le(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102_u64), result);",
          "    assert_eq!(5, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(2);",
          "    assert_eq!(Ok(0x0102_u64), result);",
          "    assert_eq!(5, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_u64), result);",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(3);",
          "    assert_eq!(Ok(0x010203_u64), result);",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(0x01020304_u64));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.chunk(), &b\" hello\"[..]);",
          "    assert!(buf.has_remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(4);",
          "    assert_eq!(result, Ok(0x01020304_u64));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.chunk(), &b\" hello\"[..]);",
          "    assert!(buf.has_remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_le(5));",
          "    assert_eq!(10, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 6, available: 5}), buf.try_get_uint_le(6));",
          "    assert_eq!(5, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_uint_le(9)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(5);",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_le(5));",
          "    assert_eq!(10, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 6, available: 5}), buf.try_get_uint_le(6));",
          "    assert_eq!(5, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_uint_le(9)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203040506_u64), result);",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(buf.chunk() == b\" hello\");",
          "    assert!(buf.remaining() == 6);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(6);",
          "    assert_eq!(Ok(0x010203040506_u64), result);",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(buf.chunk() == b\" hello\");",
          "    assert!(buf.remaining() == 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(7);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607_u64), buf.try_get_uint_le(7));",
          "    assert_eq!(9, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(7);",
          "    assert_eq!(Ok(0x01020304050607_u64), buf.try_get_uint_le(7));",
          "    assert_eq!(9, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050608_u64), buf.try_get_uint_le(8));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_uint_le(9));",
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    assert_eq!(Ok(0_u64), buf.try_get_uint_le(0));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let result = buf.try_get_uint_le(8);",
          "    assert_eq!(Ok(0x01020304050608_u64), buf.try_get_uint_le(8));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_uint_le(9));",
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_le(4));",
          "    assert_eq!(Ok(0_u64), buf.try_get_uint_le(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_uint_le(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), result);",
          "    assert_eq!(3, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_uint_le(4);",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), result);",
          "    assert_eq!(3, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]