[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = BytesMut::with_capacity(0);",
          "    let cap = b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cap, 0);",
          "    let b = BytesMut::with_capacity(64);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 64);",
          "    let b = BytesMut::with_capacity(1024);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 1024);",
          "    let b = BytesMut::new();",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 0);",
          "    let b = BytesMut::with_capacity(32);",
          "    b.reserve(16);",
          "    let cap = b.capacity();",
          "    assert!(cap >= 32);",
          "    let b = BytesMut::with_capacity(8);",
          "    b.reserve(8);",
          "    let cap = b.capacity();",
          "    assert!(cap >= 8);"
        ],
        "code": [
          "{",
          "    let b = BytesMut::with_capacity(0);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 0);",
          "    let b = BytesMut::with_capacity(64);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 64);",
          "    let b = BytesMut::with_capacity(1024);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 1024);",
          "    let b = BytesMut::new();",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 0);",
          "    let b = BytesMut::with_capacity(32);",
          "    b.reserve(16);",
          "    let cap = b.capacity();",
          "    assert!(cap >= 32);",
          "    let b = BytesMut::with_capacity(8);",
          "    b.reserve(8);",
          "    let cap = b.capacity();",
          "    assert!(cap >= 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = BytesMut::with_capacity(1);",
          "    let cap = b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cap, 1);",
          "    let b = BytesMut::with_capacity(10);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 10);",
          "    let b = BytesMut::with_capacity(100);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 100);",
          "    let b = BytesMut::new();",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 0);",
          "    let b = BytesMut::with_capacity(0);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 0);"
        ],
        "code": [
          "{",
          "    let b = BytesMut::with_capacity(1);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 1);",
          "    let b = BytesMut::with_capacity(10);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 10);",
          "    let b = BytesMut::with_capacity(100);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 100);",
          "    let b = BytesMut::new();",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 0);",
          "    let b = BytesMut::with_capacity(0);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = BytesMut::with_capacity(1024);",
          "    let cap = b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cap, 1024);",
          "    let b = BytesMut::with_capacity(0);",
          "    let cap_zero = b.capacity();",
          "    assert_eq!(cap_zero, 0);",
          "    let b = BytesMut::with_capacity(256);",
          "    assert_eq!(b.capacity(), 256);",
          "    let b = BytesMut::new();",
          "    assert_eq!(b.capacity(), 0);",
          "    let b = BytesMut::with_capacity(512);",
          "    let cap_half = b.capacity();",
          "    assert_eq!(cap_half, 512);"
        ],
        "code": [
          "{",
          "    let b = BytesMut::with_capacity(1024);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, 1024);",
          "    let b = BytesMut::with_capacity(0);",
          "    let cap_zero = b.capacity();",
          "    assert_eq!(cap_zero, 0);",
          "    let b = BytesMut::with_capacity(256);",
          "    assert_eq!(b.capacity(), 256);",
          "    let b = BytesMut::new();",
          "    assert_eq!(b.capacity(), 0);",
          "    let b = BytesMut::with_capacity(512);",
          "    let cap_half = b.capacity();",
          "    assert_eq!(cap_half, 512);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = BytesMut::with_capacity(usize::MAX);",
          "    let cap = b.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cap, usize::MAX);",
          "    let b = BytesMut::with_capacity(0);",
          "    assert_eq!(b.capacity(), 0);",
          "    let b = BytesMut::with_capacity(32);",
          "    assert_eq!(b.capacity(), 32);",
          "    let b = BytesMut::new();",
          "    assert_eq!(b.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let b = BytesMut::with_capacity(usize::MAX);",
          "    let cap = b.capacity();",
          "    assert_eq!(cap, usize::MAX);",
          "    let b = BytesMut::with_capacity(0);",
          "    assert_eq!(b.capacity(), 0);",
          "    let b = BytesMut::with_capacity(32);",
          "    assert_eq!(b.capacity(), 32);",
          "    let b = BytesMut::new();",
          "    assert_eq!(b.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]