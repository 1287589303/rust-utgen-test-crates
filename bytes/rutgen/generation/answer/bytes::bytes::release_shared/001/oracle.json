[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: 1024,",
          "        ref_cnt: AtomicUsize::new(2), // Initial count set to 2",
          "    });",
          "    ",
          "    let ptr = Box::into_raw(shared);",
          "    ",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 1);",
          "    assert_eq!((*ptr).buf, Core::ptr::null_mut());",
          "    assert_eq!((*ptr).cap, 1024);"
        ],
        "code": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: 1024,",
          "        ref_cnt: AtomicUsize::new(2), // Initial count set to 2",
          "    });",
          "    ",
          "    let ptr = Box::into_raw(shared);",
          "    ",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 1);",
          "    assert_eq!((*ptr).buf, Core::ptr::null_mut());",
          "    assert_eq!((*ptr).cap, 1024);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: 512,",
          "        ref_cnt: AtomicUsize::new(3), // Initial count set to 3",
          "    });",
          "    ",
          "    let ptr = Box::into_raw(shared);",
          "    ",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 2);",
          "    assert_eq!((*ptr).buf, Core::ptr::null_mut());",
          "    assert_eq!((*ptr).cap, 512);",
          "    drop(Box::from_raw(ptr));",
          "    assert!(ptr.is_null());"
        ],
        "code": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: 512,",
          "        ref_cnt: AtomicUsize::new(3), // Initial count set to 3",
          "    });",
          "    ",
          "    let ptr = Box::into_raw(shared);",
          "    ",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 2);",
          "    assert_eq!((*ptr).buf, Core::ptr::null_mut());",
          "    assert_eq!((*ptr).cap, 512);",
          "    drop(Box::from_raw(ptr));",
          "    assert!(ptr.is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: 256,",
          "        ref_cnt: AtomicUsize::new(2), // Setting it to 2 to just meet the condition",
          "    });",
          "    ",
          "    let ptr = Box::into_raw(shared);",
          "    ",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 1);",
          "    assert!(!ptr.is_null());",
          "    assert_eq!(mem::size_of::<Shared>(), 32);",
          "    assert_eq!(mem::align_of::<Shared>(), 8);",
          "    assert!(ptr.is_unique());",
          "    assert!(ptr::read((*ptr).buf));"
        ],
        "code": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: 256,",
          "        ref_cnt: AtomicUsize::new(2), // Setting it to 2 to just meet the condition",
          "    });",
          "    ",
          "    let ptr = Box::into_raw(shared);",
          "    ",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 1);",
          "    assert!(!ptr.is_null());",
          "    assert_eq!(mem::size_of::<Shared>(), 32);",
          "    assert_eq!(mem::align_of::<Shared>(), 8);",
          "    assert!(ptr.is_unique());",
          "    assert!(ptr::read((*ptr).buf));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: usize::MAX, // Using maximum capacity to check behavior",
          "        ref_cnt: AtomicUsize::new(4), // Sufficiently high ref count",
          "    });",
          "",
          "    let ptr = Box::into_raw(shared);",
          "",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 3);",
          "    assert!(ptr.is_null() == false);",
          "    assert!(Box::from_raw(ptr).buf == Core::ptr::null_mut());",
          "    assert!(Box::from_raw(ptr).cap == usize::MAX);",
          "    assert!(Box::from_raw(ptr).ref_cnt.load(Ordering::Relaxed) == 3);"
        ],
        "code": [
          "{",
          "    let shared = Box::new(Shared {",
          "        buf: Core::ptr::null_mut(),",
          "        cap: usize::MAX, // Using maximum capacity to check behavior",
          "        ref_cnt: AtomicUsize::new(4), // Sufficiently high ref count",
          "    });",
          "",
          "    let ptr = Box::into_raw(shared);",
          "",
          "    unsafe {",
          "        release_shared(ptr);",
          "    }",
          "    assert_eq!((*ptr).ref_cnt.load(Ordering::Relaxed), 3);",
          "    assert!(ptr.is_null() == false);",
          "    assert!(Box::from_raw(ptr).buf == Core::ptr::null_mut());",
          "    assert!(Box::from_raw(ptr).cap == usize::MAX);",
          "    assert!(Box::from_raw(ptr).ref_cnt.load(Ordering::Relaxed) == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]