[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = Bytes::from_static(b\"hello world\");",
          "    let b = a.slice(..);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(b.len(), 11);",
          "    assert_eq!(b.ptr, a.ptr);",
          "    assert!(b.is_unique());",
          "    assert!(b.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let a = Bytes::from_static(b\"hello world\");",
          "    let b = a.slice(..);",
          "    assert_eq!(b.len(), 11);",
          "    assert_eq!(b.ptr, a.ptr);",
          "    assert!(b.is_unique());",
          "    assert!(b.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = Bytes::from_static(b\"hello world\");",
          "    let b = a.slice(5..5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(b.ptr, a.ptr.add(5));",
          "    assert_eq!(b.slice(0..0).len(), 0);"
        ],
        "code": [
          "{",
          "    let a = Bytes::from_static(b\"hello world\");",
          "    let b = a.slice(5..5);",
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(b.ptr, a.ptr.add(5));",
          "    assert_eq!(b.slice(0..0).len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let a = Bytes::from_static(b\"hello world\");",
          "    let b = a.slice(0..12);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 11);",
          "    assert!(b.is_empty());",
          "    assert!(b.ptr == a.ptr);"
        ],
        "code": [
          "{",
          "    let a = Bytes::from_static(b\"hello world\");",
          "    let b = a.slice(0..12);",
          "    assert_eq!(a.len(), 11);",
          "    assert!(b.is_empty());",
          "    assert!(b.ptr == a.ptr);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]