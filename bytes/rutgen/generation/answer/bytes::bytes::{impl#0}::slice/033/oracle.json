[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::from_static(b\"\");",
          "    let result = bytes.slice(0..0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert_eq!(unsafe { result.as_slice() }, &b\"\"[..]);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::from_static(b\"\");",
          "    let result = bytes.slice(0..0);",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert_eq!(unsafe { result.as_slice() }, &b\"\"[..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.slice(0..5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 5);",
          "    assert_eq!(&result.as_slice(), b\"hello\");",
          "    assert!(result.is_unique());",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.ptr != bytes.ptr);",
          "    assert!(result.ptr.is_null() == false);",
          "    assert!(result.clone().len() == result.len());",
          "    assert!(result.slice(0..0).len() == 0);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.slice(0..5);",
          "    assert_eq!(result.len(), 5);",
          "    assert_eq!(&result.as_slice(), b\"hello\");",
          "    assert!(result.is_unique());",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.ptr != bytes.ptr);",
          "    assert!(result.ptr.is_null() == false);",
          "    assert!(result.clone().len() == result.len());",
          "    assert!(result.slice(0..0).len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.slice(2..3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(unsafe { core::slice::from_raw_parts(result.ptr, result.len) }, b\"l\");",
          "    assert!(result.is_unique());"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.slice(2..3);",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(unsafe { core::slice::from_raw_parts(result.ptr, result.len) }, b\"l\");",
          "    assert!(result.is_unique());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.slice(3..3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.as_slice(), &[]);",
          "    assert_eq!(result.ptr, bytes.ptr.wrapping_add(3));",
          "    assert_eq!(result.vtable, &STATIC_VTABLE);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.slice(3..3);",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.as_slice(), &[]);",
          "    assert_eq!(result.ptr, bytes.ptr.wrapping_add(3));",
          "    assert_eq!(result.vtable, &STATIC_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]