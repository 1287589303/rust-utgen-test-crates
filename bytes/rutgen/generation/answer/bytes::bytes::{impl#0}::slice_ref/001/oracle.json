[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello world\");",
          "    let subset: &[u8] = &[];",
          "    let subslice = bytes.slice_ref(subset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(subslice.len(), 0);",
          "    assert!(subslice.is_empty());",
          "    assert_eq!(subslice.as_ptr(), Bytes::new().as_ptr());",
          "    assert_eq!(subslice.data.load(Ordering::SeqCst), AtomicPtr::new(ptr::null_mut()).load(Ordering::SeqCst));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::from_static(b\"hello world\");",
          "    let subset: &[u8] = &[];",
          "    let subslice = bytes.slice_ref(subset);",
          "    assert_eq!(subslice.len(), 0);",
          "    assert!(subslice.is_empty());",
          "    assert_eq!(subslice.as_ptr(), Bytes::new().as_ptr());",
          "    assert_eq!(subslice.data.load(Ordering::SeqCst), AtomicPtr::new(ptr::null_mut()).load(Ordering::SeqCst));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::new();",
          "    let subset: &[u8] = &[];",
          "    let subslice = bytes.slice_ref(subset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(subslice.len(), 0);",
          "    assert!(subslice.is_empty());",
          "    assert!(subslice.as_ptr() == bytes.as_ptr());",
          "    assert!(bytes.len() == 0);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::new();",
          "    let subset: &[u8] = &[];",
          "    let subslice = bytes.slice_ref(subset);",
          "    assert_eq!(subslice.len(), 0);",
          "    assert!(subslice.is_empty());",
          "    assert!(subslice.as_ptr() == bytes.as_ptr());",
          "    assert!(bytes.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(b\"example\");",
          "    let subset: &[u8] = &[];",
          "    let subslice = bytes.slice_ref(subset);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(subslice.len(), 0);",
          "    assert!(subslice.is_empty());",
          "    assert_eq!(subslice.as_ptr(), bytes.as_ptr());",
          "    assert!(subslice.data.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(bytes.len(), 7);",
          "    assert_eq!(bytes.as_slice(), b\"example\");"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(b\"example\");",
          "    let subset: &[u8] = &[];",
          "    let subslice = bytes.slice_ref(subset);",
          "    assert_eq!(subslice.len(), 0);",
          "    assert!(subslice.is_empty());",
          "    assert_eq!(subslice.as_ptr(), bytes.as_ptr());",
          "    assert!(subslice.data.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(bytes.len(), 7);",
          "    assert_eq!(bytes.as_slice(), b\"example\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]