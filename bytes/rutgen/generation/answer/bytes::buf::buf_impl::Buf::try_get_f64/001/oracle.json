[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_f64());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_f64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), buf.try_get_f64());",
          "    assert_eq!(1, buf.remaining());",
          "    buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64());",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), buf.try_get_f64());",
          "    assert_eq!(1, buf.remaining());",
          "    buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64());",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), buf.try_get_f64());",
          "    assert_eq!(2, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), buf.try_get_f64());",
          "    assert_eq!(2, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), buf.try_get_f64());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(1.0f64, buf.try_get_f64().unwrap());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), buf.try_get_f64());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(1.0f64, buf.try_get_f64().unwrap());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_f64());",
          "    assert_eq!(4, buf.remaining());",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Ok(0.0), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf = &b\"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Ok(f64::INFINITY), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf = &b\"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Ok(f64::NEG_INFINITY), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf = &b\"\\x3F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00 hello\"[..];",
          "    assert_eq!(Ok(1.0), buf.try_get_f64());",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_f64());",
          "    assert_eq!(4, buf.remaining());",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Ok(0.0), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf = &b\"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Ok(f64::INFINITY), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf = &b\"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    assert_eq!(Ok(f64::NEG_INFINITY), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf = &b\"\\x3F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00 hello\"[..];",
          "    assert_eq!(Ok(1.0), buf.try_get_f64());",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_f64());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_f64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_f64());",
          "    assert_eq!(6, buf.remaining());",
          "    buf.try_get_u64();",
          "    assert!(buf.remaining() < 8);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_f64());",
          "    assert_eq!(6, buf.remaining());",
          "    buf.try_get_u64();",
          "    assert!(buf.remaining() < 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64());",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64());",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let _ = buf.try_get_f64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64());",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x3F\\xF3\\x33\\x33\\x33\\x33\\x33\\x33\"[..];",
          "    let _ = buf.try_get_f64();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_f64());",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_f64());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]