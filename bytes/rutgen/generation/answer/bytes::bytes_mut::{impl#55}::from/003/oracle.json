[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared_bytesmut = {",
          "        let mut bytes = BytesMut::with_capacity(16);",
          "        bytes.put_bytes(1, 4); // length > 0",
          "        bytes.put_bytes(2, 4); // length > 0",
          "        bytes.put_bytes(3, 4); // length > 0",
          "        bytes",
          "    };",
          "",
          "    // Simulate shared ownership",
          "    let _shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(2), // not unique",
          "    });",
          "",
          "    // Direct access to the `data` field simulating shared state",
          "    let shared_bytesmut_pointer: *mut Shared = Box::into_raw(_shared);",
          "    let mut shared_data = ManuallyDrop::new(shared_bytesmut);",
          "    unsafe {",
          "        shared_data.data = shared_bytesmut_pointer as *mut _;",
          "    }",
          "    ",
          "    let _ = Vec::from(shared_data);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(shared_data.kind(), KIND_VEC);",
          "    assert!(!unsafe { (*shared_bytesmut_pointer).is_unique() });",
          "    let vec_from_shared: Vec<u8> = Vec::from(shared_data);",
          "    assert_eq!(vec_from_shared.len(), 12);",
          "    assert_eq!(vec_from_shared[0], 1);",
          "    assert_eq!(vec_from_shared[1], 1);",
          "    assert_eq!(vec_from_shared[2], 1);",
          "    assert_eq!(vec_from_shared[3], 1);",
          "    assert_eq!(vec_from_shared[4], 2);",
          "    assert_eq!(vec_from_shared[5], 2);",
          "    assert_eq!(vec_from_shared[6], 2);",
          "    assert_eq!(vec_from_shared[7], 2);",
          "    assert_eq!(vec_from_shared[8], 3);",
          "    assert_eq!(vec_from_shared[9], 3);",
          "    assert_eq!(vec_from_shared[10], 3);",
          "    assert_eq!(vec_from_shared[11], 3);"
        ],
        "code": [
          "{",
          "    let shared_bytesmut = {",
          "        let mut bytes = BytesMut::with_capacity(16);",
          "        bytes.put_bytes(1, 4); // length > 0",
          "        bytes.put_bytes(2, 4); // length > 0",
          "        bytes.put_bytes(3, 4); // length > 0",
          "        bytes",
          "    };",
          "",
          "    // Simulate shared ownership",
          "    let _shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(2), // not unique",
          "    });",
          "",
          "    // Direct access to the `data` field simulating shared state",
          "    let shared_bytesmut_pointer: *mut Shared = Box::into_raw(_shared);",
          "    let mut shared_data = ManuallyDrop::new(shared_bytesmut);",
          "    unsafe {",
          "        shared_data.data = shared_bytesmut_pointer as *mut _;",
          "    }",
          "    ",
          "    let _ = Vec::from(shared_data);",
          "    assert_eq!(shared_data.kind(), KIND_VEC);",
          "    assert!(!unsafe { (*shared_bytesmut_pointer).is_unique() });",
          "    let vec_from_shared: Vec<u8> = Vec::from(shared_data);",
          "    assert_eq!(vec_from_shared.len(), 12);",
          "    assert_eq!(vec_from_shared[0], 1);",
          "    assert_eq!(vec_from_shared[1], 1);",
          "    assert_eq!(vec_from_shared[2], 1);",
          "    assert_eq!(vec_from_shared[3], 1);",
          "    assert_eq!(vec_from_shared[4], 2);",
          "    assert_eq!(vec_from_shared[5], 2);",
          "    assert_eq!(vec_from_shared[6], 2);",
          "    assert_eq!(vec_from_shared[7], 2);",
          "    assert_eq!(vec_from_shared[8], 3);",
          "    assert_eq!(vec_from_shared[9], 3);",
          "    assert_eq!(vec_from_shared[10], 3);",
          "    assert_eq!(vec_from_shared[11], 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]