[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![1, 2, 3, 4],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "    ",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 4;",
          "        bytes.cap = 4;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared { vec: vec![1, 2, 3, 4], original_capacity_repr: 0, ref_count: AtomicUsize::new(1), }));",
          "    unsafe { bytes.data = shared as *mut Shared as *mut _; bytes.ptr = NonNull::new_unchecked(bytes.data); bytes.len = 4; bytes.cap = 4; }",
          "    let kind = bytes.kind();",
          "    assert_ne!(kind, KIND_VEC);",
          "    assert!(unsafe { (*shared).is_unique() });",
          "    let vec: Vec<u8> = Vec::from(bytes);",
          "    assert_eq!(vec, vec![1, 2, 3, 4]);",
          "    unsafe { release_shared(shared); }"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![1, 2, 3, 4],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "    ",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 4;",
          "        bytes.cap = 4;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared { vec: vec![1, 2, 3, 4], original_capacity_repr: 0, ref_count: AtomicUsize::new(1), }));",
          "    unsafe { bytes.data = shared as *mut Shared as *mut _; bytes.ptr = NonNull::new_unchecked(bytes.data); bytes.len = 4; bytes.cap = 4; }",
          "    let kind = bytes.kind();",
          "    assert_ne!(kind, KIND_VEC);",
          "    assert!(unsafe { (*shared).is_unique() });",
          "    let vec: Vec<u8> = Vec::from(bytes);",
          "    assert_eq!(vec, vec![1, 2, 3, 4]);",
          "    unsafe { release_shared(shared); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![10; 1024],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "    ",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 1024;",
          "        bytes.cap = 1024;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.kind(), KIND_ARC);",
          "    assert!(unsafe { (*shared).is_unique() });",
          "    assert_eq!(vec.len(), 1024);",
          "    assert_eq!(vec.as_slice(), &[10; 1024]);"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![10; 1024],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "    ",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 1024;",
          "        bytes.cap = 1024;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "    assert_eq!(bytes.kind(), KIND_ARC);",
          "    assert!(unsafe { (*shared).is_unique() });",
          "    assert_eq!(vec.len(), 1024);",
          "    assert_eq!(vec.as_slice(), &[10; 1024]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 0;",
          "        bytes.cap = 0;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.kind(), KIND_VEC);",
          "    assert!(unsafe { (*shared).is_unique() });",
          "    let vec: Vec<u8> = Vec::from(bytes);",
          "    assert_eq!(vec.len(), 0);",
          "    assert_eq!(vec.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 0;",
          "        bytes.cap = 0;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "    assert_eq!(bytes.kind(), KIND_VEC);",
          "    assert!(unsafe { (*shared).is_unique() });",
          "    let vec: Vec<u8> = Vec::from(bytes);",
          "    assert_eq!(vec.len(), 0);",
          "    assert_eq!(vec.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![5, 6, 7],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 3;",
          "        bytes.cap = 3;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.kind(), KIND_VEC);",
          "    assert_eq!(unsafe { (*shared).is_unique() }, true);",
          "    assert_eq!(vec, vec![5, 6, 7]);",
          "    assert_eq!(bytes.len, 0);",
          "    assert_eq!(bytes.cap, 3);",
          "    assert_eq!(unsafe { (*shared).vec.is_empty() }, true);",
          "    assert_eq!(unsafe { (*shared).ref_count.load(Ordering::Acquire) }, 0);"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        vec: vec![5, 6, 7],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    }));",
          "",
          "    unsafe {",
          "        bytes.data = shared as *mut Shared as *mut _;",
          "        bytes.ptr = NonNull::new_unchecked(bytes.data);",
          "        bytes.len = 3;",
          "        bytes.cap = 3;",
          "",
          "        let vec: Vec<u8> = Vec::from(bytes);",
          "    }",
          "    assert_eq!(bytes.kind(), KIND_VEC);",
          "    assert_eq!(unsafe { (*shared).is_unique() }, true);",
          "    assert_eq!(vec, vec![5, 6, 7]);",
          "    assert_eq!(bytes.len, 0);",
          "    assert_eq!(bytes.cap, 3);",
          "    assert_eq!(unsafe { (*shared).vec.is_empty() }, true);",
          "    assert_eq!(unsafe { (*shared).ref_count.load(Ordering::Acquire) }, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]