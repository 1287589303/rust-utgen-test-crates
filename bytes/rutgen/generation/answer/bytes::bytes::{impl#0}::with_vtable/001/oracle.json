[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Hello, world!\" as *const u8;",
          "    let len = 13;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &STATIC_VTABLE) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::Relaxed), std::ptr::null_mut());",
          "    assert_eq!(result.vtable, &STATIC_VTABLE);"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Hello, world!\" as *const u8;",
          "    let len = 13;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &STATIC_VTABLE) };",
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::Relaxed), std::ptr::null_mut());",
          "    assert_eq!(result.vtable, &STATIC_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Owned Data\" as *const u8;",
          "    let len = 10;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &OWNED_VTABLE) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::SeqCst), std::ptr::null_mut());",
          "    assert_eq!(result.vtable, &OWNED_VTABLE);"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Owned Data\" as *const u8;",
          "    let len = 10;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &OWNED_VTABLE) };",
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::SeqCst), std::ptr::null_mut());",
          "    assert_eq!(result.vtable, &OWNED_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Promotable Even\" as *const u8;",
          "    let len = 15;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_EVEN_VTABLE) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::Relaxed), data.load(Ordering::Relaxed));",
          "    assert_eq!(result.vtable, &PROMOTABLE_EVEN_VTABLE);"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Promotable Even\" as *const u8;",
          "    let len = 15;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_EVEN_VTABLE) };",
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::Relaxed), data.load(Ordering::Relaxed));",
          "    assert_eq!(result.vtable, &PROMOTABLE_EVEN_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Promotable Odd!\" as *const u8;",
          "    let len = 16;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
          "}"
        ],
        "oracle": [
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Promotable Odd!\" as *const u8;",
          "    let len = 16;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::SeqCst), data.load(Ordering::SeqCst));",
          "    assert_eq!(result.vtable, &PROMOTABLE_ODD_VTABLE);"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Promotable Odd!\" as *const u8;",
          "    let len = 16;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Promotable Odd!\" as *const u8;",
          "    let len = 16;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &PROMOTABLE_ODD_VTABLE) };",
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(result.data.load(Ordering::SeqCst), data.load(Ordering::SeqCst));",
          "    assert_eq!(result.vtable, &PROMOTABLE_ODD_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Shared Data!\" as *const u8;",
          "    let len = 12;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
          "}"
        ],
        "oracle": [
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Shared Data!\" as *const u8;",
          "    let len = 12;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert!(result.data.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Shared Data!\" as *const u8;",
          "    let len = 12;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
          "    let data = AtomicPtr::new(std::ptr::null_mut());",
          "    let bytes = b\"Shared Data!\" as *const u8;",
          "    let len = 12;",
          "    let result = unsafe { Bytes::with_vtable(bytes, len, data, &SHARED_VTABLE) };",
          "    assert_eq!(result.ptr, bytes);",
          "    assert_eq!(result.len, len);",
          "    assert!(result.data.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]