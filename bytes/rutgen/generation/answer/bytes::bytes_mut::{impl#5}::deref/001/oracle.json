[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec: Vec<u8> = Vec::new();",
          "    let shared = Shared {",
          "        vec,",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "        ptr,",
          "        len: 0,",
          "        cap: 0,",
          "        data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let _ref = &*bytes_mut;",
          "}"
        ],
        "oracle": [
          "    let vec: Vec<u8> = Vec::new();",
          "    let shared = Shared {",
          "    vec,",
          "    original_capacity_repr: 0,",
          "    ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "    ptr,",
          "    len: 0,",
          "    cap: 0,",
          "    data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let dereferenced: &[u8] = &*bytes_mut;",
          "    assert_eq!(dereferenced, bytes_mut.as_ref());"
        ],
        "code": [
          "{",
          "    let vec: Vec<u8> = Vec::new();",
          "    let shared = Shared {",
          "        vec,",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "        ptr,",
          "        len: 0,",
          "        cap: 0,",
          "        data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let _ref = &*bytes_mut;",
          "    let vec: Vec<u8> = Vec::new();",
          "    let shared = Shared {",
          "    vec,",
          "    original_capacity_repr: 0,",
          "    ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "    ptr,",
          "    len: 0,",
          "    cap: 0,",
          "    data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let dereferenced: &[u8] = &*bytes_mut;",
          "    assert_eq!(dereferenced, bytes_mut.as_ref());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let shared = Shared {",
          "        vec,",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "        ptr,",
          "        len: 3,",
          "        cap: 3,",
          "        data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let _ref = &*bytes_mut;",
          "}"
        ],
        "oracle": [
          "    let expected_ref: &[u8] = &[1, 2, 3];",
          "    assert_eq!(_ref, expected_ref);"
        ],
        "code": [
          "{",
          "    let vec = vec![1, 2, 3];",
          "    let shared = Shared {",
          "        vec,",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "        ptr,",
          "        len: 3,",
          "        cap: 3,",
          "        data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let _ref = &*bytes_mut;",
          "    let expected_ref: &[u8] = &[1, 2, 3];",
          "    assert_eq!(_ref, expected_ref);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![9; 10];",
          "    let shared = Shared {",
          "        vec,",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "        ptr,",
          "        len: 10,",
          "        cap: 10,",
          "        data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let _ref = &*bytes_mut;",
          "}"
        ],
        "oracle": [
          "    let vec = vec![9; 10];",
          "    let shared = Shared { vec, original_capacity_repr: 0, ref_count: AtomicUsize::new(1) };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut { ptr, len: 10, cap: 10, data: &shared as *const _ as *mut Shared };",
          "    assert_eq!(&*bytes_mut, &[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]);"
        ],
        "code": [
          "{",
          "    let vec = vec![9; 10];",
          "    let shared = Shared {",
          "        vec,",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut {",
          "        ptr,",
          "        len: 10,",
          "        cap: 10,",
          "        data: &shared as *const _ as *mut Shared,",
          "    };",
          "    let _ref = &*bytes_mut;",
          "    let vec = vec![9; 10];",
          "    let shared = Shared { vec, original_capacity_repr: 0, ref_count: AtomicUsize::new(1) };",
          "    let ptr = NonNull::from(&shared.buf as *const _ as *mut u8);",
          "    let bytes_mut = BytesMut { ptr, len: 10, cap: 10, data: &shared as *const _ as *mut Shared };",
          "    assert_eq!(&*bytes_mut, &[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]