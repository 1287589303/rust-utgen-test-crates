[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(10).into_boxed_slice()) as *mut u8);",
          "        bytes_mut.cap = 10;",
          "        bytes_mut.data = Box::into_raw(Box::new(Shared {",
          "            vec: Vec::with_capacity(10),",
          "            original_capacity_repr: 0,",
          "            ref_count: AtomicUsize::new(1),",
          "        })) as *mut Shared;",
          "        bytes_mut.set_vec_pos(0);",
          "    }",
          "    drop(bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::SeqCst) }, 0);",
          "    assert!(bytes_mut.ptr.is_null());",
          "    assert_eq!(bytes_mut.cap, 10);",
          "    assert!(unsafe { (*bytes_mut.data).vec.is_empty() });"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(10).into_boxed_slice()) as *mut u8);",
          "        bytes_mut.cap = 10;",
          "        bytes_mut.data = Box::into_raw(Box::new(Shared {",
          "            vec: Vec::with_capacity(10),",
          "            original_capacity_repr: 0,",
          "            ref_count: AtomicUsize::new(1),",
          "        })) as *mut Shared;",
          "        bytes_mut.set_vec_pos(0);",
          "    }",
          "    drop(bytes_mut);",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::SeqCst) }, 0);",
          "    assert!(bytes_mut.ptr.is_null());",
          "    assert_eq!(bytes_mut.cap, 10);",
          "    assert!(unsafe { (*bytes_mut.data).vec.is_empty() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe {",
          "        bytes_mut.set_len(1);",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(1).into_boxed_slice()) as *mut u8);",
          "        bytes_mut.cap = 1;",
          "        bytes_mut.data = Box::into_raw(Box::new(Shared {",
          "            vec: Vec::with_capacity(1),",
          "            original_capacity_repr: 0,",
          "            ref_count: AtomicUsize::new(1),",
          "        })) as *mut Shared;",
          "        bytes_mut.set_vec_pos(0);",
          "    }",
          "    drop(bytes_mut);",
          "}"
        ],
        "oracle": [
          "    let mut bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe { bytes_mut.set_len(1); }",
          "    bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(1).into_boxed_slice()) as *mut u8);",
          "    bytes_mut.cap = 1;",
          "    bytes_mut.data = Box::into_raw(Box::new(Shared { vec: Vec::with_capacity(1), original_capacity_repr: 0, ref_count: AtomicUsize::new(1), })) as *mut Shared;",
          "    bytes_mut.set_vec_pos(0);",
          "    let kind = bytes_mut.kind();",
          "    assert_eq!(kind, KIND_VEC);",
          "    drop(bytes_mut);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe {",
          "        bytes_mut.set_len(1);",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(1).into_boxed_slice()) as *mut u8);",
          "        bytes_mut.cap = 1;",
          "        bytes_mut.data = Box::into_raw(Box::new(Shared {",
          "            vec: Vec::with_capacity(1),",
          "            original_capacity_repr: 0,",
          "            ref_count: AtomicUsize::new(1),",
          "        })) as *mut Shared;",
          "        bytes_mut.set_vec_pos(0);",
          "    }",
          "    drop(bytes_mut);",
          "    let mut bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe { bytes_mut.set_len(1); }",
          "    bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(1).into_boxed_slice()) as *mut u8);",
          "    bytes_mut.cap = 1;",
          "    bytes_mut.data = Box::into_raw(Box::new(Shared { vec: Vec::with_capacity(1), original_capacity_repr: 0, ref_count: AtomicUsize::new(1), })) as *mut Shared;",
          "    bytes_mut.set_vec_pos(0);",
          "    let kind = bytes_mut.kind();",
          "    assert_eq!(kind, KIND_VEC);",
          "    drop(bytes_mut);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(15);",
          "    unsafe {",
          "        bytes_mut.set_len(10);",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(15).into_boxed_slice()) as *mut u8);",
          "        bytes_mut.cap = 15;",
          "        bytes_mut.data = Box::into_raw(Box::new(Shared {",
          "            vec: Vec::with_capacity(15),",
          "            original_capacity_repr: 0,",
          "            ref_count: AtomicUsize::new(1),",
          "        })) as *mut Shared;",
          "        bytes_mut.set_vec_pos(5);",
          "    }",
          "    drop(bytes_mut);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.capacity() >= 15);",
          "    assert!(bytes_mut.ptr.is_null() == false);",
          "    assert!(bytes_mut.data.is_null() == true);",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::Acquire) }, 0);",
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert!(bytes_mut.is_empty() == true);",
          "    assert!(bytes_mut.len() == 0);",
          "    assert!(bytes_mut.capacity() == 15);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(15);",
          "    unsafe {",
          "        bytes_mut.set_len(10);",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Vec::with_capacity(15).into_boxed_slice()) as *mut u8);",
          "        bytes_mut.cap = 15;",
          "        bytes_mut.data = Box::into_raw(Box::new(Shared {",
          "            vec: Vec::with_capacity(15),",
          "            original_capacity_repr: 0,",
          "            ref_count: AtomicUsize::new(1),",
          "        })) as *mut Shared;",
          "        bytes_mut.set_vec_pos(5);",
          "    }",
          "    drop(bytes_mut);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.capacity() >= 15);",
          "    assert!(bytes_mut.ptr.is_null() == false);",
          "    assert!(bytes_mut.data.is_null() == true);",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::Acquire) }, 0);",
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert!(bytes_mut.is_empty() == true);",
          "    assert!(bytes_mut.len() == 0);",
          "    assert!(bytes_mut.capacity() == 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]