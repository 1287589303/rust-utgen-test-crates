[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBytesMut {",
          "        ptr: NonNull<u8>,",
          "        len: usize,",
          "        cap: usize,",
          "        data: *mut Shared,",
          "    }",
          "",
          "    let bytes_mut = TestBytesMut {",
          "        ptr: NonNull::new_unchecked(core::ptr::null_mut()),",
          "        len: 0,",
          "        cap: 0,",
          "        data: core::ptr::null_mut(),",
          "    };",
          "",
          "    unsafe {",
          "        // This will call the drop function, as it's designed to do so",
          "        let _ = bytes_mut;",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.kind(), KIND_ARC + 1);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), core::ptr::null_mut());",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.data, core::ptr::null_mut());",
          "    assert!(core::ptr::null_mut::<Shared>().is_null());"
        ],
        "code": [
          "{",
          "    struct TestBytesMut {",
          "        ptr: NonNull<u8>,",
          "        len: usize,",
          "        cap: usize,",
          "        data: *mut Shared,",
          "    }",
          "",
          "    let bytes_mut = TestBytesMut {",
          "        ptr: NonNull::new_unchecked(core::ptr::null_mut()),",
          "        len: 0,",
          "        cap: 0,",
          "        data: core::ptr::null_mut(),",
          "    };",
          "",
          "    unsafe {",
          "        // This will call the drop function, as it's designed to do so",
          "        let _ = bytes_mut;",
          "    }",
          "    assert_eq!(bytes_mut.kind(), KIND_ARC + 1);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), core::ptr::null_mut());",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.data, core::ptr::null_mut());",
          "    assert!(core::ptr::null_mut::<Shared>().is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBytesMut {",
          "        ptr: NonNull<u8>,",
          "        len: usize,",
          "        cap: usize,",
          "        data: *mut Shared,",
          "    }",
          "",
          "    let bytes_mut = TestBytesMut {",
          "        ptr: NonNull::new_unchecked(core::ptr::null_mut()),",
          "        len: 0,",
          "        cap: 0,",
          "        data: core::ptr::null_mut(),",
          "    };",
          "",
          "    unsafe {",
          "        // This will call the drop function, as it's designed to do so",
          "        let _ = bytes_mut;",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.kind(), KIND_MASK);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), core::ptr::null_mut());",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.data, core::ptr::null_mut());",
          "    assert!(bytes_mut.kind() != KIND_VEC);",
          "    assert!(bytes_mut.kind() != KIND_ARC);"
        ],
        "code": [
          "{",
          "    struct TestBytesMut {",
          "        ptr: NonNull<u8>,",
          "        len: usize,",
          "        cap: usize,",
          "        data: *mut Shared,",
          "    }",
          "",
          "    let bytes_mut = TestBytesMut {",
          "        ptr: NonNull::new_unchecked(core::ptr::null_mut()),",
          "        len: 0,",
          "        cap: 0,",
          "        data: core::ptr::null_mut(),",
          "    };",
          "",
          "    unsafe {",
          "        // This will call the drop function, as it's designed to do so",
          "        let _ = bytes_mut;",
          "    }",
          "    assert_eq!(bytes_mut.kind(), KIND_MASK);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), core::ptr::null_mut());",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.data, core::ptr::null_mut());",
          "    assert!(bytes_mut.kind() != KIND_VEC);",
          "    assert!(bytes_mut.kind() != KIND_ARC);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]