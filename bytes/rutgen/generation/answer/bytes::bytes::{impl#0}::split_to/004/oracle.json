[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 5);",
          "    assert!(bytes.is_empty());",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(result.ptr as *const u8, bytes.ptr);",
          "    assert_eq!(result.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(0);",
          "    assert_eq!(bytes.len(), 5);",
          "    assert!(bytes.is_empty());",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(result.ptr as *const u8, bytes.ptr);",
          "    assert_eq!(result.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(6);",
          "}"
        ],
        "oracle": [
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(6);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    bytes.split_to(6);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(6);",
          "    let bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(6);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    bytes.split_to(6);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 4);",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(&bytes.as_slice(), b\"ello\");",
          "    assert_eq!(&result.as_slice(), b\"h\");",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.is_unique() == true);",
          "    assert!(bytes.is_unique() == false);"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(1);",
          "    assert_eq!(bytes.len(), 4);",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(&bytes.as_slice(), b\"ello\");",
          "    assert_eq!(&result.as_slice(), b\"h\");",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.is_unique() == true);",
          "    assert!(bytes.is_unique() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 2);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(&bytes.as_slice()[..], b\"lo\");",
          "    assert_eq!(&result.as_slice()[..], b\"hel\");",
          "    assert!(bytes.is_unique());",
          "    assert!(!result.is_unique());",
          "    assert!(result.ptr.is_non_null());",
          "    assert!(bytes.ptr.is_non_null());",
          "    assert!(result.len() == 3);",
          "    assert!(bytes.len() == 2);",
          "    assert!(result.ptr != bytes.ptr);",
          "    assert!(bytes.len() + result.len() == bytes.len() + result.len());",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.split_to(0).is_empty());",
          "    assert!(bytes.split_to(2).is_empty());",
          "    assert!(bytes.slice(0..2).len() == 2);",
          "    assert!(result.slice(0..3).len() == 3);"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(3);",
          "    assert_eq!(bytes.len(), 2);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(&bytes.as_slice()[..], b\"lo\");",
          "    assert_eq!(&result.as_slice()[..], b\"hel\");",
          "    assert!(bytes.is_unique());",
          "    assert!(!result.is_unique());",
          "    assert!(result.ptr.is_non_null());",
          "    assert!(bytes.ptr.is_non_null());",
          "    assert!(result.len() == 3);",
          "    assert!(bytes.len() == 2);",
          "    assert!(result.ptr != bytes.ptr);",
          "    assert!(bytes.len() + result.len() == bytes.len() + result.len());",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result.split_to(0).is_empty());",
          "    assert!(bytes.split_to(2).is_empty());",
          "    assert!(bytes.slice(0..2).len() == 2);",
          "    assert!(result.slice(0..3).len() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 5);",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(&result[..], b\"\");",
          "    assert_eq!(&bytes[..], b\"hello\");",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(result.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::from_static(b\"hello\");",
          "    let result = bytes.split_to(5);",
          "    assert_eq!(bytes.len(), 5);",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(&result[..], b\"\");",
          "    assert_eq!(&bytes[..], b\"hello\");",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(result.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]