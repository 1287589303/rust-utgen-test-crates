[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 0,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(fmt::Error));",
          "    bytes_mut.len = 1;",
          "    assert!(bytes_mut.remaining_mut() < 1);",
          "    let result = bytes_mut.write_str(\"test\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "    bytes_mut.len = 0;",
          "    bytes_mut.cap = 0;"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 0,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "    bytes_mut.len = 1;",
          "    assert!(bytes_mut.remaining_mut() < 1);",
          "    let result = bytes_mut.write_str(\"test\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "    bytes_mut.len = 0;",
          "    bytes_mut.cap = 0;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 0,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"a\");",
          "}"
        ],
        "oracle": [
          "    let mut bytes_mut = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(), len: 0, cap: 1, data: ptr::null_mut() };",
          "    let result = bytes_mut.write_str(\"a\");",
          "    assert_eq!(result, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 0,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"a\");",
          "    let mut bytes_mut = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(), len: 0, cap: 1, data: ptr::null_mut() };",
          "    let result = bytes_mut.write_str(\"a\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 1,",
          "        cap: 2,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"ab\");",
          "}"
        ],
        "oracle": [
          "    let mut bytes_mut = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "    len: 1,",
          "    cap: 2,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"ab\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 1,",
          "        cap: 2,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"ab\");",
          "    let mut bytes_mut = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "    len: 1,",
          "    cap: 2,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"ab\");",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 2,",
          "        cap: 3,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"abc\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 2,",
          "        cap: 3,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"abc\");",
          "    assert_eq!(result, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"abcd\");",
          "}"
        ],
        "oracle": [
          "    result.is_err();",
          "    assert_eq!(result, Err(fmt::Error));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new(0u8))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let result = bytes_mut.write_str(\"abcd\");",
          "    result.is_err();",
          "    assert_eq!(result, Err(fmt::Error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]