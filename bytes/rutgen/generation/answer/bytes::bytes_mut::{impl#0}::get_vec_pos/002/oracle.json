[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe {",
          "        bytes_mut.data = (1usize << VEC_POS_OFFSET) as *mut Shared;",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert_eq!(vec_pos, 1usize);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(1);",
          "    unsafe {",
          "        bytes_mut.data = (1usize << VEC_POS_OFFSET) as *mut Shared;",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert_eq!(vec_pos, 1usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(MAX_VEC_POS);",
          "    unsafe {",
          "        bytes_mut.data = (MAX_VEC_POS << VEC_POS_OFFSET) as *mut Shared;",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(bytes_mut.capacity() == MAX_VEC_POS);",
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert_eq!(bytes_mut.get_vec_pos(), MAX_VEC_POS);",
          "    assert!(unsafe { bytes_mut.data as usize & NOT_VEC_POS_MASK } == 0);",
          "    assert!(unsafe { bytes_mut.data as usize >> VEC_POS_OFFSET } == MAX_VEC_POS);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(MAX_VEC_POS);",
          "    unsafe {",
          "        bytes_mut.data = (MAX_VEC_POS << VEC_POS_OFFSET) as *mut Shared;",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "    assert!(bytes_mut.capacity() == MAX_VEC_POS);",
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert_eq!(bytes_mut.get_vec_pos(), MAX_VEC_POS);",
          "    assert!(unsafe { bytes_mut.data as usize & NOT_VEC_POS_MASK } == 0);",
          "    assert!(unsafe { bytes_mut.data as usize >> VEC_POS_OFFSET } == MAX_VEC_POS);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(0);",
          "    unsafe {",
          "        bytes_mut.data = (0usize << VEC_POS_OFFSET) as *mut Shared;",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec_pos, 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(0);",
          "    unsafe {",
          "        bytes_mut.data = (0usize << VEC_POS_OFFSET) as *mut Shared;",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "    assert_eq!(vec_pos, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe {",
          "        bytes_mut.data = (1usize << (VEC_POS_OFFSET + 1)) as *mut Shared; // Set an invalid kind",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec_pos, 0);",
          "    assert!(bytes_mut.kind() != KIND_VEC);",
          "    let kind_value = bytes_mut.kind();",
          "    assert!(kind_value & KIND_MASK != KIND_VEC);",
          "    assert!(bytes_mut.data as usize > (1usize << (VEC_POS_OFFSET + 1)));",
          "    assert!(bytes_mut.data as usize & NOT_VEC_POS_MASK == 0);",
          "    assert!(bytes_mut.data.is_null() == false);",
          "    assert!(bytes_mut.len() == 0);",
          "    assert!(bytes_mut.capacity() > 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    unsafe {",
          "        bytes_mut.data = (1usize << (VEC_POS_OFFSET + 1)) as *mut Shared; // Set an invalid kind",
          "        let vec_pos = bytes_mut.get_vec_pos();",
          "    }",
          "    assert_eq!(vec_pos, 0);",
          "    assert!(bytes_mut.kind() != KIND_VEC);",
          "    let kind_value = bytes_mut.kind();",
          "    assert!(kind_value & KIND_MASK != KIND_VEC);",
          "    assert!(bytes_mut.data as usize > (1usize << (VEC_POS_OFFSET + 1)));",
          "    assert!(bytes_mut.data as usize & NOT_VEC_POS_MASK == 0);",
          "    assert!(bytes_mut.data.is_null() == false);",
          "    assert!(bytes_mut.len() == 0);",
          "    assert!(bytes_mut.capacity() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]