[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: *mut Shared = &mut Shared {",
          "        vec: vec![1u8, 2, 3],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let data_ptr = data as usize | KIND_VEC; // Set KIND_VEC",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(data as *mut u8).unwrap(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: data_ptr as *mut Shared,",
          "    };",
          "    let _ = unsafe { bytes_mut.get_vec_pos() };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert_eq!(bytes_mut.get_vec_pos(), (data_ptr >> VEC_POS_OFFSET));",
          "    assert!(bytes_mut.len() == 3);",
          "    assert!(bytes_mut.capacity() == 10);",
          "    assert!(!bytes_mut.is_empty());"
        ],
        "code": [
          "{",
          "    let data: *mut Shared = &mut Shared {",
          "        vec: vec![1u8, 2, 3],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let data_ptr = data as usize | KIND_VEC; // Set KIND_VEC",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(data as *mut u8).unwrap(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: data_ptr as *mut Shared,",
          "    };",
          "    let _ = unsafe { bytes_mut.get_vec_pos() };",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert_eq!(bytes_mut.get_vec_pos(), (data_ptr >> VEC_POS_OFFSET));",
          "    assert!(bytes_mut.len() == 3);",
          "    assert!(bytes_mut.capacity() == 10);",
          "    assert!(!bytes_mut.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: *mut Shared = &mut Shared {",
          "        vec: vec![1u8, 2, 3],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let data_ptr = data as usize | KIND_VEC; // Set KIND_VEC",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(data as *mut u8).unwrap(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: data_ptr as *mut Shared,",
          "    };",
          "    unsafe {",
          "        bytes_mut.data = (data_ptr >> 1) as *mut Shared; // Simulate valid vec position",
          "        let _ = bytes_mut.get_vec_pos();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.get_vec_pos(), (data_ptr >> VEC_POS_OFFSET));"
        ],
        "code": [
          "{",
          "    let data: *mut Shared = &mut Shared {",
          "        vec: vec![1u8, 2, 3],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let data_ptr = data as usize | KIND_VEC; // Set KIND_VEC",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(data as *mut u8).unwrap(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: data_ptr as *mut Shared,",
          "    };",
          "    unsafe {",
          "        bytes_mut.data = (data_ptr >> 1) as *mut Shared; // Simulate valid vec position",
          "        let _ = bytes_mut.get_vec_pos();",
          "    }",
          "    assert_eq!(bytes_mut.get_vec_pos(), (data_ptr >> VEC_POS_OFFSET));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data: *mut Shared = &mut Shared {",
          "        vec: vec![1u8, 2, 3],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let data_ptr = data as usize | KIND_VEC; // Set KIND_VEC",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(data as *mut u8).unwrap(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: data_ptr as *mut Shared,",
          "    };",
          "    unsafe {",
          "        bytes_mut.data = (data_ptr >> 31) as *mut Shared; // Simulate valid vec position",
          "        let _ = bytes_mut.get_vec_pos();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.get_vec_pos(), (data_ptr >> VEC_POS_OFFSET));",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.data as usize & KIND_MASK == KIND_VEC);",
          "    assert!(bytes_mut.len() <= bytes_mut.cap);"
        ],
        "code": [
          "{",
          "    let data: *mut Shared = &mut Shared {",
          "        vec: vec![1u8, 2, 3],",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    };",
          "    let data_ptr = data as usize | KIND_VEC; // Set KIND_VEC",
          "    let mut bytes_mut = BytesMut {",
          "        ptr: NonNull::new(data as *mut u8).unwrap(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: data_ptr as *mut Shared,",
          "    };",
          "    unsafe {",
          "        bytes_mut.data = (data_ptr >> 31) as *mut Shared; // Simulate valid vec position",
          "        let _ = bytes_mut.get_vec_pos();",
          "    }",
          "    assert_eq!(bytes_mut.get_vec_pos(), (data_ptr >> VEC_POS_OFFSET));",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.data as usize & KIND_MASK == KIND_VEC);",
          "    assert!(bytes_mut.len() <= bytes_mut.cap);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]