[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _result = buf.get_u64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.get_u64_ne(), 0x0102030405060708);",
          "    assert_panics!(buf.get_u64_ne());",
          "    buf.advance(8);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = b\"\";",
          "    assert_panics!(buf.get_u64_ne());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _result = buf.get_u64_ne();",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.get_u64_ne(), 0x0102030405060708);",
          "    assert_panics!(buf.get_u64_ne());",
          "    buf.advance(8);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = b\"\";",
          "    assert_panics!(buf.get_u64_ne());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\";",
          "    let _result = buf.get_u64_ne();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| { let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"; buf.get_u64_ne(); }).is_err());",
          "    ",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\";",
          "    let expected_bytes_needed = 8;",
          "    let buffer_length = buf.len();",
          "    assert!(buffer_length < expected_bytes_needed);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\";",
          "    let _result = buf.get_u64_ne();",
          "    assert!(std::panic::catch_unwind(|| { let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"; buf.get_u64_ne(); }).is_err());",
          "    ",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\";",
          "    let expected_bytes_needed = 8;",
          "    let buffer_length = buf.len();",
          "    assert!(buffer_length < expected_bytes_needed);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 extra data\";",
          "    let _result = buf.get_u64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0x0102030405060708, buf.get_u64_ne());",
          "    let mut buf: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 extra data\";",
          "    assert_eq!(0x0807060504030201, buf.get_u64_ne());",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\";",
          "    assert_panics!(buf.get_u64_ne());",
          "    let mut buf: &[u8] = b\"\";",
          "    assert_panics!(buf.get_u64_ne());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 extra data\";",
          "    let _result = buf.get_u64_ne();",
          "    assert_eq!(0x0102030405060708, buf.get_u64_ne());",
          "    let mut buf: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 extra data\";",
          "    assert_eq!(0x0807060504030201, buf.get_u64_ne());",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\";",
          "    assert_panics!(buf.get_u64_ne());",
          "    let mut buf: &[u8] = b\"\";",
          "    assert_panics!(buf.get_u64_ne());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\";",
          "    let _result = buf.get_u64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0x0102030405060708, buf.get_u64_ne());",
          "    assert_eq!(0x0807060504030201, buf.get_u64_ne());",
          "    let mut buf_short: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\";",
          "    panic::catch_unwind(|| { buf_short.get_u64_ne(); }).is_err();",
          "    let mut buf_empty: &[u8] = b\"\";",
          "    panic::catch_unwind(|| { buf_empty.get_u64_ne(); }).is_err();"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\";",
          "    let _result = buf.get_u64_ne();",
          "    assert_eq!(0x0102030405060708, buf.get_u64_ne());",
          "    assert_eq!(0x0807060504030201, buf.get_u64_ne());",
          "    let mut buf_short: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\";",
          "    panic::catch_unwind(|| { buf_short.get_u64_ne(); }).is_err();",
          "    let mut buf_empty: &[u8] = b\"\";",
          "    panic::catch_unwind(|| { buf_empty.get_u64_ne(); }).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]