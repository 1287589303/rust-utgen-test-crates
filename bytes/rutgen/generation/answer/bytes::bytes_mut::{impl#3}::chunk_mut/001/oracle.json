[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    let _ = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    assert!(bytes_mut.capacity() >= 64);",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
          "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
          "    assert_eq!(bytes_mut.chunk_mut().0.len(), bytes_mut.capacity() - bytes_mut.len());",
          "    assert_eq!(bytes_mut.chunk_mut().0.as_ptr(), bytes_mut.spare_capacity_mut().as_ptr());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    let _ = bytes_mut.chunk_mut();",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    assert!(bytes_mut.capacity() >= 64);",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
          "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
          "    assert_eq!(bytes_mut.chunk_mut().0.len(), bytes_mut.capacity() - bytes_mut.len());",
          "    assert_eq!(bytes_mut.chunk_mut().0.as_ptr(), bytes_mut.spare_capacity_mut().as_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(128);",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    let _ = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    assert_eq!(bytes_mut.spare_capacity_mut().len(), 64);",
          "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
          "    assert!(bytes_mut.chunk_mut().0.len() >= 64);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(128);",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    let _ = bytes_mut.chunk_mut();",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    assert_eq!(bytes_mut.spare_capacity_mut().len(), 64);",
          "    assert!(bytes_mut.spare_capacity_mut().as_ptr() != ptr::null_mut());",
          "    assert!(bytes_mut.chunk_mut().0.len() >= 64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    bytes_mut.reserve(64);",
          "    let _ = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    bytes_mut.reserve(64);",
          "    let result = bytes_mut.chunk_mut();",
          "    assert!(result.len() > 0);",
          "    assert_eq!(result.as_slice().len(), bytes_mut.capacity() - bytes_mut.len());",
          "    assert_eq!(bytes_mut.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    bytes_mut.reserve(64);",
          "    let _ = bytes_mut.chunk_mut();",
          "    assert_eq!(bytes_mut.capacity(), bytes_mut.len());",
          "    bytes_mut.reserve(64);",
          "    let result = bytes_mut.chunk_mut();",
          "    assert!(result.len() > 0);",
          "    assert_eq!(result.as_slice().len(), bytes_mut.capacity() - bytes_mut.len());",
          "    assert_eq!(bytes_mut.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    let _ = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    bytes_mut.resize(64, 0);",
          "    let result = bytes_mut.chunk_mut();",
          "    assert_eq!(result.0.len(), 64);",
          "    assert!(bytes_mut.capacity() > bytes_mut.len());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    let _ = bytes_mut.chunk_mut();",
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    bytes_mut.resize(64, 0);",
          "    let result = bytes_mut.chunk_mut();",
          "    assert_eq!(result.0.len(), 64);",
          "    assert!(bytes_mut.capacity() > bytes_mut.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]