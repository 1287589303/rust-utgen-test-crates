[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(128);",
          "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    let mut bytes_mut = BytesMut::with_capacity(128);",
          "    unsafe { bytes_mut.set_len(64); }",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert_eq!(bytes_mut.capacity(), 128);",
          "    assert_eq!(bytes_mut.len(), 64);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert!(!bytes_mut.spare_capacity_mut().is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(128);",
          "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    let mut bytes_mut = BytesMut::with_capacity(128);",
          "    unsafe { bytes_mut.set_len(64); }",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert_eq!(bytes_mut.capacity(), 128);",
          "    assert_eq!(bytes_mut.len(), 64);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert!(!bytes_mut.spare_capacity_mut().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    unsafe { bytes_mut.set_len(32); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    unsafe { bytes_mut.set_len(32); }",
          "    assert_eq!(bytes_mut.capacity(), 64);",
          "    assert_eq!(bytes_mut.len(), 32);",
          "    let slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert!(slice.0.len() > 0);",
          "    assert!(bytes_mut.capacity() > bytes_mut.len());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    unsafe { bytes_mut.set_len(32); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    let mut bytes_mut = BytesMut::with_capacity(64);",
          "    unsafe { bytes_mut.set_len(32); }",
          "    assert_eq!(bytes_mut.capacity(), 64);",
          "    assert_eq!(bytes_mut.len(), 32);",
          "    let slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert!(slice.0.len() > 0);",
          "    assert!(bytes_mut.capacity() > bytes_mut.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(256);",
          "    unsafe { bytes_mut.set_len(128); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert!(bytes_mut.capacity() > bytes_mut.len());",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert!(!bytes_mut.spare_capacity_mut().is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(256);",
          "    unsafe { bytes_mut.set_len(128); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert!(bytes_mut.capacity() > bytes_mut.len());",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert!(!bytes_mut.spare_capacity_mut().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(65);",
          "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.capacity(), 65);",
          "    assert_eq!(bytes_mut.len(), 64);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(65);",
          "    unsafe { bytes_mut.set_len(64); } // Set length to less than capacity",
          "    let _slice: &mut UninitSlice = bytes_mut.chunk_mut();",
          "    assert_eq!(bytes_mut.capacity(), 65);",
          "    assert_eq!(bytes_mut.len(), 64);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]