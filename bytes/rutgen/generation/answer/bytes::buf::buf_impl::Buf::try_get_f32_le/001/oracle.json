[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    assert_eq!(buf.try_get_f32_le(), Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "    buf = &b\"\\x00\\x00\\x00\\x00\"[..];",
          "    assert!(buf.try_get_f32_le().is_ok());",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    assert_eq!(buf.try_get_f32_le(), Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "    buf = &b\"\\x00\\x00\\x00\\x00\"[..];",
          "    assert!(buf.try_get_f32_le().is_ok());",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 2}));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 2}));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x9A\\x99\\x99\\x3F\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1.2f32, result.unwrap());",
          "    assert_eq!(0, buf.remaining());",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), result);",
          "    assert_eq!(3, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x9A\\x99\\x99\\x3F\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(1.2f32, result.unwrap());",
          "    assert_eq!(0, buf.remaining());",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), result);",
          "    assert_eq!(3, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]