[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(1.2f32));",
          "    assert_eq!(buf.remaining(), 6);",
          "    let mut buf_error = &mut &b\"\\x3F\\x99\\x99\"[..];",
          "    let error_result = buf_error.try_get_f32_le();",
          "    assert_eq!(error_result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf_error.remaining(), 3);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Ok(1.2f32));",
          "    assert_eq!(buf.remaining(), 6);",
          "    let mut buf_error = &mut &b\"\\x3F\\x99\\x99\"[..];",
          "    let error_result = buf_error.try_get_f32_le();",
          "    assert_eq!(error_result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf_error.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "    let mut buf_valid = &mut &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let result_valid = buf_valid.try_get_f32_le();",
          "    assert_eq!(result_valid, Ok(1.2f32));",
          "    assert_eq!(buf_valid.remaining(), 6);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "    let mut buf_valid = &mut &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let result_valid = buf_valid.try_get_f32_le();",
          "    assert_eq!(result_valid, Ok(1.2f32));",
          "    assert_eq!(buf_valid.remaining(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x9A\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x9A\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\"[..];",
          "    let result = buf.try_get_f32_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(f32::from_bits(0)));",
          "    assert_eq!(result, Ok(f32::from_bits(0x3F99999A)));",
          "    buf.try_get_u32_le();",
          "    let mut buf = &mut &b\"\\x00\\x00\\x00\\x00\"[..];",
          "    buf.try_get_u32_le();",
          "    assert_eq!(result, Ok(f32::from_bits(0.0)));",
          "    buf.try_get_u32_le();",
          "    let mut buf = &mut &b\"\\x3F\\x99\\x99\\x9A\"[..];",
          "    assert_eq!(result, Ok(1.2f32));",
          "    buf.try_get_u32_le();",
          "    let mut buf = &mut &b\"\\x3F\\x99\\x99\"[..];",
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 3}));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\"[..];",
          "    let result = buf.try_get_f32_le();",
          "    assert_eq!(result, Ok(f32::from_bits(0)));",
          "    assert_eq!(result, Ok(f32::from_bits(0x3F99999A)));",
          "    buf.try_get_u32_le();",
          "    let mut buf = &mut &b\"\\x00\\x00\\x00\\x00\"[..];",
          "    buf.try_get_u32_le();",
          "    assert_eq!(result, Ok(f32::from_bits(0.0)));",
          "    buf.try_get_u32_le();",
          "    let mut buf = &mut &b\"\\x3F\\x99\\x99\\x9A\"[..];",
          "    assert_eq!(result, Ok(1.2f32));",
          "    buf.try_get_u32_le();",
          "    let mut buf = &mut &b\"\\x3F\\x99\\x99\"[..];",
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 3}));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]