[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [];",
          "    unsafe { buffer.advance_mut(1) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| unsafe { buffer.advance_mut(1) }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [];",
          "    unsafe { buffer.advance_mut(1) };",
          "    assert_eq!(std::panic::catch_unwind(|| unsafe { buffer.advance_mut(1) }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit()];",
          "    unsafe { buffer.advance_mut(2) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(panic_advance_called, true);",
          "    assert_eq!(expected_requested, 2);",
          "    assert_eq!(expected_available, 1);",
          "    assert!(std::any::panic::catch_unwind(|| { unsafe { buffer.advance_mut(2) } }).is_err());",
          "    assert_eq!(buffer.len(), 1);",
          "    assert!(buffer.is_empty());"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit()];",
          "    unsafe { buffer.advance_mut(2) };",
          "    assert_eq!(panic_advance_called, true);",
          "    assert_eq!(expected_requested, 2);",
          "    assert_eq!(expected_available, 1);",
          "    assert!(std::any::panic::catch_unwind(|| { unsafe { buffer.advance_mut(2) } }).is_err());",
          "    assert_eq!(buffer.len(), 1);",
          "    assert!(buffer.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    unsafe { buffer.advance_mut(4) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    unsafe { buffer.advance_mut(4) };",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    unsafe { buffer.advance_mut(4) };",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    unsafe { buffer.advance_mut(4) };",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]