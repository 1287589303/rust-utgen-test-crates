[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [];",
          "    unsafe { buf.advance_mut(0) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    unsafe { buf.advance_mut(0) };",
          "    assert_eq!(buf.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [];",
          "    unsafe { buf.advance_mut(0) };",
          "    assert_eq!(buf.len(), 0);",
          "    unsafe { buf.advance_mut(0) };",
          "    assert_eq!(buf.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(1) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert!(buf.has_remaining_mut() == false);"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(1) };",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert!(buf.has_remaining_mut() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(2) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsafe { buf.len() }, 0);",
          "    assert!(buf.is_empty());",
          "    assert!(unsafe { core::mem::transmute::<&mut [core::mem::MaybeUninit<u8>], &[u8; 0]>(&buf) }.is_empty());"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(2) };",
          "    assert_eq!(unsafe { buf.len() }, 0);",
          "    assert!(buf.is_empty());",
          "    assert!(unsafe { core::mem::transmute::<&mut [core::mem::MaybeUninit<u8>], &[u8; 0]>(&buf) }.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(3) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(3) };",
          "    assert_eq!(buf.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(4) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.as_mut_ptr() as usize, &mut [].as_mut_ptr() as usize);",
          "    assert!(buf.is_empty());",
          "    assert!(core::mem::MaybeUninit::<u8>::uninit().assume_init_err() == 0);",
          "    assert!(core::mem::MaybeUninit::<u8>::uninit().assume_init_err() != 1);"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit(), core::mem::MaybeUninit::uninit()];",
          "    unsafe { buf.advance_mut(4) };",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.as_mut_ptr() as usize, &mut [].as_mut_ptr() as usize);",
          "    assert!(buf.is_empty());",
          "    assert!(core::mem::MaybeUninit::<u8>::uninit().assume_init_err() == 0);",
          "    assert!(core::mem::MaybeUninit::<u8>::uninit().assume_init_err() != 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]