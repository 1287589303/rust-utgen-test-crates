[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() = 5, self.len() = 3",
          "    buffer.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    panic_advance(&TryGetError { requested: 5, available: 3 });"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() = 5, self.len() = 3",
          "    buffer.put_slice(src);",
          "    panic_advance(&TryGetError { requested: 5, available: 3 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let src: &[u8] = &[1]; // src.len() = 1, self.len() = 0",
          "    buffer.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(src.len(), 1);",
          "    let result = std::panic::catch_unwind(|| { buffer.put_slice(src); });",
          "    assert!(result.is_err());",
          "    assert_eq!(buffer.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let src: &[u8] = &[1]; // src.len() = 1, self.len() = 0",
          "    buffer.put_slice(src);",
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(src.len(), 1);",
          "    let result = std::panic::catch_unwind(|| { buffer.put_slice(src); });",
          "    assert!(result.is_err());",
          "    assert_eq!(buffer.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // src.len() = 11, self.len() = 10",
          "    buffer.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    panic_advance(&TryGetError { requested: 11, available: 10 });"
        ],
        "code": [
          "{",
          "    let mut buffer: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 10];",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // src.len() = 11, self.len() = 10",
          "    buffer.put_slice(src);",
          "    panic_advance(&TryGetError { requested: 11, available: 10 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]