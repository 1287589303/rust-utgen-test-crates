[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.advance_mut(bytes_mut.capacity() + 1); // cnt > remaining",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe { bytes_mut.advance_mut(bytes_mut.capacity() + 1); }",
          "    }).is_err());",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 10);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.advance_mut(bytes_mut.capacity() + 1); // cnt > remaining",
          "    }",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe { bytes_mut.advance_mut(bytes_mut.capacity() + 1); }",
          "    }).is_err());",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(5);",
          "    bytes_mut.resize(5, 0); // Fill to capacity",
          "    unsafe {",
          "        bytes_mut.advance_mut(6); // cnt > remaining",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut bytes_mut = BytesMut::with_capacity(5);",
          "    bytes_mut.resize(5, 0);",
          "    unsafe {",
          "    bytes_mut.advance_mut(6);",
          "    }",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(5);",
          "    bytes_mut.resize(5, 0); // Fill to capacity",
          "    unsafe {",
          "        bytes_mut.advance_mut(6); // cnt > remaining",
          "    }",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut bytes_mut = BytesMut::with_capacity(5);",
          "    bytes_mut.resize(5, 0);",
          "    unsafe {",
          "    bytes_mut.advance_mut(6);",
          "    }",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]