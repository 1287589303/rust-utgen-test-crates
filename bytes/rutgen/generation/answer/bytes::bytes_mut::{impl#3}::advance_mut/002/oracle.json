[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(10);",
          "        bytes_mut.advance_mut(0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(bytes_mut.len() == 10);",
          "    assert!(bytes_mut.remaining_mut() == 0);",
          "    assert!(bytes_mut.cap == 10);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(10);",
          "        bytes_mut.advance_mut(0);",
          "    }",
          "    assert!(bytes_mut.len() == 10);",
          "    assert!(bytes_mut.remaining_mut() == 0);",
          "    assert!(bytes_mut.cap == 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe {",
          "        bytes_mut.set_len(10);",
          "        bytes_mut.advance_mut(10);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 20);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(bytes_mut.capacity() >= 20);",
          "    assert!(unsafe { bytes_mut.as_slice_mut() }.len() >= 10);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe {",
          "        bytes_mut.set_len(10);",
          "        bytes_mut.advance_mut(10);",
          "    }",
          "    assert_eq!(bytes_mut.len(), 20);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(bytes_mut.capacity() >= 20);",
          "    assert!(unsafe { bytes_mut.as_slice_mut() }.len() >= 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(15);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "        bytes_mut.advance_mut(10);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 15);",
          "    assert!(bytes_mut.cap() >= 15);",
          "    assert!(bytes_mut.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(15);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "        bytes_mut.advance_mut(10);",
          "    }",
          "    assert_eq!(bytes_mut.len(), 15);",
          "    assert!(bytes_mut.cap() >= 15);",
          "    assert!(bytes_mut.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]