[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(8);",
          "    buf.put_int(0x0504010203, 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.data, vec![0x01, 0x02, 0x03, 0, 0, 0, 0, 0]);",
          "    assert_eq!(buf.cursor, 3);",
          "    ",
          "    let mut buf2 = TestBuf::new(8);",
          "    buf2.put_int(0x0102030405060708, 8);",
          "    assert_eq!(buf2.data, vec![0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]);",
          "    assert_eq!(buf2.cursor, 8);",
          "    ",
          "    let mut buf3 = TestBuf::new(8);",
          "    buf3.put_int(0x0102030405060708, 7);",
          "    assert_eq!(buf3.data[..7], vec![0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]);",
          "    assert_eq!(buf3.cursor, 7);",
          "    ",
          "    let mut buf4 = TestBuf::new(8);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf4.put_int(0x0102030405060708, 9);",
          "    });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(8);",
          "    buf.put_int(0x0504010203, 3);",
          "    assert_eq!(buf.data, vec![0x01, 0x02, 0x03, 0, 0, 0, 0, 0]);",
          "    assert_eq!(buf.cursor, 3);",
          "    ",
          "    let mut buf2 = TestBuf::new(8);",
          "    buf2.put_int(0x0102030405060708, 8);",
          "    assert_eq!(buf2.data, vec![0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]);",
          "    assert_eq!(buf2.cursor, 8);",
          "    ",
          "    let mut buf3 = TestBuf::new(8);",
          "    buf3.put_int(0x0102030405060708, 7);",
          "    assert_eq!(buf3.data[..7], vec![0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]);",
          "    assert_eq!(buf3.cursor, 7);",
          "    ",
          "    let mut buf4 = TestBuf::new(8);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf4.put_int(0x0102030405060708, 9);",
          "    });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(8);",
          "    buf.put_int(0x0504010203, 8);",
          "}"
        ],
        "oracle": [
          "    buf.put_int(0x0504010203, 3); assert_eq!(buf.data, vec![0, 1, 2, 3, 0, 0, 0, 0]);",
          "    buf.put_int(0x1234567890abcdef, 8); assert_eq!(buf.data, vec![0xab, 0xcd, 0xef, 0x90, 0x78, 0x56, 0x34, 0x12]);",
          "    buf.put_int(0xFFFFFFFFFFFFFFFF, 8); assert_eq!(buf.data, vec![0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);",
          "    assert_panics!(buf.put_int(0x0504010203, 9));",
          "    buf.put_int(0x00, 0); assert_eq!(buf.data, vec![0, 1, 2, 3, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(8);",
          "    buf.put_int(0x0504010203, 8);",
          "    buf.put_int(0x0504010203, 3); assert_eq!(buf.data, vec![0, 1, 2, 3, 0, 0, 0, 0]);",
          "    buf.put_int(0x1234567890abcdef, 8); assert_eq!(buf.data, vec![0xab, 0xcd, 0xef, 0x90, 0x78, 0x56, 0x34, 0x12]);",
          "    buf.put_int(0xFFFFFFFFFFFFFFFF, 8); assert_eq!(buf.data, vec![0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);",
          "    assert_panics!(buf.put_int(0x0504010203, 9));",
          "    buf.put_int(0x00, 0); assert_eq!(buf.data, vec![0, 1, 2, 3, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(8);",
          "    buf.put_int(0x0504010203, 9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 9)).is_err(), true);",
          "    assert_eq!(buf.remaining_mut(), 8);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(8);",
          "    buf.put_int(0x0504010203, 9);",
          "    assert_eq!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 9)).is_err(), true);",
          "    assert_eq!(buf.remaining_mut(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_int(0x0504010203, 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert_eq!(&buf.data, &[0x01, 0x02, 0x03, 0, 0]);",
          "    assert!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 9)).is_err());",
          "    assert!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 3)).is_err());",
          "    assert!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 2)).is_err());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        cursor: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            Self {",
          "                data: vec![0; capacity],",
          "                cursor: 0,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.cursor",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.cursor += cnt;",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            let cnt = src.len();",
          "            self.data[self.cursor..self.cursor + cnt].copy_from_slice(src);",
          "            unsafe { self.advance_mut(cnt) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_int(0x0504010203, 3);",
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert_eq!(&buf.data, &[0x01, 0x02, 0x03, 0, 0]);",
          "    assert!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 9)).is_err());",
          "    assert!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 3)).is_err());",
          "    assert!(std::panic::catch_unwind(|| buf.put_int(0x0504010203, 2)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]