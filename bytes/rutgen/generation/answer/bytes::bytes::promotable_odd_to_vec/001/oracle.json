[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(0u8))).unwrap().as_ptr();",
          "    let len: usize = 0;",
          "",
          "    unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "}"
        ],
        "oracle": [
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(0u8))).unwrap().as_ptr();",
          "    let len: usize = 0;",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "    assert!(result.is_empty());"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(0u8))).unwrap().as_ptr();",
          "    let len: usize = 0;",
          "",
          "    unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(0u8))).unwrap().as_ptr();",
          "    let len: usize = 0;",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "    assert!(result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(42u8))).unwrap().as_ptr();",
          "    let len: usize = 1;",
          "",
          "    unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "}"
        ],
        "oracle": [
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(42u8))).unwrap().as_ptr();",
          "    let len: usize = 1;",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "    assert_eq!(result, vec![42u8]);",
          "    assert_eq!(result.len(), len);",
          "    assert!(result.capacity() >= len);"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(42u8))).unwrap().as_ptr();",
          "    let len: usize = 1;",
          "",
          "    unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new(42u8))).unwrap().as_ptr();",
          "    let len: usize = 1;",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, len) };",
          "    assert_eq!(result, vec![42u8]);",
          "    assert_eq!(result.len(), len);",
          "    assert!(result.capacity() >= len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let max_len: usize = usize::MAX;",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new([0u8; usize::MAX as usize]))).unwrap().as_ptr();",
          "",
          "    unsafe { promotable_odd_to_vec(&data, ptr, max_len) };",
          "}"
        ],
        "oracle": [
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    assert!(promotable_odd_to_vec(&data, ptr, 0).is_empty());",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, 1) };",
          "    assert_eq!(result.len(), 1);",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, 10) };",
          "    assert_eq!(result.len(), 10);",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, 100) };",
          "    assert_eq!(result.len(), 100);",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, usize::MAX) };",
          "    assert!(result.len() <= usize::MAX);",
          "    assert!(result.capacity() >= result.len());"
        ],
        "code": [
          "{",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    let max_len: usize = usize::MAX;",
          "    let ptr: *const u8 = NonNull::new(Box::into_raw(Box::new([0u8; usize::MAX as usize]))).unwrap().as_ptr();",
          "",
          "    unsafe { promotable_odd_to_vec(&data, ptr, max_len) };",
          "    let data = AtomicPtr::new(NonNull::new(Box::into_raw(Box::new(1u8))).unwrap().as_ptr() as *mut ());",
          "    assert!(promotable_odd_to_vec(&data, ptr, 0).is_empty());",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, 1) };",
          "    assert_eq!(result.len(), 1);",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, 10) };",
          "    assert_eq!(result.len(), 10);",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, 100) };",
          "    assert_eq!(result.len(), 100);",
          "    let result = unsafe { promotable_odd_to_vec(&data, ptr, usize::MAX) };",
          "    assert!(result.len() <= usize::MAX);",
          "    assert!(result.capacity() >= result.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]