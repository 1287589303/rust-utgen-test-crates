[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &0x01u64.to_ne_bytes(); // 8 bytes for a successful read",
          "    let result = buf.try_get_i64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 8);",
          "    assert_eq!(result, Ok(0x01i64));",
          "    assert!(buf.remaining() == 0);",
          "    assert!(buf.has_remaining() == false);",
          "    assert!(matches!(result, Ok(_)));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &0x01u64.to_ne_bytes(); // 8 bytes for a successful read",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(buf.remaining(), 8);",
          "    assert_eq!(result, Ok(0x01i64));",
          "    assert!(buf.remaining() == 0);",
          "    assert!(buf.has_remaining() == false);",
          "    assert!(matches!(result, Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &(i64::MAX as u64).to_ne_bytes(); // 8 bytes for max signed 64-bit",
          "    let result = buf.try_get_i64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 8);",
          "    assert_eq!(result, Ok(i64::MAX));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &(i64::MAX as u64).to_ne_bytes(); // 8 bytes for max signed 64-bit",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(buf.remaining(), 8);",
          "    assert_eq!(result, Ok(i64::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &(i64::MIN as u64).to_ne_bytes(); // 8 bytes for min signed 64-bit",
          "    let result = buf.try_get_i64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(i64::MIN), result);",
          "    assert_eq!(0, buf.remaining());",
          "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Ok(0x0102030405060708), result);",
          "    assert_eq!(0, buf.remaining());",
          "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &(i64::MIN as u64).to_ne_bytes(); // 8 bytes for min signed 64-bit",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Ok(i64::MIN), result);",
          "    assert_eq!(0, buf.remaining());",
          "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Ok(0x0102030405060708), result);",
          "    assert_eq!(0, buf.remaining());",
          "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..]; // 7 bytes, less than required",
          "    let result = buf.try_get_i64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), result);",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..]; // 7 bytes, less than required",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), result);",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &[0u8; 8]; // 8 bytes, all zeros",
          "    let result = buf.try_get_i64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(0));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_i64_ne(), Err(TryGetError{requested: 8, available: 0}));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = &[1, 2, 3, 4, 5, 6, 7, 8];",
          "    assert_eq!(buf.try_get_i64_ne(), Ok(0x0102030405060708_i64));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &[0u8; 8]; // 8 bytes, all zeros",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(result, Ok(0));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_i64_ne(), Err(TryGetError{requested: 8, available: 0}));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = &[1, 2, 3, 4, 5, 6, 7, 8];",
          "    assert_eq!(buf.try_get_i64_ne(), Ok(0x0102030405060708_i64));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &(0x7FFFFFFFFFFFFFFFu64).to_ne_bytes(); // Maximum large positive value",
          "    let result = buf.try_get_i64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x7FFFFFFFFFFFFFFF_i64), result);",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &(0x7FFFFFFFFFFFFFFFu64).to_ne_bytes(); // Maximum large positive value",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Ok(0x7FFFFFFFFFFFFFFF_i64), result);",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), result);",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &(0x8000000000000000u64).to_ne_bytes(); // Minimum large negative value",
          "    let result = buf.try_get_i64_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x8000000000000000_i64), result);",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &(0x8000000000000000u64).to_ne_bytes(); // Minimum large negative value",
          "    let result = buf.try_get_i64_ne();",
          "    assert_eq!(Ok(0x8000000000000000_i64), result);",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]