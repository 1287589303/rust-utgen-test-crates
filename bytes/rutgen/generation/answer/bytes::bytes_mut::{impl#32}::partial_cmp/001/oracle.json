[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[1, 2, 3, 4];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.partial_cmp(other), Some(cmp::Ordering::Equal));",
          "    let other_diff: &[u8] = &[1, 2, 3, 5];",
          "    assert_eq!(bytes_mut.partial_cmp(other_diff), Some(cmp::Ordering::Less));",
          "    let other_longer: &[u8] = &[1, 2, 3, 4, 5];",
          "    assert_eq!(bytes_mut.partial_cmp(other_longer), Some(cmp::Ordering::Less));",
          "    let other_shorter: &[u8] = &[1, 2];",
          "    assert_eq!(bytes_mut.partial_cmp(other_shorter), Some(cmp::Ordering::Greater));",
          "    let other_empty: &[u8] = &[];",
          "    assert_eq!(bytes_mut.partial_cmp(other_empty), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[1, 2, 3, 4];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "    assert_eq!(bytes_mut.partial_cmp(other), Some(cmp::Ordering::Equal));",
          "    let other_diff: &[u8] = &[1, 2, 3, 5];",
          "    assert_eq!(bytes_mut.partial_cmp(other_diff), Some(cmp::Ordering::Less));",
          "    let other_longer: &[u8] = &[1, 2, 3, 4, 5];",
          "    assert_eq!(bytes_mut.partial_cmp(other_longer), Some(cmp::Ordering::Less));",
          "    let other_shorter: &[u8] = &[1, 2];",
          "    assert_eq!(bytes_mut.partial_cmp(other_shorter), Some(cmp::Ordering::Greater));",
          "    let other_empty: &[u8] = &[];",
          "    assert_eq!(bytes_mut.partial_cmp(other_empty), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([5, 6, 7]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[5, 6, 7, 8, 9];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6, 7, 8, 9]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6, 7]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[6, 7, 8]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11, 12]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6, 7, 8, 9, 10]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[7, 8, 9]), Some(cmp::Ordering::Less));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([5, 6, 7]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[5, 6, 7, 8, 9];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6, 7, 8, 9]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6, 7]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[6, 7, 8]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11, 12]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6, 7, 8, 9, 10]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[7, 8, 9]), Some(cmp::Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([10, 11]))).unwrap(),",
          "        len: 2,",
          "        cap: 2,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.partial_cmp(&[]), None);",
          "    assert_eq!(bytes_mut.partial_cmp(&[10]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[12]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11, 12]), Some(cmp::Ordering::Less));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([10, 11]))).unwrap(),",
          "        len: 2,",
          "        cap: 2,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), None);",
          "    assert_eq!(bytes_mut.partial_cmp(&[10]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[12]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11, 12]), Some(cmp::Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([12, 13, 14]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "}"
        ],
        "oracle": [
          "    let bytes_mut = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([12, 13, 14]))).unwrap(),",
          "    len: 3,",
          "    cap: 3,",
          "    data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[12, 13, 14];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "    ",
          "    let other: &[u8] = &[10, 11, 12];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[15, 16, 17];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let other: &[u8] = &[];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[12];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[14, 13, 12];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let other: &[u8] = &[12, 13, 14, 15];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let other: &[u8] = &[11, 10, 9];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([12, 13, 14]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "    let bytes_mut = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([12, 13, 14]))).unwrap(),",
          "    len: 3,",
          "    cap: 3,",
          "    data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[12, 13, 14];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "    ",
          "    let other: &[u8] = &[10, 11, 12];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[15, 16, 17];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let other: &[u8] = &[];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[12];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let other: &[u8] = &[14, 13, 12];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let other: &[u8] = &[12, 13, 14, 15];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let other: &[u8] = &[11, 10, 9];",
          "    let result = bytes_mut.partial_cmp(other);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([15, 16, 17, 18]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[15, 16, 17, 18];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16, 17, 18]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11, 12]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[20, 21, 22]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16, 17, 18, 19]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16, 17, 18]), Some(cmp::Ordering::Equal));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([15, 16, 17, 18]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[15, 16, 17, 18];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16, 17, 18]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[10, 11, 12]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[20, 21, 22]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16, 17, 18, 19]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[15, 16, 17, 18]), Some(cmp::Ordering::Equal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[2, 3, 4];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.partial_cmp(&[2, 3, 4]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[0, 1, 2]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3, 4]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[3, 4, 5]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1]), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[2, 3, 4];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "    assert_eq!(bytes_mut.partial_cmp(&[2, 3, 4]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[0, 1, 2]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3, 4]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[3, 4, 5]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[1]), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([4, 5, 6]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[1, 2, 3];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), None);",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5, 6]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[7, 8, 9]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[0, 1, 2]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5, 6, 7]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[6, 5]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5, 6]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[6]), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([4, 5, 6]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &[u8] = &[1, 2, 3];",
          "    let _ = bytes_mut.partial_cmp(other);",
          "    assert_eq!(bytes_mut.partial_cmp(&[1, 2, 3]), None);",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5, 6]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[7, 8, 9]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[0, 1, 2]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5, 6, 7]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[5, 6]), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes_mut.partial_cmp(&[6, 5]), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes_mut.partial_cmp(&[4, 5, 6]), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes_mut.partial_cmp(&[6]), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]