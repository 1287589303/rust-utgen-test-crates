[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &[u8] = &[];",
          "    buffer.advance(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut buffer: &mut [u8] = &mut [];",
          "    buffer.advance(1);",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut buffer: &[u8] = &[];",
          "    buffer.advance(1);",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut buffer: &mut [u8] = &mut [];",
          "    buffer.advance(1);",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &[u8] = &[1];",
          "    buffer.advance(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(panic_advance(&TryGetError { requested: 2, available: 1 }), ());"
        ],
        "code": [
          "{",
          "    let mut buffer: &[u8] = &[1];",
          "    buffer.advance(2);",
          "    assert_eq!(panic_advance(&TryGetError { requested: 2, available: 1 }), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &[u8] = &[1, 2];",
          "    buffer.advance(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| { buffer.advance(3); }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut buffer: &[u8] = &[1, 2];",
          "    buffer.advance(3);",
          "    assert_eq!(std::panic::catch_unwind(|| { buffer.advance(3); }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buffer: &[u8] = &[1, 2, 3];",
          "    buffer.advance(4);",
          "}"
        ],
        "oracle": [
          "    let buffer: &[u8] = &[1, 2, 3];",
          "    let result = std::panic::catch_unwind(|| { buffer.advance(4); });",
          "    assert!(result.is_err());",
          "    if let Some(err) = result.err() {",
          "    assert!(err.downcast_ref::<&str>().unwrap() == \"advance out of bounds: the len is 3 but advancing by 4\");",
          "    }"
        ],
        "code": [
          "{",
          "    let mut buffer: &[u8] = &[1, 2, 3];",
          "    buffer.advance(4);",
          "    let buffer: &[u8] = &[1, 2, 3];",
          "    let result = std::panic::catch_unwind(|| { buffer.advance(4); });",
          "    assert!(result.is_err());",
          "    if let Some(err) = result.err() {",
          "    assert!(err.downcast_ref::<&str>().unwrap() == \"advance out of bounds: the len is 3 but advancing by 4\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]