[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "    }",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(slice.len(), 5);",
          "    assert_eq!(slice as *const _, bytes_mut.as_slice() as *const _);",
          "    assert_eq!(slice, &bytes_mut.as_slice()[..5]);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "    }",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(slice.len(), 5);",
          "    assert_eq!(slice as *const _, bytes_mut.as_slice() as *const _);",
          "    assert_eq!(slice, &bytes_mut.as_slice()[..5]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut::new();",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "}"
        ],
        "oracle": [
          "    let bytes_mut = BytesMut::new();",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(slice.is_empty());",
          "    assert_eq!(slice.as_ptr(), bytes_mut.as_slice().as_ptr());",
          "    assert!(core::ptr::eq(slice, bytes_mut.as_slice()));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut::new();",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    let bytes_mut = BytesMut::new();",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(slice.is_empty());",
          "    assert_eq!(slice.as_ptr(), bytes_mut.as_slice().as_ptr());",
          "    assert!(core::ptr::eq(slice, bytes_mut.as_slice()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe {",
          "        bytes_mut.set_len(15);",
          "    }",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 15);",
          "    assert_eq!(bytes_mut.capacity(), 20);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert_eq!(slice.len(), 15);",
          "    assert_eq!(slice.as_ptr(), bytes_mut.as_slice().as_ptr());",
          "    assert!(slice.iter().all(|&byte| byte == 0));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(20);",
          "    unsafe {",
          "        bytes_mut.set_len(15);",
          "    }",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    assert_eq!(bytes_mut.len(), 15);",
          "    assert_eq!(bytes_mut.capacity(), 20);",
          "    assert!(!bytes_mut.is_empty());",
          "    assert_eq!(slice.len(), 15);",
          "    assert_eq!(slice.as_ptr(), bytes_mut.as_slice().as_ptr());",
          "    assert!(slice.iter().all(|&byte| byte == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::zeroed(10);",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "}"
        ],
        "oracle": [
          "    let mut bytes_mut = BytesMut::zeroed(10);",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    assert_eq!(slice.len(), 10);",
          "    assert!(slice.iter().all(|&x| x == 0));",
          "    assert_eq!(bytes_mut.len(), 10);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(!bytes_mut.is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::zeroed(10);",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    let mut bytes_mut = BytesMut::zeroed(10);",
          "    let slice: &[u8] = bytes_mut.as_ref();",
          "    assert_eq!(slice.len(), 10);",
          "    assert!(slice.iter().all(|&x| x == 0));",
          "    assert_eq!(bytes_mut.len(), 10);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(!bytes_mut.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "    }",
          "    let other = bytes_mut.split();",
          "    let slice: &[u8] = other.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(other.len(), 5);",
          "    assert_eq!(other.as_ref(), bytes_mut.as_slice());",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(bytes_mut.as_ref().iter().all(|&x| x == 0));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.set_len(5);",
          "    }",
          "    let other = bytes_mut.split();",
          "    let slice: &[u8] = other.as_ref();",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(other.len(), 5);",
          "    assert_eq!(other.as_ref(), bytes_mut.as_slice());",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(bytes_mut.as_ref().iter().all(|&x| x == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]