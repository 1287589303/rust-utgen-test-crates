[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chain = Chain::new(&b\"test\"[..], &b\"chain\"[..]);",
          "    let (first, last) = chain.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first[..], b\"test\"[..]);",
          "    assert_eq!(last[..], b\"chain\"[..]);"
        ],
        "code": [
          "{",
          "    let chain = Chain::new(&b\"test\"[..], &b\"chain\"[..]);",
          "    let (first, last) = chain.into_inner();",
          "    assert_eq!(first[..], b\"test\"[..]);",
          "    assert_eq!(last[..], b\"chain\"[..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chain = Chain::new(vec![1, 2, 3], vec![4, 5, 6]);",
          "    let (first, last) = chain.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first, vec![1, 2, 3]);",
          "    assert_eq!(last, vec![4, 5, 6]);"
        ],
        "code": [
          "{",
          "    let chain = Chain::new(vec![1, 2, 3], vec![4, 5, 6]);",
          "    let (first, last) = chain.into_inner();",
          "    assert_eq!(first, vec![1, 2, 3]);",
          "    assert_eq!(last, vec![4, 5, 6]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chain = Chain::new(String::from(\"hello\"), String::from(\"world\"));",
          "    let (first, last) = chain.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first, String::from(\"hello\"));",
          "    assert_eq!(last, String::from(\"world\"));"
        ],
        "code": [
          "{",
          "    let chain = Chain::new(String::from(\"hello\"), String::from(\"world\"));",
          "    let (first, last) = chain.into_inner();",
          "    assert_eq!(first, String::from(\"hello\"));",
          "    assert_eq!(last, String::from(\"world\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chain = Chain::new(Some(42), None);",
          "    let (first, last) = chain.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first, Some(42));",
          "    assert_eq!(last, None);"
        ],
        "code": [
          "{",
          "    let chain = Chain::new(Some(42), None);",
          "    let (first, last) = chain.into_inner();",
          "    assert_eq!(first, Some(42));",
          "    assert_eq!(last, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chain = Chain::new(&b\"\"[..], &b\"\"[..]);",
          "    let (first, last) = chain.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first, &b\"\"[..]);",
          "    assert_eq!(last, &b\"\"[..]);"
        ],
        "code": [
          "{",
          "    let chain = Chain::new(&b\"\"[..], &b\"\"[..]);",
          "    let (first, last) = chain.into_inner();",
          "    assert_eq!(first, &b\"\"[..]);",
          "    assert_eq!(last, &b\"\"[..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let chain = Chain::new(vec![], vec![]);",
          "    let (first, last) = chain.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first, vec![]);",
          "    assert_eq!(last, vec![]);"
        ],
        "code": [
          "{",
          "    let chain = Chain::new(vec![], vec![]);",
          "    let (first, last) = chain.into_inner();",
          "    assert_eq!(first, vec![]);",
          "    assert_eq!(last, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let large_vec_a = (0..1000).collect::<Vec<_>>();",
          "    let large_vec_b = (1000..2000).collect::<Vec<_>>();",
          "    let chain = Chain::new(large_vec_a, large_vec_b);",
          "    let (first, last) = chain.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(first, large_vec_a);",
          "    assert_eq!(last, large_vec_b);",
          "    assert_eq!(first.len(), 1000);",
          "    assert_eq!(last.len(), 1000);",
          "    assert_eq!(first[0], 0);",
          "    assert_eq!(last[0], 1000);",
          "    assert_eq!(first[999], 999);",
          "    assert_eq!(last[999], 1999);"
        ],
        "code": [
          "{",
          "    let large_vec_a = (0..1000).collect::<Vec<_>>();",
          "    let large_vec_b = (1000..2000).collect::<Vec<_>>();",
          "    let chain = Chain::new(large_vec_a, large_vec_b);",
          "    let (first, last) = chain.into_inner();",
          "    assert_eq!(first, large_vec_a);",
          "    assert_eq!(last, large_vec_b);",
          "    assert_eq!(first.len(), 1000);",
          "    assert_eq!(last.len(), 1000);",
          "    assert_eq!(first[0], 0);",
          "    assert_eq!(last[0], 1000);",
          "    assert_eq!(first[999], 999);",
          "    assert_eq!(last[999], 1999);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]