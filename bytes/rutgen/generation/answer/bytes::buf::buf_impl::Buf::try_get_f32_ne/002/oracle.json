[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(f32::from_bits(0x3F99999A)));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.try_get_f32_ne(), Err(TryGetError{requested: 4, available: 3}));",
          "    buf.advance(4);",
          "    assert!(buf.has_remaining());",
          "    buf.copy_to_slice(&mut [0u8; 3]);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "    assert_eq!(result, Ok(f32::from_bits(0x3F99999A)));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.try_get_f32_ne(), Err(TryGetError{requested: 4, available: 3}));",
          "    buf.advance(4);",
          "    assert!(buf.has_remaining());",
          "    buf.copy_to_slice(&mut [0u8; 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(f32::from_bits(0x9A99999A)));",
          "    assert_eq!(buf.remaining(), 3);",
          "    ",
          "    let mut buf_insufficient = &b\"\\x3F\\x99\\x99\"[..];",
          "    let insufficient_result = buf_insufficient.try_get_f32_ne();",
          "    assert_eq!(insufficient_result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf_insufficient.remaining(), 3);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "    assert_eq!(result, Ok(f32::from_bits(0x9A99999A)));",
          "    assert_eq!(buf.remaining(), 3);",
          "    ",
          "    let mut buf_insufficient = &b\"\\x3F\\x99\\x99\"[..];",
          "    let insufficient_result = buf_insufficient.try_get_f32_ne();",
          "    assert_eq!(insufficient_result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf_insufficient.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x3F\\x99\\x99\\x3F\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(1.25));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(buf.has_remaining() == false);",
          "    assert_eq!(buf.try_get_f32_ne(), Ok(1.25));",
          "    ",
          "    let mut buf = &b\"\\x99\\x99\\x99\"[..];",
          "    let expected_error = TryGetError { requested: 4, available: 3 };",
          "    assert_eq!(buf.try_get_f32_ne(), Err(expected_error));",
          "    assert_eq!(buf.remaining(), 3);",
          "    assert!(buf.has_remaining() == true);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x3F\\x99\\x99\\x3F\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "    assert_eq!(result, Ok(1.25));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(buf.has_remaining() == false);",
          "    assert_eq!(buf.try_get_f32_ne(), Ok(1.25));",
          "    ",
          "    let mut buf = &b\"\\x99\\x99\\x99\"[..];",
          "    let expected_error = TryGetError { requested: 4, available: 3 };",
          "    assert_eq!(buf.try_get_f32_ne(), Err(expected_error));",
          "    assert_eq!(buf.remaining(), 3);",
          "    assert!(buf.has_remaining() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]