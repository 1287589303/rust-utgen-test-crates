[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    let _ = buf.try_get_f32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_f32_ne());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_full = b\"\\x3F\\x99\\x99\\x9A hello\";",
          "    let mut buf = &buf_full[..];",
          "    let result = buf.try_get_f32_ne();",
          "    assert!(result.is_ok());",
          "    assert_eq!(1.2f32, result.unwrap());",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    let _ = buf.try_get_f32_ne();",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_f32_ne());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_full = b\"\\x3F\\x99\\x99\\x9A hello\";",
          "    let mut buf = &buf_full[..];",
          "    let result = buf.try_get_f32_ne();",
          "    assert!(result.is_ok());",
          "    assert_eq!(1.2f32, result.unwrap());",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x9A\\x99\\x99\\x3F\"[..];",
          "    let _ = buf.try_get_f32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_f32_ne());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];",
          "    assert_eq!(1.2f32, buf.try_get_f32_ne().unwrap());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().requested, 4);",
          "    assert_eq!(result.err().unwrap().available, 3);",
          "    let mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let val = buf.try_get_f32_ne();",
          "    assert!(val.is_ok());",
          "    assert_eq!(val.unwrap(), 1.2f32);",
          "    assert_eq!(buf.remaining(), 6);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x9A\\x99\\x99\\x3F\"[..];",
          "    let _ = buf.try_get_f32_ne();",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_f32_ne());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];",
          "    assert_eq!(1.2f32, buf.try_get_f32_ne().unwrap());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = &b\"\\x3F\\x99\\x99\"[..];",
          "    let result = buf.try_get_f32_ne();",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().requested, 4);",
          "    assert_eq!(result.err().unwrap().available, 3);",
          "    let mut buf = &b\"\\x9A\\x99\\x99\\x3F hello\"[..];",
          "    let val = buf.try_get_f32_ne();",
          "    assert!(val.is_ok());",
          "    assert_eq!(val.unwrap(), 1.2f32);",
          "    assert_eq!(buf.remaining(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]