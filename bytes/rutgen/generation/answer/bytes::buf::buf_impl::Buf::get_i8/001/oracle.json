[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: &'static [u8]) -> Self {",
          "            TestBuf { data, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(&[]);",
          "    buf.get_i8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(std::panic::catch_unwind(|| { buf.get_i8(); }).is_err());",
          "    assert_eq!(buf.position, 0);",
          "    assert_eq!(buf.chunk(), &[]);",
          "    assert_eq!(buf.data.len(), 0);",
          "    assert_eq!(buf.data, &[]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: &'static [u8]) -> Self {",
          "            TestBuf { data, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(&[]);",
          "    buf.get_i8();",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(std::panic::catch_unwind(|| { buf.get_i8(); }).is_err());",
          "    assert_eq!(buf.position, 0);",
          "    assert_eq!(buf.chunk(), &[]);",
          "    assert_eq!(buf.data.len(), 0);",
          "    assert_eq!(buf.data, &[]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: &'static [u8]) -> Self {",
          "            TestBuf { data, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(&[1]);",
          "    buf.advance(1);",
          "    buf.get_i8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    panic_advance(&TryGetError { requested: 1, available: 0 });",
          "    let mut buf = TestBuf::new(&[]);",
          "    buf.get_i8();",
          "    buf.advance(1);",
          "    buf.get_i8();"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: &'static [u8]) -> Self {",
          "            TestBuf { data, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(&[1]);",
          "    buf.advance(1);",
          "    buf.get_i8();",
          "    assert_eq!(buf.remaining(), 0);",
          "    panic_advance(&TryGetError { requested: 1, available: 0 });",
          "    let mut buf = TestBuf::new(&[]);",
          "    buf.get_i8();",
          "    buf.advance(1);",
          "    buf.get_i8();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]