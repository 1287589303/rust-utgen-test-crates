[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                Err(TryGetError { requested: 2, available: self.remaining() })",
          "            } else {",
          "                let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "                self.position += 2;",
          "                Ok(u16::from_be_bytes(bytes))",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\"[..], position: 0 };",
          "    let result = buf.try_get_u16();",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 0 }));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 0 }));",
          "    let mut buf = TestBuf { data: &b\"\\x08\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_u16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09\\x0a\"[..], position: 0 };",
          "    let result = buf.try_get_u16();",
          "    assert_eq!(result, Ok(0x0809));",
          "    assert_eq!(buf.remaining(), 1);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                Err(TryGetError { requested: 2, available: self.remaining() })",
          "            } else {",
          "                let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "                self.position += 2;",
          "                Ok(u16::from_be_bytes(bytes))",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\"[..], position: 0 };",
          "    let result = buf.try_get_u16();",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 0 }));",
          "    let mut buf = TestBuf { data: &b\"\\x08\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_u16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09\\x0a\"[..], position: 0 };",
          "    let result = buf.try_get_u16();",
          "    assert_eq!(result, Ok(0x0809));",
          "    assert_eq!(buf.remaining(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                Err(TryGetError { requested: 2, available: self.remaining() })",
          "            } else {",
          "                let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "                self.position += 2;",
          "                Ok(u16::from_be_bytes(bytes))",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x01\"[..], position: 0 };",
          "    let result = buf.try_get_u16();",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 1);",
          "    assert!(buf.try_get_u16().is_err());",
          "    assert_eq!(buf.try_get_u16().err(), Some(TryGetError { requested: 2, available: 1 }));",
          "    buf.position = 0;",
          "    let mut buf2 = TestBuf { data: &b\"\\x01\\x02\"[..], position: 0 };",
          "    assert_eq!(buf2.try_get_u16().unwrap(), 0x0102_u16);",
          "    assert_eq!(buf2.remaining(), 0);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                Err(TryGetError { requested: 2, available: self.remaining() })",
          "            } else {",
          "                let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "                self.position += 2;",
          "                Ok(u16::from_be_bytes(bytes))",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x01\"[..], position: 0 };",
          "    let result = buf.try_get_u16();",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);",
          "    assert!(buf.try_get_u16().is_err());",
          "    assert_eq!(buf.try_get_u16().err(), Some(TryGetError { requested: 2, available: 1 }));",
          "    buf.position = 0;",
          "    let mut buf2 = TestBuf { data: &b\"\\x01\\x02\"[..], position: 0 };",
          "    assert_eq!(buf2.try_get_u16().unwrap(), 0x0102_u16);",
          "    assert_eq!(buf2.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]