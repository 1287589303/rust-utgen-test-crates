[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.extend_from_slice(&[1, 2, 3]);",
          "    buf.clear();",
          "    buf.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.extend_from_slice(&[1, 2, 3]);",
          "    buf.clear();",
          "    buf.len();",
          "    assert_eq!(buf.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::new();",
          "    buf.clear();",
          "    buf.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::new();",
          "    buf.clear();",
          "    buf.len();",
          "    assert_eq!(buf.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0);",
          "    buf.clear();",
          "    buf.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.capacity() >= 5);",
          "    assert!(buf.is_empty());",
          "    assert_eq!(buf.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0);",
          "    buf.clear();",
          "    buf.len();",
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.capacity() >= 5);",
          "    assert!(buf.is_empty());",
          "    assert_eq!(buf.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let _other = buf.split_off(3);",
          "    buf.clear();",
          "    buf.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.is_empty());",
          "    assert_eq!(_other.len(), 3);",
          "    assert!(!_other.is_empty());"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let _other = buf.split_off(3);",
          "    buf.clear();",
          "    buf.len();",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.is_empty());",
          "    assert_eq!(_other.len(), 3);",
          "    assert!(!_other.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]