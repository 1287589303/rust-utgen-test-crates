[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 0);",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 5];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 5);",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 10];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 10);"
        ],
        "code": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 0);",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 5];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 5);",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 10];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 3];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert!(len > 0);",
          "    assert!(len <= 3);",
          "    assert_eq!(len, uninit_slice.0.len());",
          "    assert_eq!(len, 0);",
          "    let mut empty_data: &mut [MaybeUninit<u8>] = &mut [];",
          "    let empty_uninit_slice = UninitSlice::uninit(empty_data);",
          "    assert_eq!(empty_uninit_slice.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 3];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 3);",
          "    assert!(len > 0);",
          "    assert!(len <= 3);",
          "    assert_eq!(len, uninit_slice.0.len());",
          "    assert_eq!(len, 0);",
          "    let mut empty_data: &mut [MaybeUninit<u8>] = &mut [];",
          "    let empty_uninit_slice = UninitSlice::uninit(empty_data);",
          "    assert_eq!(empty_uninit_slice.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 10];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 10);"
        ],
        "code": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 10];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 1024];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 1024);"
        ],
        "code": [
          "{",
          "    let mut data: &mut [MaybeUninit<u8>] = &mut [MaybeUninit::uninit(); 1024];",
          "    let uninit_slice = UninitSlice::uninit(data);",
          "    let len = uninit_slice.len();",
          "    assert_eq!(len, 1024);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]