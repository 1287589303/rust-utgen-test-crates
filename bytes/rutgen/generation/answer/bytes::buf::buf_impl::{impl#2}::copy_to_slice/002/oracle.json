[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut dst = vec![0; 5];",
          "    buf.copy_to_slice(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(buf.has_remaining() == false);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut dst = vec![0; 5];",
          "    buf.copy_to_slice(&mut dst);",
          "    assert_eq!(dst, vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(buf.has_remaining() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let mut dst: Vec<u8> = vec![];",
          "    buf.copy_to_slice(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), buf.len());",
          "    assert!(buf.len() <= dst.len());",
          "    assert!(buf.len() == dst.len());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let mut dst: Vec<u8> = vec![];",
          "    buf.copy_to_slice(&mut dst);",
          "    assert_eq!(dst.len(), buf.len());",
          "    assert!(buf.len() <= dst.len());",
          "    assert!(buf.len() == dst.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]