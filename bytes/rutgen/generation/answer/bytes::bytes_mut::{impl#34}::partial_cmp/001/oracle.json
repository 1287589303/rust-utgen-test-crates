[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([0u8; 1]))).unwrap(),",
          "        len: 1,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), None);",
          "    assert_eq!(self_bytes.len(), 0);",
          "    assert_eq!(other_bytes.len, 1);",
          "    assert_eq!(other_bytes.cap, 1);",
          "    assert!(other_bytes.ptr.as_ptr() != ptr::null_mut());",
          "    assert!(other_bytes.data.is_null());"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([0u8; 1]))).unwrap(),",
          "        len: 1,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), None);",
          "    assert_eq!(self_bytes.len(), 0);",
          "    assert_eq!(other_bytes.len, 1);",
          "    assert_eq!(other_bytes.cap, 1);",
          "    assert!(other_bytes.ptr.as_ptr() != ptr::null_mut());",
          "    assert!(other_bytes.data.is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([2, 3, 4, 5]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "    len: 3,",
          "    cap: 4,",
          "    data: ptr::null_mut(),",
          "    };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
          "    ",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "    len: 3,",
          "    cap: 4,",
          "    data: ptr::null_mut(),",
          "    };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes_empty = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([]))).unwrap(),",
          "    len: 0,",
          "    cap: 4,",
          "    data: ptr::null_mut(),",
          "    };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes_empty), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([2, 3, 4, 5]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "    len: 3,",
          "    cap: 4,",
          "    data: ptr::null_mut(),",
          "    };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Equal));",
          "    ",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "    len: 3,",
          "    cap: 4,",
          "    data: ptr::null_mut(),",
          "    };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes_empty = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([]))).unwrap(),",
          "    len: 0,",
          "    cap: 4,",
          "    data: ptr::null_mut(),",
          "    };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes_empty), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3, 5];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3, 4, 5];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[5];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1]))).unwrap(), len: 1, cap: 1, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[1];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([2]))).unwrap(), len: 1, cap: 1, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2]))).unwrap(), len: 2, cap: 2, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(),",
          "        len: 4,",
          "        cap: 4,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    let self_bytes: &[u8] = &[1, 2, 3, 4];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3, 5];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2, 3, 4, 5];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3, 4]))).unwrap(), len: 4, cap: 4, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[5];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1]))).unwrap(), len: 1, cap: 1, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let self_bytes: &[u8] = &[1];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([2]))).unwrap(), len: 1, cap: 1, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let self_bytes: &[u8] = &[1, 2];",
          "    let other_bytes = BytesMut { ptr: NonNull::new(Box::into_raw(Box::new([1, 2]))).unwrap(), len: 2, cap: 2, data: ptr::null_mut() };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*self_bytes, &[4, 5, 6]);",
          "    assert_eq!(other_bytes.len, 3);",
          "    assert_eq!(other_bytes.cap, 3);",
          "    assert_eq!(other_bytes.ptr.as_ref(), [1, 2, 3]);",
          "    assert!(self_bytes.partial_cmp(&other_bytes).is_some());",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1, 2, 3]))).unwrap(),",
          "        len: 3,",
          "        cap: 3,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(*self_bytes, &[4, 5, 6]);",
          "    assert_eq!(other_bytes.len, 3);",
          "    assert_eq!(other_bytes.cap, 3);",
          "    assert_eq!(other_bytes.ptr.as_ref(), [1, 2, 3]);",
          "    assert!(self_bytes.partial_cmp(&other_bytes).is_some());",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[255; 131071]; // 2^17 - 1 bytes",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "        len: 131071,",
          "        cap: 131071,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    let self_bytes: &[u8] = &[255; 131071];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "    len: 131071,",
          "    cap: 131071,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[255; 131072];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131072])).unwrap()),",
          "    len: 131072,",
          "    cap: 131072,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1; 131071];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "    len: 131071,",
          "    cap: 131071,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Equal));",
          "    let self_bytes: &[u8] = &[1; 0];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "    len: 131071,",
          "    cap: 131071,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[1; 131071];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 0])).unwrap()),",
          "    len: 0,",
          "    cap: 0,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[255; 131071]; // 2^17 - 1 bytes",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "        len: 131071,",
          "        cap: 131071,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    let self_bytes: &[u8] = &[255; 131071];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "    len: 131071,",
          "    cap: 131071,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[255; 131072];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131072])).unwrap()),",
          "    len: 131072,",
          "    cap: 131072,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1; 131071];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "    len: 131071,",
          "    cap: 131071,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Equal));",
          "    let self_bytes: &[u8] = &[1; 0];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 131071])).unwrap()),",
          "    len: 131071,",
          "    cap: 131071,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[1; 131071];",
          "    let other_bytes = BytesMut {",
          "    ptr: NonNull::new(Box::into_raw(Box::new([1; 0])).unwrap()),",
          "    len: 0,",
          "    cap: 0,",
          "    data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[0];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([0]))).unwrap(),",
          "        len: 1,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(cmp::Ordering::Equal));",
          "    assert!(self_bytes.partial_cmp(&BytesMut::from_slice(&[1])).unwrap() == cmp::Ordering::Less);",
          "    assert!(self_bytes.partial_cmp(&BytesMut::from_slice(&[0, 1])).unwrap() == cmp::Ordering::Less);",
          "    assert!(self_bytes.partial_cmp(&BytesMut::from_slice(&[])).is_none());",
          "    assert!(BytesMut::from_slice(&[1]).partial_cmp(&self_bytes).unwrap() == cmp::Ordering::Greater);",
          "    assert!(BytesMut::from_slice(&[0]).partial_cmp(&BytesMut::from_slice(&[0])).unwrap() == cmp::Ordering::Equal);"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[0];",
          "    let other_bytes = BytesMut {",
          "        ptr: NonNull::new(Box::into_raw(Box::new([0]))).unwrap(),",
          "        len: 1,",
          "        cap: 1,",
          "        data: ptr::null_mut(),",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, Some(cmp::Ordering::Equal));",
          "    assert!(self_bytes.partial_cmp(&BytesMut::from_slice(&[1])).unwrap() == cmp::Ordering::Less);",
          "    assert!(self_bytes.partial_cmp(&BytesMut::from_slice(&[0, 1])).unwrap() == cmp::Ordering::Less);",
          "    assert!(self_bytes.partial_cmp(&BytesMut::from_slice(&[])).is_none());",
          "    assert!(BytesMut::from_slice(&[1]).partial_cmp(&self_bytes).unwrap() == cmp::Ordering::Greater);",
          "    assert!(BytesMut::from_slice(&[0]).partial_cmp(&BytesMut::from_slice(&[0])).unwrap() == cmp::Ordering::Equal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]