[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [u8; 0] = [];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
          "    slice.copy_from_slice(&[]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 0);",
          "    assert_panics!(slice.copy_from_slice(b\"foo\"));",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"foo\");",
          "    assert_eq!(data, b\"foo\");",
          "    slice.copy_from_slice(b\"bar\");",
          "    assert_eq!(data, b\"bar\");",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    assert_panics!(slice.copy_from_slice(b\"barfoo\"));"
        ],
        "code": [
          "{",
          "    let mut data: [u8; 0] = [];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
          "    slice.copy_from_slice(&[]);",
          "    assert_eq!(slice.len(), 0);",
          "    assert_panics!(slice.copy_from_slice(b\"foo\"));",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"foo\");",
          "    assert_eq!(data, b\"foo\");",
          "    slice.copy_from_slice(b\"bar\");",
          "    assert_eq!(data, b\"bar\");",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    assert_panics!(slice.copy_from_slice(b\"barfoo\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = [0u8; 1];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 1) };",
          "    slice.copy_from_slice(b\"b\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data[0], b'b');",
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 1];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 1) };",
          "    slice.copy_from_slice(b\"b\");",
          "    assert_eq!(data[0], b'b');",
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"foo\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data, b\"foo\");",
          "    let mut data_empty = [0u8; 3];",
          "    let slice_empty = unsafe { UninitSlice::from_raw_parts_mut(data_empty.as_mut_ptr(), 3) };",
          "    slice_empty.copy_from_slice(b\"\");",
          "    assert_eq!(data_empty, b\"\");",
          "    let mut data_diff_size = [0u8; 5];",
          "    let slice_diff_size = unsafe { UninitSlice::from_raw_parts_mut(data_diff_size.as_mut_ptr(), 5) };",
          "    slice_diff_size.copy_from_slice(b\"hello\");",
          "    assert_eq!(data_diff_size[..5], b\"hello\");",
          "    let mut data_panic = [0u8; 3];",
          "    let slice_panic = unsafe { UninitSlice::from_raw_parts_mut(data_panic.as_mut_ptr(), 3) };",
          "    // Assert panic when copying different lengths",
          "    let result = std::panic::catch_unwind(|| {",
          "    slice_panic.copy_from_slice(b\"longer than three\");",
          "    });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"foo\");",
          "    assert_eq!(data, b\"foo\");",
          "    let mut data_empty = [0u8; 3];",
          "    let slice_empty = unsafe { UninitSlice::from_raw_parts_mut(data_empty.as_mut_ptr(), 3) };",
          "    slice_empty.copy_from_slice(b\"\");",
          "    assert_eq!(data_empty, b\"\");",
          "    let mut data_diff_size = [0u8; 5];",
          "    let slice_diff_size = unsafe { UninitSlice::from_raw_parts_mut(data_diff_size.as_mut_ptr(), 5) };",
          "    slice_diff_size.copy_from_slice(b\"hello\");",
          "    assert_eq!(data_diff_size[..5], b\"hello\");",
          "    let mut data_panic = [0u8; 3];",
          "    let slice_panic = unsafe { UninitSlice::from_raw_parts_mut(data_panic.as_mut_ptr(), 3) };",
          "    // Assert panic when copying different lengths",
          "    let result = std::panic::catch_unwind(|| {",
          "    slice_panic.copy_from_slice(b\"longer than three\");",
          "    });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"barb\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data, [0u8; 3]);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"barb\");",
          "    }).is_err());",
          "    assert!(data.iter().all(|&x| x == 0u8));"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"barb\");",
          "    assert_eq!(data, [0u8; 3]);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"barb\");",
          "    }).is_err());",
          "    assert!(data.iter().all(|&x| x == 0u8));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]