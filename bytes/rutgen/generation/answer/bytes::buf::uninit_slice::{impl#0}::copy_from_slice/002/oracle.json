[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(&[]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data, [0, 0, 0]);",
          "    panic!(\"Expected panic due to length mismatch\");",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"foo\");",
          "    assert_eq!(data, [b'f', b'o', b'o']);",
          "    slice.copy_from_slice(b\"ba\");",
          "    panic!(\"Expected panic due to length mismatch\");"
        ],
        "code": [
          "{",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(&[]);",
          "    assert_eq!(data, [0, 0, 0]);",
          "    panic!(\"Expected panic due to length mismatch\");",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(b\"foo\");",
          "    assert_eq!(data, [b'f', b'o', b'o']);",
          "    slice.copy_from_slice(b\"ba\");",
          "    panic!(\"Expected panic due to length mismatch\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(&[1, 2]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data, [0, 0, 0]);",
          "    assert!(data.len() == 3);",
          "    assert!(slice.len() == 3);",
          "    assert!(std::ptr::eq(slice.as_mut_ptr(), data.as_mut_ptr()));",
          "    assert!(std::panic::catch_unwind(|| { slice.copy_from_slice(&[1, 2]) }).is_err());",
          "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);"
        ],
        "code": [
          "{",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(&[1, 2]);",
          "    assert_eq!(data, [0, 0, 0]);",
          "    assert!(data.len() == 3);",
          "    assert!(slice.len() == 3);",
          "    assert!(std::ptr::eq(slice.as_mut_ptr(), data.as_mut_ptr()));",
          "    assert!(std::panic::catch_unwind(|| { slice.copy_from_slice(&[1, 2]) }).is_err());",
          "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(&[1, 2, 3, 4]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data, [0, 0, 0]);",
          "    assert_eq!(slice.len(), 3);",
          "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
          "    assert!(core::panic::catch_unwind(|| slice.copy_from_slice(&[1, 2, 3, 4])).is_err());",
          "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);"
        ],
        "code": [
          "{",
          "    let mut data: [u8; 3] = [0; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.copy_from_slice(&[1, 2, 3, 4]);",
          "    assert_eq!(data, [0, 0, 0]);",
          "    assert_eq!(slice.len(), 3);",
          "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
          "    assert!(core::panic::catch_unwind(|| slice.copy_from_slice(&[1, 2, 3, 4])).is_err());",
          "    assert!(data[0] == 0 && data[1] == 0 && data[2] == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data: [u8; 4] = [0; 4];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 4) };",
          "    slice.copy_from_slice(&[1, 2, 3, 4]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data, [1, 2, 3, 4]);",
          "    assert_eq!(slice.len(), 4);",
          "    assert!(unsafe { slice.as_uninit_slice_mut() }.len() == 4);",
          "    assert!(data[0] == 1);",
          "    assert!(data[1] == 2);",
          "    assert!(data[2] == 3);",
          "    assert!(data[3] == 4);"
        ],
        "code": [
          "{",
          "    let mut data: [u8; 4] = [0; 4];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 4) };",
          "    slice.copy_from_slice(&[1, 2, 3, 4]);",
          "    assert_eq!(data, [1, 2, 3, 4]);",
          "    assert_eq!(slice.len(), 4);",
          "    assert!(unsafe { slice.as_uninit_slice_mut() }.len() == 4);",
          "    assert!(data[0] == 1);",
          "    assert!(data[1] == 2);",
          "    assert!(data[2] == 3);",
          "    assert!(data[3] == 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]