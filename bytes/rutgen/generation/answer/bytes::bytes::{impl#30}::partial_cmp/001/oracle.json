[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::new();",
          "    let string = String::new();",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    bytes.partial_cmp(&string).is_none();",
          "    bytes.len() == 0;",
          "    string.is_empty();"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::new();",
          "    let string = String::new();",
          "    let _ = bytes.partial_cmp(&string);",
          "    bytes.partial_cmp(&string).is_none();",
          "    bytes.len() == 0;",
          "    string.is_empty();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::new();",
          "    let string = String::from(\"a\");",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 0);",
          "    assert!(bytes.is_empty());",
          "    assert_eq!(bytes.partial_cmp(&string), None);",
          "    assert_eq!(bytes.as_slice(), &[]);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::new();",
          "    let string = String::from(\"a\");",
          "    let _ = bytes.partial_cmp(&string);",
          "    assert_eq!(bytes.len(), 0);",
          "    assert!(bytes.is_empty());",
          "    assert_eq!(bytes.partial_cmp(&string), None);",
          "    assert_eq!(bytes.as_slice(), &[]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97]); // 'a'",
          "    let string = String::new();",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.partial_cmp(&string), None);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97]); // 'a'",
          "    let string = String::new();",
          "    let _ = bytes.partial_cmp(&string);",
          "    assert_eq!(bytes.partial_cmp(&string), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97]); // 'a'",
          "    let string = String::from(\"a\");",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Equal));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97]); // 'a'",
          "    let string = String::from(\"a\");",
          "    let _ = bytes.partial_cmp(&string);",
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Equal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97]); // 'a'",
          "    let string = String::from(\"b\");",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 1);",
          "    assert_eq!(bytes.as_slice(), &[97]);",
          "    assert!(bytes.is_unique());",
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Less));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97]); // 'a'",
          "    let string = String::from(\"b\");",
          "    let _ = bytes.partial_cmp(&string);",
          "    assert_eq!(bytes.len(), 1);",
          "    assert_eq!(bytes.as_slice(), &[97]);",
          "    assert!(bytes.is_unique());",
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::new();",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.partial_cmp(&string), None);"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::new();",
          "    let _ = bytes.partial_cmp(&string);",
          "    assert_eq!(bytes.partial_cmp(&string), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"a\");",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 3);",
          "    assert_eq!(bytes.as_slice(), b\"abc\");",
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"a\");",
          "    let _ = bytes.partial_cmp(&string);",
          "    assert_eq!(bytes.len(), 3);",
          "    assert_eq!(bytes.as_slice(), b\"abc\");",
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"abc\");",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"abc\");",
          "    let result = bytes.partial_cmp(&string);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"abc\");",
          "    let _ = bytes.partial_cmp(&string);",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"abc\");",
          "    let result = bytes.partial_cmp(&string);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"abcd\");",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 3);",
          "    assert!(bytes.is_unique());",
          "    assert_eq!(bytes.as_slice(), b\"abc\");",
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"ab\")), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"abc\")), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"d\")), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"\")), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"abcd\");",
          "    let _ = bytes.partial_cmp(&string);",
          "    assert_eq!(bytes.len(), 3);",
          "    assert!(bytes.is_unique());",
          "    assert_eq!(bytes.as_slice(), b\"abc\");",
          "    assert_eq!(bytes.partial_cmp(&string), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"ab\")), Some(cmp::Ordering::Greater));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"abc\")), Some(cmp::Ordering::Equal));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"d\")), Some(cmp::Ordering::Less));",
          "    assert_eq!(bytes.partial_cmp(&String::from(\"\")), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"ab\");",
          "    let _ = bytes.partial_cmp(&string);",
          "}"
        ],
        "oracle": [
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"ab\");",
          "    let result = bytes.partial_cmp(&string);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"ab\");",
          "    let _ = bytes.partial_cmp(&string);",
          "    let bytes = Bytes::copy_from_slice(&[97, 98, 99]); // \"abc\"",
          "    let string = String::from(\"ab\");",
          "    let result = bytes.partial_cmp(&string);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]