[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 0, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, None);",
          "    let self_bytes: &[u8] = &[1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 0, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 1, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[0, 1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 1, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[0, 1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 2, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[0, 1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 0, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 0, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, None);",
          "    let self_bytes: &[u8] = &[1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 0, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 1, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[0, 1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 1, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[0, 1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 2, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[0, 1];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 0, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, None);",
          "    assert!(_result.is_none());",
          "    let self_bytes_empty: &[u8] = &[];",
          "    let _result_empty = self_bytes_empty.partial_cmp(&other_bytes);",
          "    assert_eq!(_result_empty, None);",
          "    let other_bytes_non_empty = Bytes {",
          "    ptr: std::ptr::null(),",
          "    len: 3,",
          "    data: AtomicPtr::new(std::ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result_non_empty = self_bytes.partial_cmp(&other_bytes_non_empty);",
          "    assert_eq!(_result_non_empty, Some(cmp::Ordering::Less));",
          "    let self_bytes_longer: &[u8] = &[1, 2, 3, 4];",
          "    let _result_longer = self_bytes_longer.partial_cmp(&other_bytes_non_empty);",
          "    assert_eq!(_result_longer, Some(cmp::Ordering::Greater));",
          "    let self_bytes_equal: &[u8] = &[1, 2, 3];",
          "    let _result_equal = self_bytes_equal.partial_cmp(&other_bytes_non_empty);",
          "    assert_eq!(_result_equal, Some(cmp::Ordering::Equal));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, None);",
          "    assert!(_result.is_none());",
          "    let self_bytes_empty: &[u8] = &[];",
          "    let _result_empty = self_bytes_empty.partial_cmp(&other_bytes);",
          "    assert_eq!(_result_empty, None);",
          "    let other_bytes_non_empty = Bytes {",
          "    ptr: std::ptr::null(),",
          "    len: 3,",
          "    data: AtomicPtr::new(std::ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result_non_empty = self_bytes.partial_cmp(&other_bytes_non_empty);",
          "    assert_eq!(_result_non_empty, Some(cmp::Ordering::Less));",
          "    let self_bytes_longer: &[u8] = &[1, 2, 3, 4];",
          "    let _result_longer = self_bytes_longer.partial_cmp(&other_bytes_non_empty);",
          "    assert_eq!(_result_longer, Some(cmp::Ordering::Greater));",
          "    let self_bytes_equal: &[u8] = &[1, 2, 3];",
          "    let _result_equal = self_bytes_equal.partial_cmp(&other_bytes_non_empty);",
          "    assert_eq!(_result_equal, Some(cmp::Ordering::Equal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, None);",
          "    assert!(self_bytes.len() < other_bytes.len());",
          "    assert_eq!(self_bytes, &[]);",
          "    assert!(other_bytes.len() > 0);",
          "    assert!(other_bytes.as_slice().is_empty());",
          "    assert!(other_bytes.ptr.is_null());",
          "    assert!(other_bytes.data.load(Ordering::Relaxed).is_null());"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    assert_eq!(_result, None);",
          "    assert!(self_bytes.len() < other_bytes.len());",
          "    assert_eq!(self_bytes, &[]);",
          "    assert!(other_bytes.len() > 0);",
          "    assert!(other_bytes.as_slice().is_empty());",
          "    assert!(other_bytes.ptr.is_null());",
          "    assert!(other_bytes.data.load(Ordering::Relaxed).is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), None);",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes_equal = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes_equal), Some(cmp::Ordering::Equal));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), None);",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Less));",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes), Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes_equal = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(self_bytes.partial_cmp(&other_bytes_equal), Some(cmp::Ordering::Equal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    let self_bytes: &[u8] = &[1, 2];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, None);",
          "    let self_bytes: &[u8] = &[2, 3];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 2, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, None);",
          "    let self_bytes: &[u8] = &[3, 4];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 5, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, Some(cmp::Ordering::Less));"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[1, 2];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    let self_bytes: &[u8] = &[1, 2];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, None);",
          "    let self_bytes: &[u8] = &[2, 3];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 2, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, Some(cmp::Ordering::Greater));",
          "    let self_bytes: &[u8] = &[1, 2, 3];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, None);",
          "    let self_bytes: &[u8] = &[3, 4];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 5, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    assert_eq!(_result, Some(cmp::Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "}"
        ],
        "oracle": [
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = Bytes {",
          "        ptr: std::ptr::null(),",
          "        len: 3,",
          "        data: AtomicPtr::new(std::ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _result = self_bytes.partial_cmp(&other_bytes);",
          "    let self_bytes: &[u8] = &[4, 5, 6];",
          "    let other_bytes = Bytes { ptr: std::ptr::null(), len: 3, data: AtomicPtr::new(std::ptr::null_mut()), vtable: &SHARED_VTABLE };",
          "    let result = self_bytes.partial_cmp(&other_bytes);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]