[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: vec![0x08],",
          "        position: 0,",
          "    };",
          "    let result = buf.try_get_i8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 1);",
          "    assert_eq!(result, Ok(0x08_i8));",
          "    buf.advance(1);",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: vec![0x08],",
          "        position: 0,",
          "    };",
          "    let result = buf.try_get_i8();",
          "    assert_eq!(buf.remaining(), 1);",
          "    assert_eq!(result, Ok(0x08_i8));",
          "    buf.advance(1);",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]