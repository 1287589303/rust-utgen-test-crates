[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_i16(&mut self) -> Result<i16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "            self.advance(2);",
          "            Ok(i16::from_be_bytes(bytes))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 0 }));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    let mut buf = TestBuf { data: &[0x08], position: 0 };",
          "    buf.position = 0;",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    let mut buf = TestBuf { data: &[0x08, 0x09], position: 0 };",
          "    buf.position = 0;",
          "    assert_eq!(buf.try_get_i16(), Ok(0x0809));",
          "    buf.advance(2);",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_i16(&mut self) -> Result<i16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "            self.advance(2);",
          "            Ok(i16::from_be_bytes(bytes))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 0 }));",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    let mut buf = TestBuf { data: &[0x08], position: 0 };",
          "    buf.position = 0;",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    let mut buf = TestBuf { data: &[0x08, 0x09], position: 0 };",
          "    buf.position = 0;",
          "    assert_eq!(buf.try_get_i16(), Ok(0x0809));",
          "    buf.advance(2);",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_i16(&mut self) -> Result<i16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "            self.advance(2);",
          "            Ok(i16::from_be_bytes(bytes))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x08\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09 hello\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Ok(0x0809_i16));",
          "    assert_eq!(buf.remaining(), 6);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_i16(&mut self) -> Result<i16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "            self.advance(2);",
          "            Ok(i16::from_be_bytes(bytes))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x08\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09 hello\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Ok(0x0809_i16));",
          "    assert_eq!(buf.remaining(), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_i16(&mut self) -> Result<i16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "            self.advance(2);",
          "            Ok(i16::from_be_bytes(bytes))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Ok(0x0809));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_i16(&mut self) -> Result<i16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let bytes = [self.data[self.position], self.data[self.position + 1]];",
          "            self.advance(2);",
          "            Ok(i16::from_be_bytes(bytes))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09\"[..], position: 0 };",
          "    assert_eq!(buf.try_get_i16(), Ok(0x0809));",
          "    assert_eq!(buf.try_get_i16(), Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]