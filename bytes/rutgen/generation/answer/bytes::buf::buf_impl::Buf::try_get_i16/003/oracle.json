[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x09\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0809_i16), buf.try_get_i16());",
          "    assert_eq!(6, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_i16());",
          "    assert_eq!(1, remaining);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x09\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x0809_i16), buf.try_get_i16());",
          "    assert_eq!(6, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_i16());",
          "    assert_eq!(1, remaining);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError{requested: 2, available: 1}));",
          "    assert_eq!(remaining, 1);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x08\\x09 hello\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0809_i16));",
          "    assert_eq!(remaining, 6);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Err(TryGetError{requested: 2, available: 1}));",
          "    assert_eq!(remaining, 1);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x08\\x09 hello\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0809_i16));",
          "    assert_eq!(remaining, 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFE\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0xFFFE_i16), result);",
          "    assert_eq!(0, remaining);",
          "    assert!(buf.remaining() < 2);",
          "    assert!(buf.try_get_i16().is_err());",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_i16());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFE\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0xFFFE_i16), result);",
          "    assert_eq!(0, remaining);",
          "    assert!(buf.remaining() < 2);",
          "    assert!(buf.try_get_i16().is_err());",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_i16());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102_i16), buf.try_get_i16());",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_i16());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_i16();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x0102_i16), buf.try_get_i16());",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_i16());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]