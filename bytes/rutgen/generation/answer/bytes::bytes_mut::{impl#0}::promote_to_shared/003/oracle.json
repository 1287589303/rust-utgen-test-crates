[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Box::new(0u8))); ",
          "        bytes_mut.len = 0;",
          "        bytes_mut.cap = 10;",
          "        bytes_mut.data = (KIND_VEC as usize) as *mut Shared;",
          "        bytes_mut.promote_to_shared(1);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(bytes_mut.ptr.as_ptr() != ptr::null_mut());",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::Relaxed) }, 1);",
          "    assert_eq!(unsafe { (*bytes_mut.data).vec.len() }, 10);",
          "    assert_eq!(unsafe { (*bytes_mut.data).original_capacity_repr }, 0);",
          "    assert!(bytes_mut.data as usize & KIND_MASK == KIND_ARC);",
          "    assert!(bytes_mut.is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    unsafe {",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Box::new(0u8))); ",
          "        bytes_mut.len = 0;",
          "        bytes_mut.cap = 10;",
          "        bytes_mut.data = (KIND_VEC as usize) as *mut Shared;",
          "        bytes_mut.promote_to_shared(1);",
          "    }",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(bytes_mut.ptr.as_ptr() != ptr::null_mut());",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::Relaxed) }, 1);",
          "    assert_eq!(unsafe { (*bytes_mut.data).vec.len() }, 10);",
          "    assert_eq!(unsafe { (*bytes_mut.data).original_capacity_repr }, 0);",
          "    assert!(bytes_mut.data as usize & KIND_MASK == KIND_ARC);",
          "    assert!(bytes_mut.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(17);",
          "    unsafe {",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Box::new(0u8)));",
          "        bytes_mut.len = 0;",
          "        bytes_mut.cap = 17;",
          "        bytes_mut.data = (KIND_VEC as usize) as *mut Shared;",
          "        bytes_mut.promote_to_shared(1);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.data as usize & KIND_MASK, KIND_ARC);",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert!(bytes_mut.cap >= 17);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(17);",
          "    unsafe {",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Box::new(0u8)));",
          "        bytes_mut.len = 0;",
          "        bytes_mut.cap = 17;",
          "        bytes_mut.data = (KIND_VEC as usize) as *mut Shared;",
          "        bytes_mut.promote_to_shared(1);",
          "    }",
          "    assert_eq!(bytes_mut.data as usize & KIND_MASK, KIND_ARC);",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert!(bytes_mut.cap >= 17);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(12);",
          "    unsafe {",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Box::new(0u8)));",
          "        bytes_mut.len = 0;",
          "        bytes_mut.cap = 12;",
          "        bytes_mut.data = (KIND_VEC as usize) as *mut Shared;",
          "        bytes_mut.promote_to_shared(2);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap(), 12);",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(unsafe { bytes_mut.data.is_null() } == false);",
          "    assert_eq!(unsafe { (*(bytes_mut.data)).ref_count.load(Ordering::Relaxed) }, 2);",
          "    assert!(unsafe { (*(bytes_mut.data)).vec.len() } > 0);",
          "    assert!(unsafe { (*(bytes_mut.data)).original_capacity_repr } > 0);",
          "    assert!(unsafe { bytes_mut.ptr.as_ptr() != NonNull::new_unchecked(Box::into_raw(Box::new(0u8))) });"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(12);",
          "    unsafe {",
          "        bytes_mut.ptr = NonNull::new_unchecked(Box::into_raw(Box::new(0u8)));",
          "        bytes_mut.len = 0;",
          "        bytes_mut.cap = 12;",
          "        bytes_mut.data = (KIND_VEC as usize) as *mut Shared;",
          "        bytes_mut.promote_to_shared(2);",
          "    }",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap(), 12);",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(unsafe { bytes_mut.data.is_null() } == false);",
          "    assert_eq!(unsafe { (*(bytes_mut.data)).ref_count.load(Ordering::Relaxed) }, 2);",
          "    assert!(unsafe { (*(bytes_mut.data)).vec.len() } > 0);",
          "    assert!(unsafe { (*(bytes_mut.data)).original_capacity_repr } > 0);",
          "    assert!(unsafe { bytes_mut.ptr.as_ptr() != NonNull::new_unchecked(Box::into_raw(Box::new(0u8))) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]