[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe {",
          "        let mut buf = BytesMut::with_capacity(2);",
          "        bytes_mut.set_len(2);",
          "        bytes_mut",
          "    };",
          "    let _ = unsafe { bytes_mut.shallow_clone() };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 2);",
          "    assert!(bytes_mut.capacity() >= 2);",
          "    assert!(bytes_mut.kind() != KIND_ARC);",
          "    assert!(bytes_mut.data.is_not_null());",
          "    assert_eq!(unsafe { bytes_mut.get_vec_pos() }, 0);",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::Relaxed) }, 1);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe {",
          "        let mut buf = BytesMut::with_capacity(2);",
          "        bytes_mut.set_len(2);",
          "        bytes_mut",
          "    };",
          "    let _ = unsafe { bytes_mut.shallow_clone() };",
          "    assert_eq!(bytes_mut.len(), 2);",
          "    assert!(bytes_mut.capacity() >= 2);",
          "    assert!(bytes_mut.kind() != KIND_ARC);",
          "    assert!(bytes_mut.data.is_not_null());",
          "    assert_eq!(unsafe { bytes_mut.get_vec_pos() }, 0);",
          "    assert_eq!(unsafe { (*bytes_mut.data).ref_count.load(Ordering::Relaxed) }, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe {",
          "        let mut buf = BytesMut::with_capacity(10);",
          "        bytes_mut.set_len(10);",
          "        bytes_mut",
          "    };",
          "    let _ = unsafe { bytes_mut.shallow_clone() };",
          "}"
        ],
        "oracle": [
          "    assert!(bytes_mut.kind() != KIND_ARC);",
          "    let original_ptr = bytes_mut.ptr;",
          "    let original_len = bytes_mut.len();",
          "    let original_cap = bytes_mut.cap;",
          "    let shallow_clone = unsafe { bytes_mut.shallow_clone() };",
          "    assert_eq!(shallow_clone.len(), original_len);",
          "    assert_eq!(shallow_clone.cap, original_cap);",
          "    assert!(shallow_clone.ptr != original_ptr);",
          "    assert!(shallow_clone.kind() == KIND_ARC);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe {",
          "        let mut buf = BytesMut::with_capacity(10);",
          "        bytes_mut.set_len(10);",
          "        bytes_mut",
          "    };",
          "    let _ = unsafe { bytes_mut.shallow_clone() };",
          "    assert!(bytes_mut.kind() != KIND_ARC);",
          "    let original_ptr = bytes_mut.ptr;",
          "    let original_len = bytes_mut.len();",
          "    let original_cap = bytes_mut.cap;",
          "    let shallow_clone = unsafe { bytes_mut.shallow_clone() };",
          "    assert_eq!(shallow_clone.len(), original_len);",
          "    assert_eq!(shallow_clone.cap, original_cap);",
          "    assert!(shallow_clone.ptr != original_ptr);",
          "    assert!(shallow_clone.kind() == KIND_ARC);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe {",
          "        let mut buf = BytesMut::with_capacity(17);",
          "        bytes_mut.set_len(17);",
          "        bytes_mut",
          "    };",
          "    let _ = unsafe { bytes_mut.shallow_clone() };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.len() == 17);",
          "    assert!(bytes_mut.capacity() >= 17);",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
          "    assert!(unsafe { bytes_mut.get_vec_pos() } >= 5);",
          "    let cloned_bytes = unsafe { bytes_mut.shallow_clone() };",
          "    assert_eq!(cloned_bytes.len(), bytes_mut.len());",
          "    assert_ne!(bytes_mut as *mut _, cloned_bytes as *mut _);",
          "    assert!(unsafe { cloned_bytes.kind() == KIND_VEC });",
          "    assert!(unsafe { clone.inner.capacity() } >= bytes_mut.capacity());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe {",
          "        let mut buf = BytesMut::with_capacity(17);",
          "        bytes_mut.set_len(17);",
          "        bytes_mut",
          "    };",
          "    let _ = unsafe { bytes_mut.shallow_clone() };",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.len() == 17);",
          "    assert!(bytes_mut.capacity() >= 17);",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
          "    assert!(unsafe { bytes_mut.get_vec_pos() } >= 5);",
          "    let cloned_bytes = unsafe { bytes_mut.shallow_clone() };",
          "    assert_eq!(cloned_bytes.len(), bytes_mut.len());",
          "    assert_ne!(bytes_mut as *mut _, cloned_bytes as *mut _);",
          "    assert!(unsafe { cloned_bytes.kind() == KIND_VEC });",
          "    assert!(unsafe { clone.inner.capacity() } >= bytes_mut.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]