[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    ",
          "    slice.write_byte(3, 255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(3, 255);",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    ",
          "    slice.write_byte(3, 255);",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(3, 255);",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 0] = [];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
          "    ",
          "    slice.write_byte(0, 255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(panic::catch_unwind(|| {",
          "    let mut data: [MaybeUninit<u8>; 0] = [];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
          "    slice.write_byte(0, 255);",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut data: [MaybeUninit<u8>; 0] = [];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
          "    ",
          "    slice.write_byte(0, 255);",
          "    assert_eq!(panic::catch_unwind(|| {",
          "    let mut data: [MaybeUninit<u8>; 0] = [];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 0) };",
          "    slice.write_byte(0, 255);",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]