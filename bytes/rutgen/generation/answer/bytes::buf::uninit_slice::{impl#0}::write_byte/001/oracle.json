[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data[0], 1);",
          "    assert_eq!(data[1], 0);",
          "    assert_eq!(data[2], 0);",
          "    assert_eq!(slice.len(), 3);",
          "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(0, 1);",
          "    assert_eq!(data[0], 1);",
          "    assert_eq!(data[1], 0);",
          "    assert_eq!(data[2], 0);",
          "    assert_eq!(slice.len(), 3);",
          "    assert_eq!(slice.as_mut_ptr(), data.as_mut_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(1, 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data[1], 2);",
          "    assert_eq!(data[0], 0);",
          "    assert_eq!(data[2], 0);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(std::mem::maybe_uninit::MaybeUninit::uninit().assume_init().len() == 0);"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(1, 2);",
          "    assert_eq!(data[1], 2);",
          "    assert_eq!(data[0], 0);",
          "    assert_eq!(data[2], 0);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(std::mem::maybe_uninit::MaybeUninit::uninit().assume_init().len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(2, 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data[2], 3);"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 3];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };",
          "    slice.write_byte(2, 3);",
          "    assert_eq!(data[2], 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut data = [0u8; 5];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 5) };",
          "    slice.write_byte(4, 255);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data[4], 255);"
        ],
        "code": [
          "{",
          "    let mut data = [0u8; 5];",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 5) };",
          "    slice.write_byte(4, 255);",
          "    assert_eq!(data[4], 255);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]