[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_from_raw_parts_mut_zero_length() {",
      "    let mut buffer = [0u8; 1];",
      "    let ptr = buffer.as_mut_ptr();",
      "    let len = 0;",
      "    // This should panic because the length is zero",
      "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0u8; 10];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "}"
        ],
        "oracle": [
          "    let slice_zero_length = unsafe { UninitSlice::from_raw_parts_mut(ptr, 0) };",
          "    assert_eq!(slice_zero_length, UninitSlice::uninit(core::slice::from_raw_parts_mut(ptr as *mut MaybeUninit<u8>, 0)));",
          "    let slice_valid_length = unsafe { UninitSlice::from_raw_parts_mut(ptr, 10) };",
          "    assert_eq!(slice_valid_length, UninitSlice::uninit(core::slice::from_raw_parts_mut(ptr as *mut MaybeUninit<u8>, 10)));",
          "    assert_eq!(slice_valid_length.len(), 10);"
        ],
        "code": [
          "{",
          "    let mut buffer = [0u8; 10];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    let slice_zero_length = unsafe { UninitSlice::from_raw_parts_mut(ptr, 0) };",
          "    assert_eq!(slice_zero_length, UninitSlice::uninit(core::slice::from_raw_parts_mut(ptr as *mut MaybeUninit<u8>, 0)));",
          "    let slice_valid_length = unsafe { UninitSlice::from_raw_parts_mut(ptr, 10) };",
          "    assert_eq!(slice_valid_length, UninitSlice::uninit(core::slice::from_raw_parts_mut(ptr as *mut MaybeUninit<u8>, 10)));",
          "    assert_eq!(slice_valid_length.len(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = [0u8; 1];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "}"
        ],
        "oracle": [
          "    let mut buffer = [0u8; 0];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 0;",
          "    assert!(std::ptr::null_mut() == unsafe { UninitSlice::from_raw_parts_mut(ptr, len) });",
          "    ",
          "    let mut buffer = [0u8; 1];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    assert_eq!(slice.len(), len);",
          "    ",
          "    let mut buffer = [0u8; 10];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 10;",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    assert!(slice.as_uninit_slice_mut() as *mut _ == ptr as *mut MaybeUninit<u8>);",
          "    ",
          "    let mut buffer = [0u8; 5];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 5;",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    assert_eq!(slice.len(), len);"
        ],
        "code": [
          "{",
          "    let mut buffer = [0u8; 1];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    let mut buffer = [0u8; 0];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 0;",
          "    assert!(std::ptr::null_mut() == unsafe { UninitSlice::from_raw_parts_mut(ptr, len) });",
          "    ",
          "    let mut buffer = [0u8; 1];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    assert_eq!(slice.len(), len);",
          "    ",
          "    let mut buffer = [0u8; 10];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 10;",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    assert!(slice.as_uninit_slice_mut() as *mut _ == ptr as *mut MaybeUninit<u8>);",
          "    ",
          "    let mut buffer = [0u8; 5];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 5;",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    assert_eq!(slice.len(), len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = vec![0u8; std::usize::MAX];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "}"
        ],
        "oracle": [
          "    unsafe { UninitSlice::from_raw_parts_mut(std::ptr::null_mut(), 0) }  // Expecting panic for null pointer and zero length",
          "    let mut buffer = vec![0u8; 5];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 5;",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };  // Expecting valid UninitSlice creation",
          "    let slice_mut = unsafe { UninitSlice::from_raw_parts_mut(ptr, 10) };  // Expecting valid UninitSlice creation with larger length than buffer",
          "    let slice_invalid = unsafe { UninitSlice::from_raw_parts_mut(ptr as *mut u8, usize::MAX) };  // Expecting valid UninitSlice creation with maximum length",
          "    let slice_out_of_bounds = unsafe { UninitSlice::from_raw_parts_mut(ptr, 6) };  // Expecting panic for length greater than buffer size"
        ],
        "code": [
          "{",
          "    let mut buffer = vec![0u8; std::usize::MAX];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = buffer.len();",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };",
          "    unsafe { UninitSlice::from_raw_parts_mut(std::ptr::null_mut(), 0) }  // Expecting panic for null pointer and zero length",
          "    let mut buffer = vec![0u8; 5];",
          "    let ptr = buffer.as_mut_ptr();",
          "    let len = 5;",
          "    let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };  // Expecting valid UninitSlice creation",
          "    let slice_mut = unsafe { UninitSlice::from_raw_parts_mut(ptr, 10) };  // Expecting valid UninitSlice creation with larger length than buffer",
          "    let slice_invalid = unsafe { UninitSlice::from_raw_parts_mut(ptr as *mut u8, usize::MAX) };  // Expecting valid UninitSlice creation with maximum length",
          "    let slice_out_of_bounds = unsafe { UninitSlice::from_raw_parts_mut(ptr, 6) };  // Expecting panic for length greater than buffer size",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]