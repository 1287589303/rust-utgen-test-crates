[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError { requested: 8, available: self.remaining() });",
          "            }",
          "            let bytes = &self.data[self.position..self.position + 8];",
          "            self.position += 8;",
          "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..],",
          "        position: 0,",
          "    };",
          "    let result = buf.try_get_i64_le();",
          "    let remaining = buf.remaining();",
          "",
          "    // Here we do not assert, but you can verify the conditions from result and remaining",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102030405060708_i64), result);",
          "    assert_eq!(6, remaining);",
          "    assert!(remaining < 8);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf.position, 8);",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(matches!(result, Ok(ret) if ret == 0x0102030405060708_i64));"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError { requested: 8, available: self.remaining() });",
          "            }",
          "            let bytes = &self.data[self.position..self.position + 8];",
          "            self.position += 8;",
          "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..],",
          "        position: 0,",
          "    };",
          "    let result = buf.try_get_i64_le();",
          "    let remaining = buf.remaining();",
          "",
          "    // Here we do not assert, but you can verify the conditions from result and remaining",
          "    assert_eq!(Ok(0x0102030405060708_i64), result);",
          "    assert_eq!(6, remaining);",
          "    assert!(remaining < 8);",
          "    assert!(result.is_ok());",
          "    assert_eq!(buf.position, 8);",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert!(matches!(result, Ok(ret) if ret == 0x0102030405060708_i64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError { requested: 8, available: self.remaining() });",
          "            }",
          "            let bytes = &self.data[self.position..self.position + 8];",
          "            self.position += 8;",
          "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..],",
          "        position: 0,",
          "    };",
          "    let result = buf.try_get_i64_le();",
          "    let remaining = buf.remaining();",
          "",
          "    // Here we do not assert, but you can verify the conditions from result and remaining",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_i64_le());",
          "    assert_eq!(7, buf.remaining());",
          "    buf.position = 0;",
          "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.position = 0;",
          "    let bytes = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    buf.data = bytes;",
          "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_i64_le());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError { requested: 8, available: self.remaining() });",
          "            }",
          "            let bytes = &self.data[self.position..self.position + 8];",
          "            self.position += 8;",
          "            let ret = i64::from_le_bytes(bytes.try_into().unwrap());",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..],",
          "        position: 0,",
          "    };",
          "    let result = buf.try_get_i64_le();",
          "    let remaining = buf.remaining();",
          "",
          "    // Here we do not assert, but you can verify the conditions from result and remaining",
          "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_i64_le());",
          "    assert_eq!(7, buf.remaining());",
          "    buf.position = 0;",
          "    assert_eq!(Ok(0x0203040506070807_i64), buf.try_get_i64_le());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.position = 0;",
          "    let bytes = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    buf.data = bytes;",
          "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_i64_le());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]