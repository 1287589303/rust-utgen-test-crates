[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(buf: Vec<u8>) -> Self {",
          "            Self { buf, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.buf.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);",
          "            self.position += 2;",
          "            Ok(value)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(vec![0x08]);",
          "    let result = buf.try_get_u16_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError{requested: 2, available: 1}));"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(buf: Vec<u8>) -> Self {",
          "            Self { buf, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.buf.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);",
          "            self.position += 2;",
          "            Ok(value)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(vec![0x08]);",
          "    let result = buf.try_get_u16_le();",
          "    assert_eq!(result, Err(TryGetError{requested: 2, available: 1}));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(buf: Vec<u8>) -> Self {",
          "            Self { buf, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.buf.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);",
          "            self.position += 2;",
          "            Ok(value)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(vec![]);",
          "    let result = buf.try_get_u16_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 2, available: 0 }), buf.try_get_u16_le());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(buf: Vec<u8>) -> Self {",
          "            Self { buf, position: 0 }",
          "        }",
          "",
          "        fn remaining(&self) -> usize {",
          "            self.buf.len() - self.position",
          "        }",
          "",
          "        fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {",
          "            if self.remaining() < 2 {",
          "                return Err(TryGetError {",
          "                    requested: 2,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let value = u16::from_le_bytes([self.buf[self.position], self.buf[self.position + 1]]);",
          "            self.position += 2;",
          "            Ok(value)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(vec![]);",
          "    let result = buf.try_get_u16_le();",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 0 }), buf.try_get_u16_le());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]