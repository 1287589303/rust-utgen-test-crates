[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: usize = 0;",
          "    let _result = original_capacity_from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(original_capacity_from_repr(0), 0);"
        ],
        "code": [
          "{",
          "    let repr: usize = 0;",
          "    let _result = original_capacity_from_repr(repr);",
          "    assert_eq!(original_capacity_from_repr(0), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: usize = 0; // This tests the minimum as per the inferred range.",
          "    let _result = original_capacity_from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(original_capacity_from_repr(0), 0);"
        ],
        "code": [
          "{",
          "    let repr: usize = 0; // This tests the minimum as per the inferred range.",
          "    let _result = original_capacity_from_repr(repr);",
          "    assert_eq!(original_capacity_from_repr(0), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: usize = 3; // An arbitrary middle value within the valid range.",
          "    let _result = original_capacity_from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(original_capacity_from_repr(0), 0);",
          "    assert_eq!(original_capacity_from_repr(1), 16);",
          "    assert_eq!(original_capacity_from_repr(2), 32);",
          "    assert_eq!(original_capacity_from_repr(3), 64);",
          "    assert_eq!(original_capacity_from_repr(4), 128);",
          "    assert_eq!(original_capacity_from_repr(5), 256);",
          "    assert_eq!(original_capacity_from_repr(6), 512);",
          "    assert_eq!(original_capacity_from_repr(10), 2048);",
          "    assert_eq!(original_capacity_from_repr(17), 65536);",
          "    assert_eq!(original_capacity_from_repr(usize::MAX), 0);"
        ],
        "code": [
          "{",
          "    let repr: usize = 3; // An arbitrary middle value within the valid range.",
          "    let _result = original_capacity_from_repr(repr);",
          "    assert_eq!(original_capacity_from_repr(0), 0);",
          "    assert_eq!(original_capacity_from_repr(1), 16);",
          "    assert_eq!(original_capacity_from_repr(2), 32);",
          "    assert_eq!(original_capacity_from_repr(3), 64);",
          "    assert_eq!(original_capacity_from_repr(4), 128);",
          "    assert_eq!(original_capacity_from_repr(5), 256);",
          "    assert_eq!(original_capacity_from_repr(6), 512);",
          "    assert_eq!(original_capacity_from_repr(10), 2048);",
          "    assert_eq!(original_capacity_from_repr(17), 65536);",
          "    assert_eq!(original_capacity_from_repr(usize::MAX), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let repr: usize = MAX_ORIGINAL_CAPACITY_WIDTH - 1; // Testing the boundary case.",
          "    let _result = original_capacity_from_repr(repr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(original_capacity_from_repr(0), 0);",
          "    assert_eq!(original_capacity_from_repr(1), 16);",
          "    assert_eq!(original_capacity_from_repr(2), 32);",
          "    assert_eq!(original_capacity_from_repr(3), 64);",
          "    assert_eq!(original_capacity_from_repr(16), 32768);",
          "    assert_eq!(original_capacity_from_repr(MAX_ORIGINAL_CAPACITY_WIDTH - 1), 1024);"
        ],
        "code": [
          "{",
          "    let repr: usize = MAX_ORIGINAL_CAPACITY_WIDTH - 1; // Testing the boundary case.",
          "    let _result = original_capacity_from_repr(repr);",
          "    assert_eq!(original_capacity_from_repr(0), 0);",
          "    assert_eq!(original_capacity_from_repr(1), 16);",
          "    assert_eq!(original_capacity_from_repr(2), 32);",
          "    assert_eq!(original_capacity_from_repr(3), 64);",
          "    assert_eq!(original_capacity_from_repr(16), 32768);",
          "    assert_eq!(original_capacity_from_repr(MAX_ORIGINAL_CAPACITY_WIDTH - 1), 1024);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]