[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a = BytesMut::new();",
          "    let b = BytesMut::new();",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.eq(&b), true);",
          "    let c = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let d = BytesMut::from_vec(vec![1, 2, 3]);",
          "    assert_eq!(c.eq(&d), true);",
          "    let e = BytesMut::from_vec(vec![4, 5, 6]);",
          "    assert_eq!(c.eq(&e), false);",
          "    let f = BytesMut::from_vec(vec![]);",
          "    assert_eq!(a.eq(&f), false);",
          "    let g = BytesMut::new();",
          "    assert_eq!(g.eq(&g), true);"
        ],
        "code": [
          "{",
          "    let a = BytesMut::new();",
          "    let b = BytesMut::new();",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.eq(&b), true);",
          "    let c = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let d = BytesMut::from_vec(vec![1, 2, 3]);",
          "    assert_eq!(c.eq(&d), true);",
          "    let e = BytesMut::from_vec(vec![4, 5, 6]);",
          "    assert_eq!(c.eq(&e), false);",
          "    let f = BytesMut::from_vec(vec![]);",
          "    assert_eq!(a.eq(&f), false);",
          "    let g = BytesMut::new();",
          "    assert_eq!(g.eq(&g), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = BytesMut::with_capacity(1);",
          "    let mut b = BytesMut::with_capacity(1);",
          "    a.extend_from_slice(&[1]);",
          "    b.extend_from_slice(&[1]);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(a.len() == 1);",
          "    assert!(b.len() == 1);",
          "    assert!(a.capacity() >= 1);",
          "    assert!(b.capacity() >= 1);",
          "    assert!(a.is_empty() == false);",
          "    assert!(b.is_empty() == false);",
          "    assert!(a.eq(&b) == true);",
          "    assert!(a.as_slice() == &[1]);",
          "    assert!(b.as_slice() == &[1]);"
        ],
        "code": [
          "{",
          "    let mut a = BytesMut::with_capacity(1);",
          "    let mut b = BytesMut::with_capacity(1);",
          "    a.extend_from_slice(&[1]);",
          "    b.extend_from_slice(&[1]);",
          "    let _ = a.eq(&b);",
          "    assert!(a.len() == 1);",
          "    assert!(b.len() == 1);",
          "    assert!(a.capacity() >= 1);",
          "    assert!(b.capacity() >= 1);",
          "    assert!(a.is_empty() == false);",
          "    assert!(b.is_empty() == false);",
          "    assert!(a.eq(&b) == true);",
          "    assert!(a.as_slice() == &[1]);",
          "    assert!(b.as_slice() == &[1]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = BytesMut::with_capacity(1);",
          "    let mut b = BytesMut::with_capacity(1);",
          "    a.extend_from_slice(&[1]);",
          "    b.extend_from_slice(&[2]);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 1);",
          "    assert_eq!(b.len(), 1);",
          "    assert!(!a.eq(&b));",
          "    assert!(a.as_slice()[0] == 1);",
          "    assert!(b.as_slice()[0] == 2);"
        ],
        "code": [
          "{",
          "    let mut a = BytesMut::with_capacity(1);",
          "    let mut b = BytesMut::with_capacity(1);",
          "    a.extend_from_slice(&[1]);",
          "    b.extend_from_slice(&[2]);",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.len(), 1);",
          "    assert_eq!(b.len(), 1);",
          "    assert!(!a.eq(&b));",
          "    assert!(a.as_slice()[0] == 1);",
          "    assert!(b.as_slice()[0] == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = BytesMut::with_capacity(3);",
          "    let mut b = BytesMut::with_capacity(3);",
          "    a.extend_from_slice(&[1, 2, 3]);",
          "    b.extend_from_slice(&[1, 2, 3]);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 3);",
          "    assert_eq!(b.len(), 3);",
          "    assert!(!a.is_empty());",
          "    assert!(!b.is_empty());",
          "    assert!(a.capacity() >= 3);",
          "    assert!(b.capacity() >= 3);",
          "    assert!(a.eq(&b));",
          "    assert!(b.eq(&a));",
          "    assert!(!a.eq(&BytesMut::new()));",
          "    assert!(!b.eq(&BytesMut::new()));",
          "    assert!(a.as_slice() == &[1, 2, 3]);",
          "    assert!(b.as_slice() == &[1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let mut a = BytesMut::with_capacity(3);",
          "    let mut b = BytesMut::with_capacity(3);",
          "    a.extend_from_slice(&[1, 2, 3]);",
          "    b.extend_from_slice(&[1, 2, 3]);",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.len(), 3);",
          "    assert_eq!(b.len(), 3);",
          "    assert!(!a.is_empty());",
          "    assert!(!b.is_empty());",
          "    assert!(a.capacity() >= 3);",
          "    assert!(b.capacity() >= 3);",
          "    assert!(a.eq(&b));",
          "    assert!(b.eq(&a));",
          "    assert!(!a.eq(&BytesMut::new()));",
          "    assert!(!b.eq(&BytesMut::new()));",
          "    assert!(a.as_slice() == &[1, 2, 3]);",
          "    assert!(b.as_slice() == &[1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = BytesMut::with_capacity(3);",
          "    let mut b = BytesMut::with_capacity(3);",
          "    a.extend_from_slice(&[1, 2, 3]);",
          "    b.extend_from_slice(&[4, 5, 6]);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(a.len() == 3);",
          "    assert!(b.len() == 3);",
          "    assert!(!a.is_empty());",
          "    assert!(!b.is_empty());",
          "    assert!(a.capacity() >= 3);",
          "    assert!(b.capacity() >= 3);",
          "    assert_eq!(a.as_slice(), &[1, 2, 3]);",
          "    assert_eq!(b.as_slice(), &[4, 5, 6]);",
          "    assert!(!a.eq(&b));"
        ],
        "code": [
          "{",
          "    let mut a = BytesMut::with_capacity(3);",
          "    let mut b = BytesMut::with_capacity(3);",
          "    a.extend_from_slice(&[1, 2, 3]);",
          "    b.extend_from_slice(&[4, 5, 6]);",
          "    let _ = a.eq(&b);",
          "    assert!(a.len() == 3);",
          "    assert!(b.len() == 3);",
          "    assert!(!a.is_empty());",
          "    assert!(!b.is_empty());",
          "    assert!(a.capacity() >= 3);",
          "    assert!(b.capacity() >= 3);",
          "    assert_eq!(a.as_slice(), &[1, 2, 3]);",
          "    assert_eq!(b.as_slice(), &[4, 5, 6]);",
          "    assert!(!a.eq(&b));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = BytesMut::with_capacity(3);",
          "    let mut b = BytesMut::with_capacity(2);",
          "    a.extend_from_slice(&[1, 2, 3]);",
          "    b.extend_from_slice(&[1, 2]);",
          "    let _ = a.eq(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 3);",
          "    assert_eq!(b.len(), 2);",
          "    assert!(a.capacity() >= 3);",
          "    assert!(b.capacity() >= 2);",
          "    assert!(a.is_empty() == false);",
          "    assert!(b.is_empty() == false);",
          "    assert!(a.as_slice() == &[1, 2, 3]);",
          "    assert!(b.as_slice() == &[1, 2]);",
          "    assert!(a.eq(&b) == false);"
        ],
        "code": [
          "{",
          "    let mut a = BytesMut::with_capacity(3);",
          "    let mut b = BytesMut::with_capacity(2);",
          "    a.extend_from_slice(&[1, 2, 3]);",
          "    b.extend_from_slice(&[1, 2]);",
          "    let _ = a.eq(&b);",
          "    assert_eq!(a.len(), 3);",
          "    assert_eq!(b.len(), 2);",
          "    assert!(a.capacity() >= 3);",
          "    assert!(b.capacity() >= 2);",
          "    assert!(a.is_empty() == false);",
          "    assert!(b.is_empty() == false);",
          "    assert!(a.as_slice() == &[1, 2, 3]);",
          "    assert!(b.as_slice() == &[1, 2]);",
          "    assert!(a.eq(&b) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]