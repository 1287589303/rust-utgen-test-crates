[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyBuf;",
          "",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "",
          "        fn advance(&mut self, _cnt: usize) {}",
          "    }",
          "",
          "    let mut bytes_mut = BytesMut::new();",
          "    let src = EmptyBuf;",
          "    bytes_mut.put(src);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.remaining_mut(), 0);",
          "    assert_eq!(bytes_mut.spare_capacity_mut().len(), bytes_mut.capacity());"
        ],
        "code": [
          "{",
          "    struct EmptyBuf;",
          "",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "",
          "        fn advance(&mut self, _cnt: usize) {}",
          "    }",
          "",
          "    let mut bytes_mut = BytesMut::new();",
          "    let src = EmptyBuf;",
          "    bytes_mut.put(src);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.remaining_mut(), 0);",
          "    assert_eq!(bytes_mut.spare_capacity_mut().len(), bytes_mut.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptySliceBuf<'a> {",
          "        data: &'a [u8],",
          "    }",
          "",
          "    impl<'a> Buf for EmptySliceBuf<'a> {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "",
          "        fn advance(&mut self, _cnt: usize) {}",
          "    }",
          "",
          "    let empty_slice: &[u8] = &[];",
          "    let mut bytes_mut = BytesMut::new();",
          "    let src = EmptySliceBuf { data: empty_slice };",
          "    bytes_mut.put(src);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.as_slice(), &[]);",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);"
        ],
        "code": [
          "{",
          "    struct EmptySliceBuf<'a> {",
          "        data: &'a [u8],",
          "    }",
          "",
          "    impl<'a> Buf for EmptySliceBuf<'a> {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "",
          "        fn advance(&mut self, _cnt: usize) {}",
          "    }",
          "",
          "    let empty_slice: &[u8] = &[];",
          "    let mut bytes_mut = BytesMut::new();",
          "    let src = EmptySliceBuf { data: empty_slice };",
          "    bytes_mut.put(src);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.as_slice(), &[]);",
          "    assert!(bytes_mut.spare_capacity_mut().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]