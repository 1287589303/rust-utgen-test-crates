[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![1u8, 2u8, 3u8].as_ptr();",
          "    let len: usize = 3;",
          "",
          "    unsafe {",
          "        let result = shared_to_vec_impl(shared, data, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1) }));",
          "    let data: *const u8 = vec![1u8, 2u8, 3u8].as_ptr();",
          "    let len: usize = 3;",
          "    unsafe {",
          "    let result = shared_to_vec_impl(shared, data, len);",
          "    assert_eq!(result, vec![1u8, 2u8, 3u8]);",
          "    }"
        ],
        "code": [
          "{",
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![1u8, 2u8, 3u8].as_ptr();",
          "    let len: usize = 3;",
          "",
          "    unsafe {",
          "        let result = shared_to_vec_impl(shared, data, len);",
          "    }",
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1) }));",
          "    let data: *const u8 = vec![1u8, 2u8, 3u8].as_ptr();",
          "    let len: usize = 3;",
          "    unsafe {",
          "    let result = shared_to_vec_impl(shared, data, len);",
          "    assert_eq!(result, vec![1u8, 2u8, 3u8]);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 20;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![4u8, 5u8, 6u8, 7u8, 8u8].as_ptr();",
          "    let len: usize = 5;",
          "",
          "    unsafe {",
          "        let result1 = shared_to_vec_impl(shared, data, len);",
          "        let result2 = shared_to_vec_impl(shared, data, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let cap = 20;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1) }));",
          "    let data: *const u8 = vec![4u8, 5u8, 6u8, 7u8, 8u8].as_ptr();",
          "    let len: usize = 5;",
          "    ",
          "    unsafe {",
          "    let result = shared_to_vec_impl(shared, data, len);",
          "    assert_eq!(result.len(), len);",
          "    assert_eq!(result.as_slice(), &[4u8, 5u8, 6u8, 7u8, 8u8]);",
          "    let shared_after_first_call = (*shared).ref_cnt.load(Ordering::Relaxed);",
          "    assert_eq!(shared_after_first_call, 1);",
          "    }",
          "    ",
          "    unsafe {",
          "    release_shared(shared);",
          "    }"
        ],
        "code": [
          "{",
          "    let cap = 20;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![4u8, 5u8, 6u8, 7u8, 8u8].as_ptr();",
          "    let len: usize = 5;",
          "",
          "    unsafe {",
          "        let result1 = shared_to_vec_impl(shared, data, len);",
          "        let result2 = shared_to_vec_impl(shared, data, len);",
          "    }",
          "    let cap = 20;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1) }));",
          "    let data: *const u8 = vec![4u8, 5u8, 6u8, 7u8, 8u8].as_ptr();",
          "    let len: usize = 5;",
          "    ",
          "    unsafe {",
          "    let result = shared_to_vec_impl(shared, data, len);",
          "    assert_eq!(result.len(), len);",
          "    assert_eq!(result.as_slice(), &[4u8, 5u8, 6u8, 7u8, 8u8]);",
          "    let shared_after_first_call = (*shared).ref_cnt.load(Ordering::Relaxed);",
          "    assert_eq!(shared_after_first_call, 1);",
          "    }",
          "    ",
          "    unsafe {",
          "    release_shared(shared);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 5;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![9u8, 10u8, 11u8, 12u8, 13u8].as_ptr();",
          "    let len: usize = 5;",
          "",
          "    unsafe {",
          "        let result = shared_to_vec_impl(shared, data, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let cap = 5;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1), }));",
          "    let data: *const u8 = vec![9u8, 10u8, 11u8, 12u8, 13u8].as_ptr();",
          "    let len: usize = 5;",
          "    unsafe { let result = shared_to_vec_impl(shared, data, len); assert_eq!(result, vec![9u8, 10u8, 11u8, 12u8, 13u8]); }",
          "    unsafe { release_shared(shared); }"
        ],
        "code": [
          "{",
          "    let cap = 5;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![9u8, 10u8, 11u8, 12u8, 13u8].as_ptr();",
          "    let len: usize = 5;",
          "",
          "    unsafe {",
          "        let result = shared_to_vec_impl(shared, data, len);",
          "    }",
          "    let cap = 5;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1), }));",
          "    let data: *const u8 = vec![9u8, 10u8, 11u8, 12u8, 13u8].as_ptr();",
          "    let len: usize = 5;",
          "    unsafe { let result = shared_to_vec_impl(shared, data, len); assert_eq!(result, vec![9u8, 10u8, 11u8, 12u8, 13u8]); }",
          "    unsafe { release_shared(shared); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![14u8, 15u8].as_ptr();",
          "    let len: usize = 2;",
          "",
          "    unsafe {",
          "        let result = shared_to_vec_impl(shared, data, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1), }));",
          "    let data: *const u8 = vec![14u8, 15u8].as_ptr();",
          "    let len: usize = 2;",
          "    unsafe { let result = shared_to_vec_impl(shared, data, len); assert_eq!(result, vec![14u8, 15u8]); }",
          "    unsafe { drop(Box::from_raw(shared)); }"
        ],
        "code": [
          "{",
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared {",
          "        buf,",
          "        cap,",
          "        ref_cnt: AtomicUsize::new(1),",
          "    }));",
          "",
          "    let data: *const u8 = vec![14u8, 15u8].as_ptr();",
          "    let len: usize = 2;",
          "",
          "    unsafe {",
          "        let result = shared_to_vec_impl(shared, data, len);",
          "    }",
          "    let cap = 10;",
          "    let buf = Box::into_raw(Box::new(vec![0u8; cap]));",
          "    let shared = Box::into_raw(Box::new(Shared { buf, cap, ref_cnt: AtomicUsize::new(1), }));",
          "    let data: *const u8 = vec![14u8, 15u8].as_ptr();",
          "    let len: usize = 2;",
          "    unsafe { let result = shared_to_vec_impl(shared, data, len); assert_eq!(result, vec![14u8, 15u8]); }",
          "    unsafe { drop(Box::from_raw(shared)); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]