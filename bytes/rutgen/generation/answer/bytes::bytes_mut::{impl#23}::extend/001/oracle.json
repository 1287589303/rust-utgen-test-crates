[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    let input: Vec<u8> = vec![1, 2, 3, 4, 5];",
          "    buf.extend(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(!buf.is_empty());",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(buf.remaining_mut(), 5);",
          "    assert!(buf.try_reclaim(5));",
          "    buf.clear();",
          "    assert_eq!(buf.len(), 0);",
          "    buf.extend(iter::once(6));",
          "    assert_eq!(buf.as_slice(), &[6]);",
          "    buf.truncate(1);",
          "    assert_eq!(buf.len(), 1);",
          "    buf.resize(5, 0);",
          "    assert_eq!(buf.as_slice(), &[6, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    let input: Vec<u8> = vec![1, 2, 3, 4, 5];",
          "    buf.extend(input);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(!buf.is_empty());",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(buf.remaining_mut(), 5);",
          "    assert!(buf.try_reclaim(5));",
          "    buf.clear();",
          "    assert_eq!(buf.len(), 0);",
          "    buf.extend(iter::once(6));",
          "    assert_eq!(buf.as_slice(), &[6]);",
          "    buf.truncate(1);",
          "    assert_eq!(buf.len(), 1);",
          "    buf.resize(5, 0);",
          "    assert_eq!(buf.as_slice(), &[6, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    let input: Vec<u8> = vec![];",
          "    buf.extend(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.is_empty());",
          "    assert_eq!(buf.capacity(), 10);",
          "    ",
          "    let mut buf_non_empty = BytesMut::with_capacity(10);",
          "    let input_non_empty: Vec<u8> = vec![1, 2, 3];",
          "    buf_non_empty.extend(input_non_empty);",
          "    assert_eq!(buf_non_empty.len(), 3);",
          "    assert!(!buf_non_empty.is_empty());",
          "    asserteq!(buf_non_empty.as_slice(), &[1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    let input: Vec<u8> = vec![];",
          "    buf.extend(input);",
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.is_empty());",
          "    assert_eq!(buf.capacity(), 10);",
          "    ",
          "    let mut buf_non_empty = BytesMut::with_capacity(10);",
          "    let input_non_empty: Vec<u8> = vec![1, 2, 3];",
          "    buf_non_empty.extend(input_non_empty);",
          "    assert_eq!(buf_non_empty.len(), 3);",
          "    assert!(!buf_non_empty.is_empty());",
          "    asserteq!(buf_non_empty.as_slice(), &[1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]