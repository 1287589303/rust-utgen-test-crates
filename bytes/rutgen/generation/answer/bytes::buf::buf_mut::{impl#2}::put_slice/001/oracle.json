[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() > buf.len()",
          "    buf.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    panic_advance(&TryGetError { requested: 5, available: 3 });"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 3];",
          "    let src: &[u8] = &[1, 2, 3, 4, 5]; // src.len() > buf.len()",
          "    buf.put_slice(src);",
          "    panic_advance(&TryGetError { requested: 5, available: 3 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
          "    let src: &[u8] = &[6, 7]; // src.len() > buf.len()",
          "    buf.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    panic_advance(&TryGetError { requested: 2, available: 1 });"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 1];",
          "    let src: &[u8] = &[6, 7]; // src.len() > buf.len()",
          "    buf.put_slice(src);",
          "    panic_advance(&TryGetError { requested: 2, available: 1 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let src: &[u8] = &[8]; // src.len() > buf.len()",
          "    buf.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    panic_advance(&TryGetError { requested: 1, available: 0 });"
        ],
        "code": [
          "{",
          "    let mut buf: &mut [core::mem::MaybeUninit<u8>] = &mut [core::mem::MaybeUninit::uninit(); 0];",
          "    let src: &[u8] = &[8]; // src.len() > buf.len()",
          "    buf.put_slice(src);",
          "    panic_advance(&TryGetError { requested: 1, available: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]