[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let kind_vec: usize = 0b1; // KIND_VEC",
          "    let shared = kind_vec as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "        let result = promotable_is_unique(&data);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let kind_vec: usize = 0b1; // KIND_VEC",
          "    let shared = kind_vec as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "    let result = promotable_is_unique(&data);",
          "    assert_eq!(result, true);",
          "    }"
        ],
        "code": [
          "{",
          "    let kind_vec: usize = 0b1; // KIND_VEC",
          "    let shared = kind_vec as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "        let result = promotable_is_unique(&data);",
          "    }",
          "    let kind_vec: usize = 0b1; // KIND_VEC",
          "    let shared = kind_vec as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "    let result = promotable_is_unique(&data);",
          "    assert_eq!(result, true);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared: *mut u8 = std::ptr::null_mut();",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "        let result = promotable_is_unique(&data);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let shared: *mut u8 = std::ptr::null_mut();",
          "    let data = AtomicPtr::new(shared);",
          "    let result = promotable_is_unique(&data);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let shared: *mut u8 = std::ptr::null_mut();",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "        let result = promotable_is_unique(&data);",
          "    }",
          "    let shared: *mut u8 = std::ptr::null_mut();",
          "    let data = AtomicPtr::new(shared);",
          "    let result = promotable_is_unique(&data);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let non_arc_value: usize = 0xFE; // Any arbitrary value not corresponding to an ARC type",
          "    let shared = non_arc_value as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "        let result = promotable_is_unique(&data);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let non_arc_value: usize = 0xFE; // Any arbitrary value not corresponding to an ARC type",
          "    let shared = non_arc_value as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "    let result = promotable_is_unique(&data);",
          "    assert_eq!(result, true);",
          "    }"
        ],
        "code": [
          "{",
          "    let non_arc_value: usize = 0xFE; // Any arbitrary value not corresponding to an ARC type",
          "    let shared = non_arc_value as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "        let result = promotable_is_unique(&data);",
          "    }",
          "    let non_arc_value: usize = 0xFE; // Any arbitrary value not corresponding to an ARC type",
          "    let shared = non_arc_value as *mut u8;",
          "    let data = AtomicPtr::new(shared);",
          "    unsafe {",
          "    let result = promotable_is_unique(&data);",
          "    assert_eq!(result, true);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]