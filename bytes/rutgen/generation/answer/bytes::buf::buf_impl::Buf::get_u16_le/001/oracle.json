[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x09\\x08 hello\"[..];",
          "    let result = buf.get_u16_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0x0809);",
          "    let mut buf: &[u8] = &b\"\\x00\\x01\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0x0100);",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0xFFFF);",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0x0000);",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0x0201);",
          "    let mut buf: &[u8] = &b\"\\x09\\x08\"[..];",
          "    let _ = buf.get_u16_le();",
          "    assert!(buf.has_remaining());",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    let result = std::panic::catch_unwind(|| buf.get_u16_le());",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x09\\x08 hello\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(result, 0x0809);",
          "    let mut buf: &[u8] = &b\"\\x00\\x01\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0x0100);",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0xFFFF);",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0x0000);",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(buf.get_u16_le(), 0x0201);",
          "    let mut buf: &[u8] = &b\"\\x09\\x08\"[..];",
          "    let _ = buf.get_u16_le();",
          "    assert!(buf.has_remaining());",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    let result = std::panic::catch_unwind(|| buf.get_u16_le());",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
          "    let result = buf.get_u16_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0x0201);",
          "    assert!(buf.remaining() == 0);",
          "    assert!(buf.has_remaining() == false);",
          "    assert!(panic::catch_unwind(|| buf.get_u16_le()).is_err());",
          "    let mut buf_overflow: &[u8] = &b\"\\x01\"[..];",
          "    assert!(panic::catch_unwind(|| buf_overflow.get_u16_le()).is_err());",
          "    let mut buf_empty: &[u8] = &b\"\"[..];",
          "    assert!(panic::catch_unwind(|| buf_empty.get_u16_le()).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(result, 0x0201);",
          "    assert!(buf.remaining() == 0);",
          "    assert!(buf.has_remaining() == false);",
          "    assert!(panic::catch_unwind(|| buf.get_u16_le()).is_err());",
          "    let mut buf_overflow: &[u8] = &b\"\\x01\"[..];",
          "    assert!(panic::catch_unwind(|| buf_overflow.get_u16_le()).is_err());",
          "    let mut buf_empty: &[u8] = &b\"\"[..];",
          "    assert!(panic::catch_unwind(|| buf_empty.get_u16_le()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\"[..];",
          "    let result = buf.get_u16_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);",
          "    assert!(buf.remaining() < 2);",
          "    assert!(buf.has_remaining() == false);",
          "    assert!(matches!(buf.try_get_u16_le(), Err(TryGetError { requested: 2, available: 1 })));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(result, 0);",
          "    assert!(buf.remaining() < 2);",
          "    assert!(buf.has_remaining() == false);",
          "    assert!(matches!(buf.try_get_u16_le(), Err(TryGetError { requested: 2, available: 1 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF hello\"[..];",
          "    let result = buf.get_u16_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0xFFFF);",
          "    assert_eq!(buf.remaining(), 4);",
          "    assert_eq!(buf.chunk(), b\" hello\");",
          "    assert!(buf.has_remaining());",
          "    buf.advance(2);",
          "    assert_eq!(buf.remaining(), 4);",
          "    assert_eq!(buf.get_u16_le(), 0xFFFF);",
          "    buf.advance(2);",
          "    assert_eq!(buf.remaining(), 2);",
          "    assert!(!buf.has_remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF hello\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(result, 0xFFFF);",
          "    assert_eq!(buf.remaining(), 4);",
          "    assert_eq!(buf.chunk(), b\" hello\");",
          "    assert!(buf.has_remaining());",
          "    buf.advance(2);",
          "    assert_eq!(buf.remaining(), 4);",
          "    assert_eq!(buf.get_u16_le(), 0xFFFF);",
          "    buf.advance(2);",
          "    assert_eq!(buf.remaining(), 2);",
          "    assert!(!buf.has_remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x00\\x00 hello\"[..];",
          "    let result = buf.get_u16_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0x0000, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x09\\x08 hello\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0x0809, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0x0201, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF hello\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0xFFFF, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x00\"[..];",
          "    panic::catch_unwind(|| { buf.get_u16_le(); }).expect_err(\"Expected panic due to insufficient data.\");",
          "    ",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    panic::catch_unwind(|| { buf.get_u16_le(); }).expect_err(\"Expected panic due to insufficient data.\");",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\"[..];",
          "    panic::catch_unwind(|| { buf.get_u16_le(); }).expect_err(\"Expected panic due to insufficient data.\");",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0x0201, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\xA1\\xB2\\xC3\\xD4\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0xB2A1, result);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x00\\x00 hello\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0x0000, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x09\\x08 hello\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0x0809, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0x0201, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF hello\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0xFFFF, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x00\"[..];",
          "    panic::catch_unwind(|| { buf.get_u16_le(); }).expect_err(\"Expected panic due to insufficient data.\");",
          "    ",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    panic::catch_unwind(|| { buf.get_u16_le(); }).expect_err(\"Expected panic due to insufficient data.\");",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\"[..];",
          "    panic::catch_unwind(|| { buf.get_u16_le(); }).expect_err(\"Expected panic due to insufficient data.\");",
          "    ",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0x0201, result);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\xA1\\xB2\\xC3\\xD4\"[..];",
          "    let result = buf.get_u16_le();",
          "    assert_eq!(0xB2A1, result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]