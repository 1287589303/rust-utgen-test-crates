[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut [u8] {",
          "            let remaining = self.remaining_mut();",
          "            &mut self.data[self.data.len()..self.data.len() + remaining]",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.data, b\"\\x00\\x00\");",
          "    ",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0xFFFF);",
          "    assert_eq!(buf.data, b\"\\xFF\\xFF\");",
          "    ",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0x1234);",
          "    assert_eq!(buf.data, b\"\\x12\\x34\");",
          "    ",
          "    let mut buf = TestBuf::new(1); // capacity is not enough",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf.put_u16(0x1234);",
          "    });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf = TestBuf::new(4);",
          "    buf.put_u16(0xABCD);",
          "    assert_eq!(buf.data, b\"\\xAB\\xCD\");",
          "    ",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0x0001);",
          "    assert_eq!(buf.data, b\"\\x00\\x01\");"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut [u8] {",
          "            let remaining = self.remaining_mut();",
          "            &mut self.data[self.data.len()..self.data.len() + remaining]",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0);",
          "    assert_eq!(buf.data, b\"\\x00\\x00\");",
          "    ",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0xFFFF);",
          "    assert_eq!(buf.data, b\"\\xFF\\xFF\");",
          "    ",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0x1234);",
          "    assert_eq!(buf.data, b\"\\x12\\x34\");",
          "    ",
          "    let mut buf = TestBuf::new(1); // capacity is not enough",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf.put_u16(0x1234);",
          "    });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf = TestBuf::new(4);",
          "    buf.put_u16(0xABCD);",
          "    assert_eq!(buf.data, b\"\\xAB\\xCD\");",
          "    ",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0x0001);",
          "    assert_eq!(buf.data, b\"\\x00\\x01\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut [u8] {",
          "            let remaining = self.remaining_mut();",
          "            &mut self.data[self.data.len()..self.data.len() + remaining]",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(65535);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.data, b\"\\xFF\\xFF\");",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0);",
          "    assert_eq!(buf.data, b\"\\x00\\x00\");",
          "    let mut buf = TestBuf::new(3);",
          "    buf.put_u16(258);",
          "    assert_eq!(buf.data, b\"\\x01\\x02\");",
          "    let mut buf = TestBuf::new(2);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf.put_u16(1000);",
          "    });",
          "    assert!(result.is_err());",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0x0809);",
          "    assert_eq!(buf.data, b\"\\x08\\x09\");",
          "    let mut buf = TestBuf::new(4);",
          "    buf.put_u16(1);",
          "    buf.put_u16(2);",
          "    assert_eq!(buf.data, b\"\\x00\\x01\\x00\\x02\");",
          "    let mut buf = TestBuf::new(2);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf.put_u16(65536);",
          "    });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut [u8] {",
          "            let remaining = self.remaining_mut();",
          "            &mut self.data[self.data.len()..self.data.len() + remaining]",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(65535);",
          "    assert_eq!(buf.data, b\"\\xFF\\xFF\");",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0);",
          "    assert_eq!(buf.data, b\"\\x00\\x00\");",
          "    let mut buf = TestBuf::new(3);",
          "    buf.put_u16(258);",
          "    assert_eq!(buf.data, b\"\\x01\\x02\");",
          "    let mut buf = TestBuf::new(2);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf.put_u16(1000);",
          "    });",
          "    assert!(result.is_err());",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16(0x0809);",
          "    assert_eq!(buf.data, b\"\\x08\\x09\");",
          "    let mut buf = TestBuf::new(4);",
          "    buf.put_u16(1);",
          "    buf.put_u16(2);",
          "    assert_eq!(buf.data, b\"\\x00\\x01\\x00\\x02\");",
          "    let mut buf = TestBuf::new(2);",
          "    let result = std::panic::catch_unwind(|| {",
          "    buf.put_u16(65536);",
          "    });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut [u8] {",
          "            let remaining = self.remaining_mut();",
          "            &mut self.data[self.data.len()..self.data.len() + remaining]",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(1);",
          "    buf.put_u16(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert!(panic_does_not_fit_called);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut [u8] {",
          "            let remaining = self.remaining_mut();",
          "            &mut self.data[self.data.len()..self.data.len() + remaining]",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(1);",
          "    buf.put_u16(1);",
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert!(panic_does_not_fit_called);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]