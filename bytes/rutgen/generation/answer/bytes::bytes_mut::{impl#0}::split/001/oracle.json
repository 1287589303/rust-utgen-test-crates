[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::new();",
          "    let other = buf.split();",
          "}"
        ],
        "oracle": [
          "    assert!(buf.is_empty());",
          "    assert_eq!(0, buf.len());",
          "    assert_eq!(0, buf.capacity());",
          "    assert_eq!(other.len(), 0);",
          "    assert_eq!(other.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::new();",
          "    let other = buf.split();",
          "    assert!(buf.is_empty());",
          "    assert_eq!(0, buf.len());",
          "    assert_eq!(0, buf.capacity());",
          "    assert_eq!(other.len(), 0);",
          "    assert_eq!(other.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(1);",
          "    buf.resize(1, 0u8);",
          "    let other = buf.split();",
          "}"
        ],
        "oracle": [
          "    assert!(buf.is_empty());",
          "    assert_eq!(1, buf.capacity());",
          "    assert_eq!(other.len(), 1);",
          "    assert_eq!(other.as_slice()[0], 0u8);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(1);",
          "    buf.resize(1, 0u8);",
          "    let other = buf.split();",
          "    assert!(buf.is_empty());",
          "    assert_eq!(1, buf.capacity());",
          "    assert_eq!(other.len(), 1);",
          "    assert_eq!(other.as_slice()[0], 0u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(1024);",
          "    let data = b\"hello world\";",
          "    buf.extend_from_slice(data);",
          "    let other = buf.split();",
          "}"
        ],
        "oracle": [
          "    assert!(buf.is_empty());",
          "    assert_eq!(buf.capacity(), 1024 - data.len());",
          "    assert_eq!(other.as_slice(), data);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(1024);",
          "    let data = b\"hello world\";",
          "    buf.extend_from_slice(data);",
          "    let other = buf.split();",
          "    assert!(buf.is_empty());",
          "    assert_eq!(buf.capacity(), 1024 - data.len());",
          "    assert_eq!(other.as_slice(), data);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]