[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = 0;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = 0;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    assert_eq!(ptr as usize, addr);",
          "    assert!(ptr.is_null() == (addr == 0));",
          "    assert!(unsafe { ptr.read() } == 0);",
          "    assert!(ptr.cast::<u8>().is_null() == (addr == 0));"
        ],
        "code": [
          "{",
          "    let addr: usize = 0;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    let addr: usize = 0;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    assert_eq!(ptr as usize, addr);",
          "    assert!(ptr.is_null() == (addr == 0));",
          "    assert!(unsafe { ptr.read() } == 0);",
          "    assert!(ptr.cast::<u8>().is_null() == (addr == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    assert_eq!(ptr as usize, addr);",
          "    assert!(!ptr.is_null());"
        ],
        "code": [
          "{",
          "    let addr: usize = 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    let addr: usize = 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    assert_eq!(ptr as usize, addr);",
          "    assert!(!ptr.is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = (1 << PTR_WIDTH) - 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = (1 << PTR_WIDTH) - 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    assert_eq!(ptr as usize, addr);",
          "    assert!(ptr.is_null() == false);",
          "    assert!(unsafe { ptr.is_null() } == false);",
          "    assert!(ptr as usize >= core::ptr::null_mut::<u8>() as usize);"
        ],
        "code": [
          "{",
          "    let addr: usize = (1 << PTR_WIDTH) - 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    let addr: usize = (1 << PTR_WIDTH) - 1;",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    assert_eq!(ptr as usize, addr);",
          "    assert!(ptr.is_null() == false);",
          "    assert!(unsafe { ptr.is_null() } == false);",
          "    assert!(ptr as usize >= core::ptr::null_mut::<u8>() as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = (1 << (PTR_WIDTH - 1)); ",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = (1 << (PTR_WIDTH - 1));",
          "    assert_eq!(unsafe { ptr::addr_of!(ptr) }, addr);",
          "    assert!(ptr::is_null(ptr) == false);",
          "    assert_eq!(ptr.cast::<u8>() as usize, addr);",
          "    assert!(ptr != core::ptr::null_mut());",
          "    assert_eq!(unsafe { invalid_ptr::<u8>(core::usize::MAX) }, core::ptr::null_mut());",
          "    assert_eq!(invalid_ptr::<u8>(0), core::ptr::null_mut());"
        ],
        "code": [
          "{",
          "    let addr: usize = (1 << (PTR_WIDTH - 1)); ",
          "    let ptr: *mut u8 = invalid_ptr::<u8>(addr);",
          "    let addr: usize = (1 << (PTR_WIDTH - 1));",
          "    assert_eq!(unsafe { ptr::addr_of!(ptr) }, addr);",
          "    assert!(ptr::is_null(ptr) == false);",
          "    assert_eq!(ptr.cast::<u8>() as usize, addr);",
          "    assert!(ptr != core::ptr::null_mut());",
          "    assert_eq!(unsafe { invalid_ptr::<u8>(core::usize::MAX) }, core::ptr::null_mut());",
          "    assert_eq!(invalid_ptr::<u8>(0), core::ptr::null_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]