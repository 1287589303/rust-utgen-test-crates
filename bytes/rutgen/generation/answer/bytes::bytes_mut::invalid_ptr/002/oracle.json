[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = 0;",
          "    let result = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = 0;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result, core::ptr::null_mut::<u8>().wrapping_add(addr).cast::<u8>());",
          "    assert!(core::ptr::eq(result, core::ptr::null_mut::<u8>().wrapping_add(0)));",
          "    assert!(result.is_null());",
          "    let addr: usize = usize::MAX;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result, core::ptr::null_mut::<u8>().wrapping_add(addr).cast::<u8>());",
          "    assert!(!result.is_null());",
          "    let addr: usize = 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result, core::ptr::null_mut::<u8>().wrapping_add(addr).cast::<u8>());",
          "    assert!(!result.is_null());"
        ],
        "code": [
          "{",
          "    let addr: usize = 0;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    let addr: usize = 0;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result, core::ptr::null_mut::<u8>().wrapping_add(addr).cast::<u8>());",
          "    assert!(core::ptr::eq(result, core::ptr::null_mut::<u8>().wrapping_add(0)));",
          "    assert!(result.is_null());",
          "    let addr: usize = usize::MAX;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result, core::ptr::null_mut::<u8>().wrapping_add(addr).cast::<u8>());",
          "    assert!(!result.is_null());",
          "    let addr: usize = 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result, core::ptr::null_mut::<u8>().wrapping_add(addr).cast::<u8>());",
          "    assert!(!result.is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result as usize, addr);",
          "    assert!(result.is_null() == false);",
          "    assert!(result != core::ptr::null_mut::<u8>());",
          "    assert_eq!(unsafe { *result }, 0);"
        ],
        "code": [
          "{",
          "    let addr: usize = 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result as usize, addr);",
          "    assert!(result.is_null() == false);",
          "    assert!(result != core::ptr::null_mut::<u8>());",
          "    assert_eq!(unsafe { *result }, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = MAX_ORIGINAL_CAPACITY_WIDTH + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = MAX_ORIGINAL_CAPACITY_WIDTH + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result as usize, addr);",
          "    assert!(result.is_null() == false);",
          "    assert!(result.is_non_null());"
        ],
        "code": [
          "{",
          "    let addr: usize = MAX_ORIGINAL_CAPACITY_WIDTH + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    let addr: usize = MAX_ORIGINAL_CAPACITY_WIDTH + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result as usize, addr);",
          "    assert!(result.is_null() == false);",
          "    assert!(result.is_non_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = MAX_VEC_POS + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = MAX_VEC_POS + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result as usize, addr);",
          "    assert!(result.is_null() == false);",
          "    assert!(result != core::ptr::null_mut());",
          "    assert_eq!(unsafe { *result }, 0);"
        ],
        "code": [
          "{",
          "    let addr: usize = MAX_VEC_POS + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    let addr: usize = MAX_VEC_POS + 1;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert_eq!(result as usize, addr);",
          "    assert!(result.is_null() == false);",
          "    assert!(result != core::ptr::null_mut());",
          "    assert_eq!(unsafe { *result }, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let addr: usize = usize::MAX;",
          "    let result = invalid_ptr::<u8>(addr);",
          "}"
        ],
        "oracle": [
          "    let addr: usize = usize::MAX;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert!(result.is_null() == false);"
        ],
        "code": [
          "{",
          "    let addr: usize = usize::MAX;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    let addr: usize = usize::MAX;",
          "    let result = invalid_ptr::<u8>(addr);",
          "    assert!(result.is_null() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]