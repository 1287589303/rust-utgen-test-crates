[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BufA {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufA {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    struct BufB {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufB {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    let a = BufA { data: vec![1, 2, 3], pos: 0 };",
          "    let b = BufB { data: vec![4, 5, 6, 7], pos: 0 };",
          "    let mut chain = Chain { a, b };",
          "",
          "    unsafe {",
          "        chain.advance_mut(5);",
          "    }",
          "}"
        ],
        "oracle": [
          "    chain.a.remaining_mut() == 3;",
          "    chain.b.remaining_mut() == 4;",
          "    chain.a.pos == 3;",
          "    chain.b.pos == 0;",
          "    chain.a.remaining_mut() == 0;"
        ],
        "code": [
          "{",
          "    struct BufA {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufA {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    struct BufB {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufB {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    let a = BufA { data: vec![1, 2, 3], pos: 0 };",
          "    let b = BufB { data: vec![4, 5, 6, 7], pos: 0 };",
          "    let mut chain = Chain { a, b };",
          "",
          "    unsafe {",
          "        chain.advance_mut(5);",
          "    }",
          "    chain.a.remaining_mut() == 3;",
          "    chain.b.remaining_mut() == 4;",
          "    chain.a.pos == 3;",
          "    chain.b.pos == 0;",
          "    chain.a.remaining_mut() == 0;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BufA {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufA {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    struct BufB {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufB {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    let a = BufA { data: vec![1, 2], pos: 0 };",
          "    let b = BufB { data: vec![3, 4, 5, 6, 7], pos: 0 };",
          "    let mut chain = Chain { a, b };",
          "",
          "    unsafe {",
          "        chain.advance_mut(3);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chain.a.pos, 2);",
          "    assert_eq!(chain.b.pos, 1);",
          "    assert_eq!(chain.a.remaining_mut(), 0);",
          "    assert_eq!(chain.b.remaining_mut(), 4);"
        ],
        "code": [
          "{",
          "    struct BufA {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufA {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    struct BufB {",
          "        data: Vec<u8>,",
          "        pos: usize,",
          "    }",
          "",
          "    impl BufMut for BufB {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.pos += cnt;",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            todo!()",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "    }",
          "",
          "    let a = BufA { data: vec![1, 2], pos: 0 };",
          "    let b = BufB { data: vec![3, 4, 5, 6, 7], pos: 0 };",
          "    let mut chain = Chain { a, b };",
          "",
          "    unsafe {",
          "        chain.advance_mut(3);",
          "    }",
          "    assert_eq!(chain.a.pos, 2);",
          "    assert_eq!(chain.b.pos, 1);",
          "    assert_eq!(chain.a.remaining_mut(), 0);",
          "    assert_eq!(chain.b.remaining_mut(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]