[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1 = vec![1, 2, 3, 4, 5];",
          "    let data2 = vec![1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes1.len, bytes2.len);",
          "    assert!(bytes1.ptr == bytes2.ptr);",
          "    assert!(bytes1.eq(&bytes2) == true);",
          "    let data3 = vec![1, 2, 3, 4, 6];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert!(bytes1.eq(&bytes3) == false);",
          "    let data4 = vec![];",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert!(bytes1.eq(&bytes4) == false);",
          "    let bytes5 = Bytes {",
          "    ptr: data1.as_ptr(),",
          "    len: data1.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert!(bytes1.eq(&bytes5) == true);",
          "    assert!(bytes2.eq(&bytes5) == true);"
        ],
        "code": [
          "{",
          "    let data1 = vec![1, 2, 3, 4, 5];",
          "    let data2 = vec![1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "    assert_eq!(bytes1.len, bytes2.len);",
          "    assert!(bytes1.ptr == bytes2.ptr);",
          "    assert!(bytes1.eq(&bytes2) == true);",
          "    let data3 = vec![1, 2, 3, 4, 6];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert!(bytes1.eq(&bytes3) == false);",
          "    let data4 = vec![];",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert!(bytes1.eq(&bytes4) == false);",
          "    let bytes5 = Bytes {",
          "    ptr: data1.as_ptr(),",
          "    len: data1.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert!(bytes1.eq(&bytes5) == true);",
          "    assert!(bytes2.eq(&bytes5) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1 = vec![1, 2, 3];",
          "    let data2 = vec![1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes1.eq(&bytes1), true);",
          "    assert_eq!(bytes1.eq(&bytes2), false);",
          "    assert_eq!(bytes2.eq(&bytes2), true);",
          "    assert_eq!(bytes1.eq(&Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), false);",
          "    assert_eq!(bytes1.eq(&Bytes { ptr: data1.as_ptr(), len: 3, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), true);",
          "    assert_eq!(bytes1.eq(&Bytes { ptr: data2.as_ptr(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), false);"
        ],
        "code": [
          "{",
          "    let data1 = vec![1, 2, 3];",
          "    let data2 = vec![1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "    assert_eq!(bytes1.eq(&bytes1), true);",
          "    assert_eq!(bytes1.eq(&bytes2), false);",
          "    assert_eq!(bytes2.eq(&bytes2), true);",
          "    assert_eq!(bytes1.eq(&Bytes { ptr: ptr::null(), len: 0, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), false);",
          "    assert_eq!(bytes1.eq(&Bytes { ptr: data1.as_ptr(), len: 3, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), true);",
          "    assert_eq!(bytes1.eq(&Bytes { ptr: data2.as_ptr(), len: 5, data: AtomicPtr::new(ptr::null_mut()), vtable: &SHARED_VTABLE }), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1 = vec![1, 2, 3, 4, 5];",
          "    let data2 = vec![5, 4, 3, 2, 1];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes1.eq(&bytes2), false);",
          "    assert_eq!(bytes1.eq(&bytes1), true);",
          "    assert_eq!(bytes2.eq(&bytes2), true);",
          "    let data3 = vec![1, 2, 3, 4, 5];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes3), true);",
          "    let data4 = vec![1, 2, 3, 4];",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes4), false);"
        ],
        "code": [
          "{",
          "    let data1 = vec![1, 2, 3, 4, 5];",
          "    let data2 = vec![5, 4, 3, 2, 1];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "    assert_eq!(bytes1.eq(&bytes2), false);",
          "    assert_eq!(bytes1.eq(&bytes1), true);",
          "    assert_eq!(bytes2.eq(&bytes2), true);",
          "    let data3 = vec![1, 2, 3, 4, 5];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes3), true);",
          "    let data4 = vec![1, 2, 3, 4];",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes4), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1 = vec![];",
          "    let data2 = vec![];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes1.eq(&bytes2), true);",
          "    let data3 = vec![1, 2, 3];",
          "    let data4 = vec![1, 2, 3];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes3.eq(&bytes4), true);",
          "    let data5 = vec![5, 6, 7];",
          "    let bytes5 = Bytes {",
          "    ptr: data5.as_ptr(),",
          "    len: data5.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes3.eq(&bytes5), false);",
          "    let bytes6 = Bytes {",
          "    ptr: ptr::null(),",
          "    len: 0,",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes3.eq(&bytes6), false);"
        ],
        "code": [
          "{",
          "    let data1 = vec![];",
          "    let data2 = vec![];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "    assert_eq!(bytes1.eq(&bytes2), true);",
          "    let data3 = vec![1, 2, 3];",
          "    let data4 = vec![1, 2, 3];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes3.eq(&bytes4), true);",
          "    let data5 = vec![5, 6, 7];",
          "    let bytes5 = Bytes {",
          "    ptr: data5.as_ptr(),",
          "    len: data5.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes3.eq(&bytes5), false);",
          "    let bytes6 = Bytes {",
          "    ptr: ptr::null(),",
          "    len: 0,",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes3.eq(&bytes6), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes1 = Bytes {",
          "        ptr: ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes1.eq(&bytes2), true);"
        ],
        "code": [
          "{",
          "    let bytes1 = Bytes {",
          "        ptr: ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: ptr::null(),",
          "        len: 0,",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "    assert_eq!(bytes1.eq(&bytes2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1 = vec![255, 255, 255];",
          "    let data2 = vec![255, 255, 255];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes1.eq(&bytes2), true);",
          "    let data3 = vec![255, 255, 0];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes3), false);",
          "    let data4 = vec![0, 0, 0];",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes4), false);",
          "    let data5 = vec![];",
          "    let bytes5 = Bytes {",
          "    ptr: data5.as_ptr(),",
          "    len: data5.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes5), false);",
          "    let bytes6 = Bytes {",
          "    ptr: data1.as_ptr(),",
          "    len: 0,",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes6), false);"
        ],
        "code": [
          "{",
          "    let data1 = vec![255, 255, 255];",
          "    let data2 = vec![255, 255, 255];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    let _ = bytes1.eq(&bytes2);",
          "    assert_eq!(bytes1.eq(&bytes2), true);",
          "    let data3 = vec![255, 255, 0];",
          "    let bytes3 = Bytes {",
          "    ptr: data3.as_ptr(),",
          "    len: data3.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes3), false);",
          "    let data4 = vec![0, 0, 0];",
          "    let bytes4 = Bytes {",
          "    ptr: data4.as_ptr(),",
          "    len: data4.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes4), false);",
          "    let data5 = vec![];",
          "    let bytes5 = Bytes {",
          "    ptr: data5.as_ptr(),",
          "    len: data5.len(),",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes5), false);",
          "    let bytes6 = Bytes {",
          "    ptr: data1.as_ptr(),",
          "    len: 0,",
          "    data: AtomicPtr::new(ptr::null_mut()),",
          "    vtable: &SHARED_VTABLE,",
          "    };",
          "    assert_eq!(bytes1.eq(&bytes6), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]