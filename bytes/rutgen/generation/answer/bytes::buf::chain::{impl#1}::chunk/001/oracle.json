[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBufA {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    impl Buf for TestBufA {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "        fn has_remaining(&self) -> bool {",
          "            self.remaining() > 0",
          "        }",
          "        fn copy_to_slice(&mut self, _dst: &mut [u8]) {}",
          "        fn get_u8(&mut self) -> u8 { 0 }",
          "        fn get_i8(&mut self) -> i8 { 0 }",
          "        fn get_u16(&mut self) -> u16 { 0 }",
          "        fn get_u16_le(&mut self) -> u16 { 0 }",
          "        fn get_u16_ne(&mut self) -> u16 { 0 }",
          "        fn get_i16(&mut self) -> i16 { 0 }",
          "        fn get_i16_le(&mut self) -> i16 { 0 }",
          "        fn get_i16_ne(&mut self) -> i16 { 0 }",
          "        fn get_u32(&mut self) -> u32 { 0 }",
          "        fn get_u32_le(&mut self) -> u32 { 0 }",
          "        fn get_u32_ne(&mut self) -> u32 { 0 }",
          "        fn get_i32(&mut self) -> i32 { 0 }",
          "        fn get_i32_le(&mut self) -> i32 { 0 }",
          "        fn get_i32_ne(&mut self) -> i32 { 0 }",
          "        fn get_u64(&mut self) -> u64 { 0 }",
          "        fn get_u64_le(&mut self) -> u64 { 0 }",
          "        fn get_u64_ne(&mut self) -> u64 { 0 }",
          "        fn get_i64(&mut self) -> i64 { 0 }",
          "        fn get_i64_le(&mut self) -> i64 { 0 }",
          "        fn get_i64_ne(&mut self) -> i64 { 0 }",
          "        fn get_u128(&mut self) -> u128 { 0 }",
          "        fn get_u128_le(&mut self) -> u128 { 0 }",
          "        fn get_u128_ne(&mut self) -> u128 { 0 }",
          "        fn get_i128(&mut self) -> i128 { 0 }",
          "        fn get_i128_le(&mut self) -> i128 { 0 }",
          "        fn get_i128_ne(&mut self) -> i128 { 0 }",
          "        fn get_uint(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_le(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_ne(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_int(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_le(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_ne(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_f32(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_le(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_ne(&mut self) -> f32 { 0.0 }",
          "        fn get_f64(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_le(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_ne(&mut self) -> f64 { 0.0 }",
          "    }",
          "    ",
          "    struct TestBufB;",
          "",
          "    impl Buf for TestBufB {",
          "        fn remaining(&self) -> usize { 0 }",
          "        fn chunk(&self) -> &[u8] { &[] }",
          "        fn advance(&mut self, _cnt: usize) {}",
          "        fn has_remaining(&self) -> bool { false }",
          "        fn copy_to_slice(&mut self, _dst: &mut [u8]) {}",
          "        fn get_u8(&mut self) -> u8 { 0 }",
          "        fn get_i8(&mut self) -> i8 { 0 }",
          "        fn get_u16(&mut self) -> u16 { 0 }",
          "        fn get_u16_le(&mut self) -> u16 { 0 }",
          "        fn get_u16_ne(&mut self) -> u16 { 0 }",
          "        fn get_i16(&mut self) -> i16 { 0 }",
          "        fn get_i16_le(&mut self) -> i16 { 0 }",
          "        fn get_i16_ne(&mut self) -> i16 { 0 }",
          "        fn get_u32(&mut self) -> u32 { 0 }",
          "        fn get_u32_le(&mut self) -> u32 { 0 }",
          "        fn get_u32_ne(&mut self) -> u32 { 0 }",
          "        fn get_i32(&mut self) -> i32 { 0 }",
          "        fn get_i32_le(&mut self) -> i32 { 0 }",
          "        fn get_i32_ne(&mut self) -> i32 { 0 }",
          "        fn get_u64(&mut self) -> u64 { 0 }",
          "        fn get_u64_le(&mut self) -> u64 { 0 }",
          "        fn get_u64_ne(&mut self) -> u64 { 0 }",
          "        fn get_i64(&mut self) -> i64 { 0 }",
          "        fn get_i64_le(&mut self) -> i64 { 0 }",
          "        fn get_i64_ne(&mut self) -> i64 { 0 }",
          "        fn get_u128(&mut self) -> u128 { 0 }",
          "        fn get_u128_le(&mut self) -> u128 { 0 }",
          "        fn get_u128_ne(&mut self) -> u128 { 0 }",
          "        fn get_i128(&mut self) -> i128 { 0 }",
          "        fn get_i128_le(&mut self) -> i128 { 0 }",
          "        fn get_i128_ne(&mut self) -> i128 { 0 }",
          "        fn get_uint(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_le(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_ne(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_int(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_le(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_ne(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_f32(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_le(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_ne(&mut self) -> f32 { 0.0 }",
          "        fn get_f64(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_le(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_ne(&mut self) -> f64 { 0.0 }",
          "    }",
          "",
          "    let buf_a = TestBufA {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        position: 0,",
          "    };",
          "    let buf_b = TestBufB;",
          "",
          "    let chain = Chain { a: buf_a, b: buf_b };",
          "    let _result = chain.chunk();",
          "}"
        ],
        "oracle": [
          "    let buf_a = TestBufA { data: vec![1, 2, 3, 4, 5], position: 0 };",
          "    let buf_b = TestBufB;",
          "    let chain = Chain { a: buf_a, b: buf_b };",
          "    assert_eq!(chain.chunk(), &[1, 2, 3, 4, 5]);"
        ],
        "code": [
          "{",
          "    struct TestBufA {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    impl Buf for TestBufA {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "        fn has_remaining(&self) -> bool {",
          "            self.remaining() > 0",
          "        }",
          "        fn copy_to_slice(&mut self, _dst: &mut [u8]) {}",
          "        fn get_u8(&mut self) -> u8 { 0 }",
          "        fn get_i8(&mut self) -> i8 { 0 }",
          "        fn get_u16(&mut self) -> u16 { 0 }",
          "        fn get_u16_le(&mut self) -> u16 { 0 }",
          "        fn get_u16_ne(&mut self) -> u16 { 0 }",
          "        fn get_i16(&mut self) -> i16 { 0 }",
          "        fn get_i16_le(&mut self) -> i16 { 0 }",
          "        fn get_i16_ne(&mut self) -> i16 { 0 }",
          "        fn get_u32(&mut self) -> u32 { 0 }",
          "        fn get_u32_le(&mut self) -> u32 { 0 }",
          "        fn get_u32_ne(&mut self) -> u32 { 0 }",
          "        fn get_i32(&mut self) -> i32 { 0 }",
          "        fn get_i32_le(&mut self) -> i32 { 0 }",
          "        fn get_i32_ne(&mut self) -> i32 { 0 }",
          "        fn get_u64(&mut self) -> u64 { 0 }",
          "        fn get_u64_le(&mut self) -> u64 { 0 }",
          "        fn get_u64_ne(&mut self) -> u64 { 0 }",
          "        fn get_i64(&mut self) -> i64 { 0 }",
          "        fn get_i64_le(&mut self) -> i64 { 0 }",
          "        fn get_i64_ne(&mut self) -> i64 { 0 }",
          "        fn get_u128(&mut self) -> u128 { 0 }",
          "        fn get_u128_le(&mut self) -> u128 { 0 }",
          "        fn get_u128_ne(&mut self) -> u128 { 0 }",
          "        fn get_i128(&mut self) -> i128 { 0 }",
          "        fn get_i128_le(&mut self) -> i128 { 0 }",
          "        fn get_i128_ne(&mut self) -> i128 { 0 }",
          "        fn get_uint(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_le(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_ne(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_int(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_le(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_ne(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_f32(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_le(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_ne(&mut self) -> f32 { 0.0 }",
          "        fn get_f64(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_le(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_ne(&mut self) -> f64 { 0.0 }",
          "    }",
          "    ",
          "    struct TestBufB;",
          "",
          "    impl Buf for TestBufB {",
          "        fn remaining(&self) -> usize { 0 }",
          "        fn chunk(&self) -> &[u8] { &[] }",
          "        fn advance(&mut self, _cnt: usize) {}",
          "        fn has_remaining(&self) -> bool { false }",
          "        fn copy_to_slice(&mut self, _dst: &mut [u8]) {}",
          "        fn get_u8(&mut self) -> u8 { 0 }",
          "        fn get_i8(&mut self) -> i8 { 0 }",
          "        fn get_u16(&mut self) -> u16 { 0 }",
          "        fn get_u16_le(&mut self) -> u16 { 0 }",
          "        fn get_u16_ne(&mut self) -> u16 { 0 }",
          "        fn get_i16(&mut self) -> i16 { 0 }",
          "        fn get_i16_le(&mut self) -> i16 { 0 }",
          "        fn get_i16_ne(&mut self) -> i16 { 0 }",
          "        fn get_u32(&mut self) -> u32 { 0 }",
          "        fn get_u32_le(&mut self) -> u32 { 0 }",
          "        fn get_u32_ne(&mut self) -> u32 { 0 }",
          "        fn get_i32(&mut self) -> i32 { 0 }",
          "        fn get_i32_le(&mut self) -> i32 { 0 }",
          "        fn get_i32_ne(&mut self) -> i32 { 0 }",
          "        fn get_u64(&mut self) -> u64 { 0 }",
          "        fn get_u64_le(&mut self) -> u64 { 0 }",
          "        fn get_u64_ne(&mut self) -> u64 { 0 }",
          "        fn get_i64(&mut self) -> i64 { 0 }",
          "        fn get_i64_le(&mut self) -> i64 { 0 }",
          "        fn get_i64_ne(&mut self) -> i64 { 0 }",
          "        fn get_u128(&mut self) -> u128 { 0 }",
          "        fn get_u128_le(&mut self) -> u128 { 0 }",
          "        fn get_u128_ne(&mut self) -> u128 { 0 }",
          "        fn get_i128(&mut self) -> i128 { 0 }",
          "        fn get_i128_le(&mut self) -> i128 { 0 }",
          "        fn get_i128_ne(&mut self) -> i128 { 0 }",
          "        fn get_uint(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_le(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_uint_ne(&mut self, _nbytes: usize) -> u64 { 0 }",
          "        fn get_int(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_le(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_int_ne(&mut self, _nbytes: usize) -> i64 { 0 }",
          "        fn get_f32(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_le(&mut self) -> f32 { 0.0 }",
          "        fn get_f32_ne(&mut self) -> f32 { 0.0 }",
          "        fn get_f64(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_le(&mut self) -> f64 { 0.0 }",
          "        fn get_f64_ne(&mut self) -> f64 { 0.0 }",
          "    }",
          "",
          "    let buf_a = TestBufA {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        position: 0,",
          "    };",
          "    let buf_b = TestBufB;",
          "",
          "    let chain = Chain { a: buf_a, b: buf_b };",
          "    let _result = chain.chunk();",
          "    let buf_a = TestBufA { data: vec![1, 2, 3, 4, 5], position: 0 };",
          "    let buf_b = TestBufB;",
          "    let chain = Chain { a: buf_a, b: buf_b };",
          "    assert_eq!(chain.chunk(), &[1, 2, 3, 4, 5]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]