[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyBuf;",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    struct NonEmptyBuf {",
          "        data: &'static [u8],",
          "    }",
          "    impl Buf for NonEmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    let a = EmptyBuf;",
          "    let b = NonEmptyBuf { data: &[1, 2, 3] };",
          "    let chain = Chain { a, b };",
          "",
          "    let result = chain.chunk();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &[1, 2, 3]);"
        ],
        "code": [
          "{",
          "    struct EmptyBuf;",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    struct NonEmptyBuf {",
          "        data: &'static [u8],",
          "    }",
          "    impl Buf for NonEmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    let a = EmptyBuf;",
          "    let b = NonEmptyBuf { data: &[1, 2, 3] };",
          "    let chain = Chain { a, b };",
          "",
          "    let result = chain.chunk();",
          "    assert_eq!(result, &[1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyBuf;",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    struct SingleByteBuf {",
          "        data: &'static [u8],",
          "    }",
          "    impl Buf for SingleByteBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    let a = EmptyBuf;",
          "    let b = SingleByteBuf { data: &[42] };",
          "    let chain = Chain { a, b };",
          "",
          "    let result = chain.chunk();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &[42]);"
        ],
        "code": [
          "{",
          "    struct EmptyBuf;",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    struct SingleByteBuf {",
          "        data: &'static [u8],",
          "    }",
          "    impl Buf for SingleByteBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    let a = EmptyBuf;",
          "    let b = SingleByteBuf { data: &[42] };",
          "    let chain = Chain { a, b };",
          "",
          "    let result = chain.chunk();",
          "    assert_eq!(result, &[42]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyBuf;",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    struct MultipleBytesBuf {",
          "        data: &'static [u8],",
          "    }",
          "    impl Buf for MultipleBytesBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    let a = EmptyBuf;",
          "    let b = MultipleBytesBuf { data: &[10, 20, 30, 40] };",
          "    let chain = Chain { a, b };",
          "",
          "    let result = chain.chunk();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &[10, 20, 30, 40]);"
        ],
        "code": [
          "{",
          "    struct EmptyBuf;",
          "    impl Buf for EmptyBuf {",
          "        fn remaining(&self) -> usize {",
          "            0",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            &[]",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    struct MultipleBytesBuf {",
          "        data: &'static [u8],",
          "    }",
          "    impl Buf for MultipleBytesBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "        fn chunk(&self) -> &[u8] {",
          "            self.data",
          "        }",
          "        fn advance(&mut self, _: usize) {}",
          "    }",
          "",
          "    let a = EmptyBuf;",
          "    let b = MultipleBytesBuf { data: &[10, 20, 30, 40] };",
          "    let chain = Chain { a, b };",
          "",
          "    let result = chain.chunk();",
          "    assert_eq!(result, &[10, 20, 30, 40]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]