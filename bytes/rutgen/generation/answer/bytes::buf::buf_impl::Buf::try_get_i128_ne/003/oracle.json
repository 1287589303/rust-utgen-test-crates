[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = match cfg!(target_endian = \"big\") {",
          "        true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\",",
          "        false => b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\",",
          "    };",
          "    let _ = buf.try_get_i128_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128_ne());",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = match cfg!(target_endian = \"big\") {",
          "        true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\",",
          "        false => b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\",",
          "    };",
          "    let _ = buf.try_get_i128_ne();",
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128_ne());",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    let _ = buf.try_get_i128_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128_ne());",
          "    assert_eq!(15, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 15}), buf.try_get_i128_ne());",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    let _ = buf.try_get_i128_ne();",
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128_ne());",
          "    assert_eq!(15, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 15}), buf.try_get_i128_ne());",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = match cfg!(target_endian = \"big\") {",
          "        true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\",",
          "        false => b\"\\x17\\x18\\x19\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\",",
          "    };",
          "    let _ = buf.try_get_i128_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128_ne());",
          "    assert_eq!(16, buf.remaining());",
          "    let mut buf = &b\"\\x17\\x18\\x19\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    assert_eq!(Ok(0x17181916151413121110090706050403_i128), buf.try_get_i128_ne());",
          "    assert_eq!(16, buf.remaining());",
          "    let mut buf_short = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 15}), buf_short.try_get_i128_ne());",
          "    assert_eq!(15, buf_short.remaining());",
          "    let mut buf_empty = &b\"\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 0}), buf_empty.try_get_i128_ne());",
          "    assert_eq!(0, buf_empty.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = match cfg!(target_endian = \"big\") {",
          "        true => b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\",",
          "        false => b\"\\x17\\x18\\x19\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\",",
          "    };",
          "    let _ = buf.try_get_i128_ne();",
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128_ne());",
          "    assert_eq!(16, buf.remaining());",
          "    let mut buf = &b\"\\x17\\x18\\x19\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    assert_eq!(Ok(0x17181916151413121110090706050403_i128), buf.try_get_i128_ne());",
          "    assert_eq!(16, buf.remaining());",
          "    let mut buf_short = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 15}), buf_short.try_get_i128_ne());",
          "    assert_eq!(15, buf_short.remaining());",
          "    let mut buf_empty = &b\"\"[..];",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 0}), buf_empty.try_get_i128_ne());",
          "    assert_eq!(0, buf_empty.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]