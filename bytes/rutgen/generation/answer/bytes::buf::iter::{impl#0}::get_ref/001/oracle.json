[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    let data = vec![b'a', b'b', b'c'];",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ref.data, vec![b'a', b'b', b'c']);",
          "    assert!(_ref as *const _ == &iter.inner as *const _);",
          "    assert!(_ref as *const _ != std::ptr::null());",
          "    assert_eq!(_ref, &TestBuf { data: vec![b'a', b'b', b'c'] });"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    let data = vec![b'a', b'b', b'c'];",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "    assert_eq!(_ref.data, vec![b'a', b'b', b'c']);",
          "    assert!(_ref as *const _ == &iter.inner as *const _);",
          "    assert!(_ref as *const _ != std::ptr::null());",
          "    assert_eq!(_ref, &TestBuf { data: vec![b'a', b'b', b'c'] });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: String,",
          "    }",
          "",
          "    let data = String::from(\"abc\");",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ref.data, \"abc\");",
          "    assert!(_ref.is::<TestBuf>());",
          "    assert_eq!(std::mem::size_of_val(_ref), std::mem::size_of::<TestBuf>());",
          "    assert!(_ref as *const _ as usize != 0);",
          "    assert!(_ref != std::ptr::null());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: String,",
          "    }",
          "",
          "    let data = String::from(\"abc\");",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "    assert_eq!(_ref.data, \"abc\");",
          "    assert!(_ref.is::<TestBuf>());",
          "    assert_eq!(std::mem::size_of_val(_ref), std::mem::size_of::<TestBuf>());",
          "    assert!(_ref as *const _ as usize != 0);",
          "    assert!(_ref != std::ptr::null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    let data = vec![1, 2, 3];",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ref.data, vec![1, 2, 3]);",
          "    assert!(std::ptr::eq(&_ref.data as *const _, &iter.inner.data as *const _));",
          "    assert!(std::mem::size_of_val(&_ref) == std::mem::size_of_val(&iter.inner));",
          "    assert!(iter.get_ref() as *const _ == &_ref as *const _);",
          "    assert!(std::ptr::eq(iter.get_ref(), &_ref));"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    let data = vec![1, 2, 3];",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "    assert_eq!(_ref.data, vec![1, 2, 3]);",
          "    assert!(std::ptr::eq(&_ref.data as *const _, &iter.inner.data as *const _));",
          "    assert!(std::mem::size_of_val(&_ref) == std::mem::size_of_val(&iter.inner));",
          "    assert!(iter.get_ref() as *const _ == &_ref as *const _);",
          "    assert!(std::ptr::eq(iter.get_ref(), &_ref));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    let data = vec![];",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ref, &TestBuf { data: vec![] });"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    let data = vec![];",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "    assert_eq!(_ref, &TestBuf { data: vec![] });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: bytes::Bytes,",
          "    }",
          "",
          "    let data = bytes::Bytes::from(&b\"abc\"[..]);",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*_ref, TestBuf { data: bytes::Bytes::from(&b\"abc\"[..]) });",
          "    assert_eq!(&_ref.data, &bytes::Bytes::from(&b\"abc\"[..]));",
          "    assert!(std::mem::size_of_val(_ref) == std::mem::size_of::<TestBuf>());",
          "    assert!(_ref.data.remaining() == 3);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: bytes::Bytes,",
          "    }",
          "",
          "    let data = bytes::Bytes::from(&b\"abc\"[..]);",
          "    let iter = IntoIter::new(TestBuf { data });",
          "    let _ref = iter.get_ref();",
          "    assert_eq!(*_ref, TestBuf { data: bytes::Bytes::from(&b\"abc\"[..]) });",
          "    assert_eq!(&_ref.data, &bytes::Bytes::from(&b\"abc\"[..]));",
          "    assert!(std::mem::size_of_val(_ref) == std::mem::size_of::<TestBuf>());",
          "    assert!(_ref.data.remaining() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]