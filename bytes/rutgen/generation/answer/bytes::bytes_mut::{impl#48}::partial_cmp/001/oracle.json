[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 0,",
          "        cap: 0,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert!(bytes_mut.ptr == NonNull::dangling());",
          "    assert!(bytes_mut.data.is_null());",
          "    let result = bytes_mut.partial_cmp(&other);",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 0,",
          "        cap: 0,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "    assert_eq!(bytes_mut.len, 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert!(bytes_mut.ptr == NonNull::dangling());",
          "    assert!(bytes_mut.data.is_null());",
          "    let result = bytes_mut.partial_cmp(&other);",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 5,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.partial_cmp(&other), None);",
          "    bytes_mut.len = 0;",
          "    let other_non_empty: &Vec<u8> = &vec![1, 2, 3];",
          "    assert_eq!(bytes_mut.partial_cmp(&other_non_empty), Some(cmp::Ordering::Less));",
          "    bytes_mut.len = 3;",
          "    let other_equal: &Vec<u8> = &vec![1, 2, 3];",
          "    assert_eq!(bytes_mut.partial_cmp(&other_equal), Some(cmp::Ordering::Equal));",
          "    bytes_mut.len = 6;",
          "    let other_greater: &Vec<u8> = &vec![1, 2, 3, 4, 5, 6];",
          "    assert_eq!(bytes_mut.partial_cmp(&other_greater), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 5,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "    assert_eq!(bytes_mut.partial_cmp(&other), None);",
          "    bytes_mut.len = 0;",
          "    let other_non_empty: &Vec<u8> = &vec![1, 2, 3];",
          "    assert_eq!(bytes_mut.partial_cmp(&other_non_empty), Some(cmp::Ordering::Less));",
          "    bytes_mut.len = 3;",
          "    let other_equal: &Vec<u8> = &vec![1, 2, 3];",
          "    assert_eq!(bytes_mut.partial_cmp(&other_equal), Some(cmp::Ordering::Equal));",
          "    bytes_mut.len = 6;",
          "    let other_greater: &Vec<u8> = &vec![1, 2, 3, 4, 5, 6];",
          "    assert_eq!(bytes_mut.partial_cmp(&other_greater), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![1, 2, 3];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len, 3);",
          "    assert_eq!(bytes_mut.cap, 10);",
          "    assert!(bytes_mut.ptr.as_ptr().is_null());",
          "    assert!(_is_null(bytes_mut.data));",
          "    let result = bytes_mut.partial_cmp(&other);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), cmp::Ordering::Equal);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![1, 2, 3];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "    assert_eq!(bytes_mut.len, 3);",
          "    assert_eq!(bytes_mut.cap, 10);",
          "    assert!(bytes_mut.ptr.as_ptr().is_null());",
          "    assert!(_is_null(bytes_mut.data));",
          "    let result = bytes_mut.partial_cmp(&other);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), cmp::Ordering::Equal);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 4,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![1, 2];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "}"
        ],
        "oracle": [
          "    let bytes_mut = BytesMut { ptr: NonNull::dangling(), len: 4, cap: 10, data: std::ptr::null_mut() };",
          "    let other: &Vec<u8> = &vec![1, 2];",
          "    assert_eq!(bytes_mut.partial_cmp(&other), None);",
          "    let other: &Vec<u8> = &vec![1, 2, 3, 4];",
          "    assert!(bytes_mut.partial_cmp(&other).is_some());",
          "    let other: &Vec<u8> = &vec![];",
          "    assert_eq!(bytes_mut.partial_cmp(&other), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 4,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![1, 2];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "    let bytes_mut = BytesMut { ptr: NonNull::dangling(), len: 4, cap: 10, data: std::ptr::null_mut() };",
          "    let other: &Vec<u8> = &vec![1, 2];",
          "    assert_eq!(bytes_mut.partial_cmp(&other), None);",
          "    let other: &Vec<u8> = &vec![1, 2, 3, 4];",
          "    assert!(bytes_mut.partial_cmp(&other).is_some());",
          "    let other: &Vec<u8> = &vec![];",
          "    assert_eq!(bytes_mut.partial_cmp(&other), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut1 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let bytes_mut2 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let _ = bytes_mut1.partial_cmp(&bytes_mut2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut1.partial_cmp(&bytes_mut2), Some(cmp::Ordering::Equal));"
        ],
        "code": [
          "{",
          "    let bytes_mut1 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let bytes_mut2 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let _ = bytes_mut1.partial_cmp(&bytes_mut2);",
          "    assert_eq!(bytes_mut1.partial_cmp(&bytes_mut2), Some(cmp::Ordering::Equal));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut1 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let bytes_mut2 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 5,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let _ = bytes_mut1.partial_cmp(&bytes_mut2);",
          "}"
        ],
        "oracle": [
          "    let bytes_mut1 = BytesMut { ptr: NonNull::dangling(), len: 3, cap: 10, data: std::ptr::null_mut() };",
          "    let bytes_mut2 = BytesMut { ptr: NonNull::dangling(), len: 5, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut2);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let bytes_mut3 = BytesMut { ptr: NonNull::dangling(), len: 5, cap: 10, data: std::ptr::null_mut() };",
          "    let bytes_mut4 = BytesMut { ptr: NonNull::dangling(), len: 5, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut3.partial_cmp(&bytes_mut4);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "    ",
          "    let bytes_mut5 = BytesMut { ptr: NonNull::dangling(), len: 7, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut5);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let bytes_mut6 = BytesMut { ptr: NonNull::dangling(), len: 2, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut6);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let bytes_mut7 = BytesMut { ptr: NonNull::dangling(), len: 0, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut7);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let bytes_mut1 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 3,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let bytes_mut2 = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 5,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let _ = bytes_mut1.partial_cmp(&bytes_mut2);",
          "    let bytes_mut1 = BytesMut { ptr: NonNull::dangling(), len: 3, cap: 10, data: std::ptr::null_mut() };",
          "    let bytes_mut2 = BytesMut { ptr: NonNull::dangling(), len: 5, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut2);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let bytes_mut3 = BytesMut { ptr: NonNull::dangling(), len: 5, cap: 10, data: std::ptr::null_mut() };",
          "    let bytes_mut4 = BytesMut { ptr: NonNull::dangling(), len: 5, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut3.partial_cmp(&bytes_mut4);",
          "    assert_eq!(result, Some(cmp::Ordering::Equal));",
          "    ",
          "    let bytes_mut5 = BytesMut { ptr: NonNull::dangling(), len: 7, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut5);",
          "    assert_eq!(result, Some(cmp::Ordering::Less));",
          "    ",
          "    let bytes_mut6 = BytesMut { ptr: NonNull::dangling(), len: 2, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut6);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "    ",
          "    let bytes_mut7 = BytesMut { ptr: NonNull::dangling(), len: 0, cap: 10, data: std::ptr::null_mut() };",
          "    let result = bytes_mut1.partial_cmp(&bytes_mut7);",
          "    assert_eq!(result, Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 4,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &String = &String::from(\"test\");",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "}"
        ],
        "oracle": [
          "    assert!(bytes_mut.partial_cmp(&other).is_none());",
          "    assert_eq!(bytes_mut.len, 4);",
          "    assert!(bytes_mut.cap > bytes_mut.len);",
          "    assert!(bytes_mut.ptr.as_ptr().is_null() == false);",
          "    assert!(bytes_mut.data.is_null());",
          "    assert_eq!(bytes_mut.partial_cmp(&&\"test\").is_some(), true);",
          "    assert_eq!(bytes_mut.partial_cmp(&&String::from(\"example\")).is_none(), true);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: 4,",
          "        cap: 10,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &String = &String::from(\"test\");",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "    assert!(bytes_mut.partial_cmp(&other).is_none());",
          "    assert_eq!(bytes_mut.len, 4);",
          "    assert!(bytes_mut.cap > bytes_mut.len);",
          "    assert!(bytes_mut.ptr.as_ptr().is_null() == false);",
          "    assert!(bytes_mut.data.is_null());",
          "    assert_eq!(bytes_mut.partial_cmp(&&\"test\").is_some(), true);",
          "    assert_eq!(bytes_mut.partial_cmp(&&String::from(\"example\")).is_none(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: usize::MAX,",
          "        cap: usize::MAX,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![0; usize::MAX];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "}"
        ],
        "oracle": [
          "    let bytes_mut = BytesMut { ptr: NonNull::dangling(), len: usize::MAX, cap: usize::MAX, data: std::ptr::null_mut() };",
          "    let other: &Vec<u8> = &vec![0; usize::MAX];",
          "    let result = bytes_mut.partial_cmp(&other);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::dangling(),",
          "        len: usize::MAX,",
          "        cap: usize::MAX,",
          "        data: std::ptr::null_mut(),",
          "    };",
          "    let other: &Vec<u8> = &vec![0; usize::MAX];",
          "    let _ = bytes_mut.partial_cmp(&other);",
          "    let bytes_mut = BytesMut { ptr: NonNull::dangling(), len: usize::MAX, cap: usize::MAX, data: std::ptr::null_mut() };",
          "    let other: &Vec<u8> = &vec![0; usize::MAX];",
          "    let result = bytes_mut.partial_cmp(&other);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]