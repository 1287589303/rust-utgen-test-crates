[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\"[..];",
          "    let _ = buf.try_get_int_le(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(1_i64), buf.try_get_int_le(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_int_le(2));",
          "    assert_eq!(0, buf.remaining());",
          "    panic_does_not_fit(8, 9);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\"[..];",
          "    let _ = buf.try_get_int_le(1);",
          "    assert_eq!(Ok(1_i64), buf.try_get_int_le(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_int_le(2));",
          "    assert_eq!(0, buf.remaining());",
          "    panic_does_not_fit(8, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\"[..];",
          "    let _ = buf.try_get_int_le(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_int_le(2), Ok(0x0201_i64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_int_le(3), Err(TryGetError { requested: 3, available: 0 }));",
          "    panic_does_not_fit(8, 9);",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_int_le(9)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\"[..];",
          "    let _ = buf.try_get_int_le(2);",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_int_le(2), Ok(0x0201_i64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_int_le(3), Err(TryGetError { requested: 3, available: 0 }));",
          "    panic_does_not_fit(8, 9);",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_int_le(9)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_int_le(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int_le(4));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int_le(3));",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_int_le(9)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_int_le(3);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int_le(4));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int_le(3));",
          "    assert!(std::panic::catch_unwind(|| buf.try_get_int_le(9)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _ = buf.try_get_int_le(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x04030201_i64), buf.try_get_int_le(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_int_le(8));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_panics!(panic_does_not_fit(8, 9), { buf.try_get_int_le(9); });"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _ = buf.try_get_int_le(4);",
          "    assert_eq!(Ok(0x04030201_i64), buf.try_get_int_le(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_int_le(8));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_panics!(panic_does_not_fit(8, 9), { buf.try_get_int_le(9); });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _ = buf.try_get_int_le(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 6, available: 5 }), buf.try_get_int_le(6));",
          "    assert_eq!(Ok(0x04030201_i64), buf.try_get_int_le(4));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x05_i64), buf.try_get_int_le(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_panics!(|| buf.try_get_int_le(9));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _ = buf.try_get_int_le(5);",
          "    assert_eq!(Err(TryGetError { requested: 6, available: 5 }), buf.try_get_int_le(6));",
          "    assert_eq!(Ok(0x04030201_i64), buf.try_get_int_le(4));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x05_i64), buf.try_get_int_le(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_panics!(|| buf.try_get_int_le(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _ = buf.try_get_int_le(6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x060504030201_i64), buf.try_get_int_le(6));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 0}), buf.try_get_int_le(4));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_int_le(9));",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 0}), buf.try_get_int_le(8));",
          "    panic_does_not_fit(8, 9);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _ = buf.try_get_int_le(6);",
          "    assert_eq!(Ok(0x060504030201_i64), buf.try_get_int_le(6));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 0}), buf.try_get_int_le(4));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_int_le(9));",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 0}), buf.try_get_int_le(8));",
          "    panic_does_not_fit(8, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _ = buf.try_get_int_le(7);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_int_le(8));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 7 }), buf.try_get_int_le(9));",
          "    assert_eq!(Ok(0x060504030201_i64), buf.try_get_int_le(6));",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 1 }), buf.try_get_int_le(4));",
          "    assert_eq!(Ok(0x060504_i64), buf.try_get_int_le(6));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x030201_i64), buf.try_get_int_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x0201_i64), buf.try_get_int_le(2));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_int_le(2));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _ = buf.try_get_int_le(7);",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_int_le(8));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 7 }), buf.try_get_int_le(9));",
          "    assert_eq!(Ok(0x060504030201_i64), buf.try_get_int_le(6));",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 1 }), buf.try_get_int_le(4));",
          "    assert_eq!(Ok(0x060504_i64), buf.try_get_int_le(6));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x030201_i64), buf.try_get_int_le(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x0201_i64), buf.try_get_int_le(2));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_int_le(2));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_int_le(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0807060504030201_i64), buf.try_get_int_le(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 0 }), buf.try_get_int_le(9));",
          "    assert_eq!(8, buf.remaining());",
          "    panic_does_not_fit(8, 9);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_int_le(8);",
          "    assert_eq!(Ok(0x0807060504030201_i64), buf.try_get_int_le(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 0 }), buf.try_get_int_le(9));",
          "    assert_eq!(8, buf.remaining());",
          "    panic_does_not_fit(8, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\"[..];",
          "    let _ = buf.try_get_int_le(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_int_le(2));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_panics!(|| { buf.try_get_int_le(9); });",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 1}), buf.try_get_int_le(4));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\"[..];",
          "    let _ = buf.try_get_int_le(2);",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_int_le(2));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_panics!(|| { buf.try_get_int_le(9); });",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 1}), buf.try_get_int_le(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\"[..];",
          "    let _ = buf.try_get_int_le(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_int_le(4));",
          "    assert_eq!(Err(TryGetError{requested: 3, available: 2}), buf.try_get_int_le(3));",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 2}), buf.try_get_int_le(2));",
          "    assert_eq!(Ok(0x0201_i64), buf.try_get_int_le(2));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int_le(3));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\"[..];",
          "    let _ = buf.try_get_int_le(3);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_int_le(4));",
          "    assert_eq!(Err(TryGetError{requested: 3, available: 2}), buf.try_get_int_le(3));",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 2}), buf.try_get_int_le(2));",
          "    assert_eq!(Ok(0x0201_i64), buf.try_get_int_le(2));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int_le(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_int_le(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int_le(4));",
          "    assert_eq!(3, buf.remaining());",
          "    panic_does_not_fit(8, 9);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_int_le(4);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int_le(4));",
          "    assert_eq!(3, buf.remaining());",
          "    panic_does_not_fit(8, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _ = buf.try_get_int_le(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_int_le(5));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _ = buf.try_get_int_le(5);",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_int_le(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _ = buf.try_get_int_le(6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 5);",
          "    assert_eq!(buf.try_get_int_le(6), Err(TryGetError{requested: 6, available: 5}));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());",
          "    assert_eq!(buf.remaining(), 5);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _ = buf.try_get_int_le(6);",
          "    assert_eq!(buf.remaining(), 5);",
          "    assert_eq!(buf.try_get_int_le(6), Err(TryGetError{requested: 6, available: 5}));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());",
          "    assert_eq!(buf.remaining(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _ = buf.try_get_int_le(7);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_int_le(8));",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 6 }), buf.try_get_int_le(5));",
          "    assert_eq!(Err(TryGetError { requested: 7, available: 6 }), buf.try_get_int_le(7));",
          "    assert_eq!(Ok(0x04030201_i64), buf.try_get_int_le(4));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x0201_i64), buf.try_get_int_le(2));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_eq!(Ok(0x01_i64), buf.try_get_int_le(1));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 2 }), buf.try_get_int_le(2));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _ = buf.try_get_int_le(7);",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_int_le(8));",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 6 }), buf.try_get_int_le(5));",
          "    assert_eq!(Err(TryGetError { requested: 7, available: 6 }), buf.try_get_int_le(7));",
          "    assert_eq!(Ok(0x04030201_i64), buf.try_get_int_le(4));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Ok(0x0201_i64), buf.try_get_int_le(2));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_eq!(Ok(0x01_i64), buf.try_get_int_le(1));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 2 }), buf.try_get_int_le(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _ = buf.try_get_int_le(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_int_le(8));",
          "    assert_eq!(7, buf.remaining());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _ = buf.try_get_int_le(8);",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_int_le(8));",
          "    assert_eq!(7, buf.remaining());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_int_le(9);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(buf.try_get_int_le(9), Err(TryGetError { requested: 9, available: 8 })));",
          "    assert_eq!(buf.remaining(), 8);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_int_le(9);",
          "    assert!(matches!(buf.try_get_int_le(9), Err(TryGetError { requested: 9, available: 8 })));",
          "    assert_eq!(buf.remaining(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]