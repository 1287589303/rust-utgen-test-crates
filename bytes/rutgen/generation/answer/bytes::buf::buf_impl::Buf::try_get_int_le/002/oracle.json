[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01][..];",
          "    let result = buf.try_get_int_le(1);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01_i64), buf.try_get_int_le(1));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_int_le(2));",
          "    assert_eq!(1, remaining);",
          "    let mut buf_large = &mut [0x01, 0x02, 0x03][..];",
          "    let err_result = buf_large.try_get_int_le(4);",
          "    assert!(err_result.is_err());",
          "    assert_eq!(3, buf_large.remaining());",
          "    let mut buf_overflow = &mut [0x01, 0x02][..];",
          "    let panic = std::panic::catch_unwind(|| { buf_overflow.try_get_int_le(9); });",
          "    assert!(panic.is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01][..];",
          "    let result = buf.try_get_int_le(1);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x01_i64), buf.try_get_int_le(1));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError { requested: 2, available: 1 }), buf.try_get_int_le(2));",
          "    assert_eq!(1, remaining);",
          "    let mut buf_large = &mut [0x01, 0x02, 0x03][..];",
          "    let err_result = buf_large.try_get_int_le(4);",
          "    assert!(err_result.is_err());",
          "    assert_eq!(3, buf_large.remaining());",
          "    let mut buf_overflow = &mut [0x01, 0x02][..];",
          "    let panic = std::panic::catch_unwind(|| { buf_overflow.try_get_int_le(9); });",
          "    assert!(panic.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(2);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102_i64), buf.try_get_int_le(2));",
          "    assert_eq!(0, remaining);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(2);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x0102_i64), buf.try_get_int_le(2));",
          "    assert_eq!(0, remaining);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(3);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_i64), result);",
          "    assert_eq!(remaining, 0);",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int_le(4));",
          "    assert_eq!(buf.remaining(), 3);",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(3);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x010203_i64), result);",
          "    assert_eq!(remaining, 0);",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int_le(4));",
          "    assert_eq!(buf.remaining(), 3);",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(4);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304_i64), buf.try_get_int_le(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_int_le(5));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_panics!(|| buf.try_get_int_le(9));",
          "    assert_eq!(Ok(0x0000000000000004_i64), buf.try_get_int_le(8));",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(4);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x01020304_i64), buf.try_get_int_le(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_int_le(5));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_panics!(|| buf.try_get_int_le(9));",
          "    assert_eq!(Ok(0x0000000000000004_i64), buf.try_get_int_le(8));",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(5);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102030405_i64), buf.try_get_int_le(5));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError { requested: 6, available: 5 }), buf.try_get_int_le(6));",
          "    assert_eq!(5, buf.remaining());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(5);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x0102030405_i64), buf.try_get_int_le(5));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError { requested: 6, available: 5 }), buf.try_get_int_le(6));",
          "    assert_eq!(5, buf.remaining());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x06, 0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(6);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203040506_i64), buf.try_get_int_le(6));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 6}), buf.try_get_int_le(8));",
          "    assert_eq!(6, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 6, available: 5}), buf.try_get_int_le(6));",
          "    assert_eq!(5, remaining);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x06, 0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(6);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x010203040506_i64), buf.try_get_int_le(6));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 6}), buf.try_get_int_le(8));",
          "    assert_eq!(6, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 6, available: 5}), buf.try_get_int_le(6));",
          "    assert_eq!(5, remaining);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(7);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607_i64), buf.try_get_int_le(7));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_int_le(8));",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 7}), buf.try_get_int_le(9));",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 0, available: 7}), buf.try_get_int_le(0));",
          "    assert_eq!(7, buf.remaining());",
          "    panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err();"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(7);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x01020304050607_i64), buf.try_get_int_le(7));",
          "    assert_eq!(0, remaining);",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), buf.try_get_int_le(8));",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 7}), buf.try_get_int_le(9));",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 0, available: 7}), buf.try_get_int_le(0));",
          "    assert_eq!(7, buf.remaining());",
          "    panic::catch_unwind(|| { buf.try_get_int_le(9); }).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(8);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_int_le(8));",
          "    assert_eq!(0, remaining);"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01][..];",
          "    let result = buf.try_get_int_le(8);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_int_le(8));",
          "    assert_eq!(0, remaining);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05][..];",
          "    let _result = buf.try_get_int_le(9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 9, available: 5 }), buf.try_get_int_le(9));",
          "    assert_eq!(5, buf.remaining());",
          "    assert!(!buf.has_remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05][..];",
          "    let _result = buf.try_get_int_le(9);",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 5 }), buf.try_get_int_le(9));",
          "    assert_eq!(5, buf.remaining());",
          "    assert!(!buf.has_remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]