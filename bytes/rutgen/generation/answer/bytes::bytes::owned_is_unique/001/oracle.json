[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let null_ptr: AtomicPtr<()> = AtomicPtr::new(std::ptr::null_mut());",
          "    unsafe {",
          "        owned_is_unique(&null_ptr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsafe { owned_is_unique(&null_ptr) }, false);"
        ],
        "code": [
          "{",
          "    let null_ptr: AtomicPtr<()> = AtomicPtr::new(std::ptr::null_mut());",
          "    unsafe {",
          "        owned_is_unique(&null_ptr);",
          "    }",
          "    assert_eq!(unsafe { owned_is_unique(&null_ptr) }, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Box::new(42);",
          "    let non_null_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
          "    unsafe {",
          "        owned_is_unique(&non_null_ptr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsafe { owned_is_unique(&non_null_ptr) }, false);"
        ],
        "code": [
          "{",
          "    let value = Box::new(42);",
          "    let non_null_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
          "    unsafe {",
          "        owned_is_unique(&non_null_ptr);",
          "    }",
          "    assert_eq!(unsafe { owned_is_unique(&non_null_ptr) }, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Box::new(100);",
          "    let ownership_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
          "    unsafe {",
          "        owned_is_unique(&ownership_ptr);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(unsafe { owned_is_unique(&ownership_ptr) }, false);"
        ],
        "code": [
          "{",
          "    let value = Box::new(100);",
          "    let ownership_ptr: AtomicPtr<()> = AtomicPtr::new(Box::into_raw(value) as *mut ());",
          "    unsafe {",
          "        owned_is_unique(&ownership_ptr);",
          "    }",
          "    assert_eq!(unsafe { owned_is_unique(&ownership_ptr) }, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]