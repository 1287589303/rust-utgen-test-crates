[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = vec![1, 2, 3, 4, 5];",
          "    let mut cursor = std::io::Cursor::new(data);",
          "    let initial_pos = cursor.position();",
          "    cursor.advance(0);",
          "    assert_eq!(initial_pos, cursor.position());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cursor.remaining(), 5);",
          "    assert_eq!(cursor.chunk(), &[1, 2, 3, 4, 5]);",
          "    cursor.advance(5);",
          "    assert_eq!(cursor.position(), initial_pos + 5);",
          "    assert!(cursor.remaining() == 0);",
          "    cursor.advance(0);",
          "    assert_eq!(cursor.position(), initial_pos + 5);"
        ],
        "code": [
          "{",
          "    let data = vec![1, 2, 3, 4, 5];",
          "    let mut cursor = std::io::Cursor::new(data);",
          "    let initial_pos = cursor.position();",
          "    cursor.advance(0);",
          "    assert_eq!(initial_pos, cursor.position());",
          "    assert_eq!(cursor.remaining(), 5);",
          "    assert_eq!(cursor.chunk(), &[1, 2, 3, 4, 5]);",
          "    cursor.advance(5);",
          "    assert_eq!(cursor.position(), initial_pos + 5);",
          "    assert!(cursor.remaining() == 0);",
          "    cursor.advance(0);",
          "    assert_eq!(cursor.position(), initial_pos + 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = vec![1, 2, 3, 4, 5];",
          "    let mut cursor = std::io::Cursor::new(data);",
          "    let length = cursor.get_ref().as_ref().len() as u64;",
          "    cursor.advance(length - cursor.position());",
          "    assert_eq!(cursor.position(), length);",
          "}"
        ],
        "oracle": [
          "    assert!(cursor.remaining() == 0);",
          "    assert!(cursor.position() == length);",
          "    cursor.advance(0);",
          "    assert!(cursor.position() == length);",
          "    cursor.advance(length as usize);",
          "    assert!(cursor.position() == length);"
        ],
        "code": [
          "{",
          "    let data = vec![1, 2, 3, 4, 5];",
          "    let mut cursor = std::io::Cursor::new(data);",
          "    let length = cursor.get_ref().as_ref().len() as u64;",
          "    cursor.advance(length - cursor.position());",
          "    assert_eq!(cursor.position(), length);",
          "    assert!(cursor.remaining() == 0);",
          "    assert!(cursor.position() == length);",
          "    cursor.advance(0);",
          "    assert!(cursor.position() == length);",
          "    cursor.advance(length as usize);",
          "    assert!(cursor.position() == length);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = vec![1, 2, 3, 4, 5];",
          "    let mut cursor = std::io::Cursor::new(data);",
          "    let initial_pos = cursor.position();",
          "    cursor.advance(3);",
          "    assert_eq!(cursor.position(), initial_pos + 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cursor.position(), initial_pos + cnt);",
          "    assert!(cursor.remaining() >= 0);",
          "    assert!(!cursor.has_remaining());",
          "    assert_eq!(cursor.get_ref().as_ref().len(), 5);",
          "    assert_eq!(cursor.position(), initial_pos + 3);",
          "    assert!(cursor.remaining() == 2);",
          "    assert!(cursor.try_get_u8().is_ok());",
          "    assert!(cursor.try_get_i8().is_ok());",
          "    assert!(cursor.try_get_u16().is_ok());",
          "    assert_eq!(cursor.remaining(), 2);",
          "    assert!(cursor.try_get_u32().is_err());",
          "    assert!(cursor.try_get_u64().is_err());",
          "    assert!(cursor.try_get_u128().is_err());"
        ],
        "code": [
          "{",
          "    let data = vec![1, 2, 3, 4, 5];",
          "    let mut cursor = std::io::Cursor::new(data);",
          "    let initial_pos = cursor.position();",
          "    cursor.advance(3);",
          "    assert_eq!(cursor.position(), initial_pos + 3);",
          "    assert_eq!(cursor.position(), initial_pos + cnt);",
          "    assert!(cursor.remaining() >= 0);",
          "    assert!(!cursor.has_remaining());",
          "    assert_eq!(cursor.get_ref().as_ref().len(), 5);",
          "    assert_eq!(cursor.position(), initial_pos + 3);",
          "    assert!(cursor.remaining() == 2);",
          "    assert!(cursor.try_get_u8().is_ok());",
          "    assert!(cursor.try_get_i8().is_ok());",
          "    assert!(cursor.try_get_u16().is_ok());",
          "    assert_eq!(cursor.remaining(), 2);",
          "    assert!(cursor.try_get_u32().is_err());",
          "    assert!(cursor.try_get_u64().is_err());",
          "    assert!(cursor.try_get_u128().is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]