[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = vec![0; 11].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(num, 11);",
          "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);"
        ],
        "code": [
          "{",
          "    let mut buf = vec![0; 11].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "    assert_eq!(num, 11);",
          "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = vec![0; 20].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "}"
        ],
        "oracle": [
          "    let mut buf = vec![0; 20].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "    assert_eq!(num, 11);",
          "    let buf_inner = buf.into_inner();",
          "    assert_eq!(*buf_inner, b\"hello world\"[..]);",
          "    assert_eq!(buf.remaining_mut(), 9);",
          "    assert!(buf.has_remaining_mut());",
          "    buf.advance_mut(num);",
          "    assert_eq!(buf.remaining_mut(), 9);"
        ],
        "code": [
          "{",
          "    let mut buf = vec![0; 20].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "    let mut buf = vec![0; 20].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "    assert_eq!(num, 11);",
          "    let buf_inner = buf.into_inner();",
          "    assert_eq!(*buf_inner, b\"hello world\"[..]);",
          "    assert_eq!(buf.remaining_mut(), 9);",
          "    assert!(buf.has_remaining_mut());",
          "    buf.advance_mut(num);",
          "    assert_eq!(buf.remaining_mut(), 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = vec![0; 11].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(num, 11);",
          "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);"
        ],
        "code": [
          "{",
          "    let mut buf = vec![0; 11].writer();",
          "    let num = buf.write(&b\"hello world\"[..]).unwrap();",
          "    assert_eq!(num, 11);",
          "    assert_eq!(*buf.into_inner(), b\"hello world\"[..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Vec::<u8>::new().writer();",
          "    buf.put_slice(&b\"hello world\"[..]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining_mut(), 11);",
          "    assert!(buf.has_remaining_mut());",
          "    buf.advance_mut(11);",
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert!(!buf.has_remaining_mut());"
        ],
        "code": [
          "{",
          "    let mut buf = Vec::<u8>::new().writer();",
          "    buf.put_slice(&b\"hello world\"[..]);",
          "    assert_eq!(buf.remaining_mut(), 11);",
          "    assert!(buf.has_remaining_mut());",
          "    buf.advance_mut(11);",
          "    assert_eq!(buf.remaining_mut(), 0);",
          "    assert!(!buf.has_remaining_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]