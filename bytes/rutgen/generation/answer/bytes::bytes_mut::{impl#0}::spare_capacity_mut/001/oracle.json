[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(5, 0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.spare_capacity_mut().as_ptr() != buf.ptr.as_ptr());",
          "    assert!(buf.spare_capacity_mut().len() > 0);",
          "    assert!(buf.spare_capacity_mut().len() <= 5);",
          "    assert_eq!(buf.spare_capacity_mut().as_mut_ptr(), buf.ptr.as_ptr().add(5));"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(5, 0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 5);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.spare_capacity_mut().as_ptr() != buf.ptr.as_ptr());",
          "    assert!(buf.spare_capacity_mut().len() > 0);",
          "    assert!(buf.spare_capacity_mut().len() <= 5);",
          "    assert_eq!(buf.spare_capacity_mut().as_mut_ptr(), buf.ptr.as_ptr().add(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::new();",
          "    buf.reserve(10);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(spare.len(), buf.capacity() - buf.len());",
          "    assert!(spare.as_ptr() > buf.ptr.as_ptr());",
          "    assert!(spare.len() <= buf.capacity() - buf.len());",
          "    assert!(spare.len() > 0);",
          "    assert_eq!(spare.as_mut_ptr(), buf.spare_capacity_mut().as_mut_ptr());",
          "    assert!(spare.iter().all(|x| x.as_ptr().is_null()));"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::new();",
          "    buf.reserve(10);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 10);",
          "    assert_eq!(spare.len(), buf.capacity() - buf.len());",
          "    assert!(spare.as_ptr() > buf.ptr.as_ptr());",
          "    assert!(spare.len() <= buf.capacity() - buf.len());",
          "    assert!(spare.len() > 0);",
          "    assert_eq!(spare.as_mut_ptr(), buf.spare_capacity_mut().as_mut_ptr());",
          "    assert!(spare.iter().all(|x| x.as_ptr().is_null()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 10);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.spare_capacity_mut().is_empty());",
          "    assert_eq!(buf.spare_capacity_mut().len(), 0);",
          "    buf.clear();",
          "    assert_eq!(buf.spare_capacity_mut().len(), 10);",
          "    buf.truncate(5);",
          "    assert_eq!(buf.spare_capacity_mut().len(), 5);",
          "    assert!(!buf.spare_capacity_mut().is_empty());",
          "    buf.resize(15, 1);",
          "    assert_eq!(buf.spare_capacity_mut().len(), 0);",
          "    buf.resize(5, 2);",
          "    let spare = buf.spare_capacity_mut();",
          "    spare[0].write(3);",
          "    assert_eq!(buf.len(), 5);",
          "    unsafe { buf.set_len(6) };",
          "    assert_eq!(&buf[..], &[3, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 0);",
          "    assert_eq!(buf.len(), 10);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.spare_capacity_mut().is_empty());",
          "    assert_eq!(buf.spare_capacity_mut().len(), 0);",
          "    buf.clear();",
          "    assert_eq!(buf.spare_capacity_mut().len(), 10);",
          "    buf.truncate(5);",
          "    assert_eq!(buf.spare_capacity_mut().len(), 5);",
          "    assert!(!buf.spare_capacity_mut().is_empty());",
          "    buf.resize(15, 1);",
          "    assert_eq!(buf.spare_capacity_mut().len(), 0);",
          "    buf.resize(5, 2);",
          "    let spare = buf.spare_capacity_mut();",
          "    spare[0].write(3);",
          "    assert_eq!(buf.len(), 5);",
          "    unsafe { buf.set_len(6) };",
          "    assert_eq!(&buf[..], &[3, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(20);",
          "    buf.resize(15, 0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.capacity(), 20);",
          "    assert_eq!(buf.len(), 15);",
          "    assert!(spare.as_ptr() != ptr::null_mut());",
          "    assert!(unsafe { spare.as_mut_ptr().add(spare.len()).cast::<u8>() } == unsafe { buf.ptr.as_ptr().add(buf.len()).cast::<u8>() });",
          "    assert!(unsafe { spare.as_ptr().add(spare.len()) } == unsafe { buf.ptr.as_ptr().add(buf.cap) });"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(20);",
          "    buf.resize(15, 0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 5);",
          "    assert_eq!(buf.capacity(), 20);",
          "    assert_eq!(buf.len(), 15);",
          "    assert!(spare.as_ptr() != ptr::null_mut());",
          "    assert!(unsafe { spare.as_mut_ptr().add(spare.len()).cast::<u8>() } == unsafe { buf.ptr.as_ptr().add(buf.len()).cast::<u8>() });",
          "    assert!(unsafe { spare.as_ptr().add(spare.len()) } == unsafe { buf.ptr.as_ptr().add(buf.cap) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 0);",
          "}"
        ],
        "oracle": [
          "    let mut buf = BytesMut::with_capacity(0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 0);",
          "    assert_eq!(unsafe { spare.as_ptr() }, (buf.ptr.as_ptr().add(buf.len) as *mut MaybeUninit<u8>));",
          "    assert_eq!(spare.as_mut().len(), buf.cap - buf.len);",
          "    buf.reserve(10);",
          "    let spare_after_reserve = buf.spare_capacity_mut();",
          "    assert!(spare_after_reserve.len() >= 10);",
          "    buf.resize(5, 0);",
          "    let spare_after_resize = buf.spare_capacity_mut();",
          "    assert_eq!(spare_after_resize.len(), buf.cap - 5);",
          "    unsafe { buf.set_len(5); }",
          "    let spare_after_set_len = buf.spare_capacity_mut();",
          "    assert_eq!(spare_after_set_len.len(), buf.cap - 5);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 0);",
          "    let mut buf = BytesMut::with_capacity(0);",
          "    let spare = buf.spare_capacity_mut();",
          "    assert_eq!(spare.len(), 0);",
          "    assert_eq!(unsafe { spare.as_ptr() }, (buf.ptr.as_ptr().add(buf.len) as *mut MaybeUninit<u8>));",
          "    assert_eq!(spare.as_mut().len(), buf.cap - buf.len);",
          "    buf.reserve(10);",
          "    let spare_after_reserve = buf.spare_capacity_mut();",
          "    assert!(spare_after_reserve.len() >= 10);",
          "    buf.resize(5, 0);",
          "    let spare_after_resize = buf.spare_capacity_mut();",
          "    assert_eq!(spare_after_resize.len(), buf.cap - 5);",
          "    unsafe { buf.set_len(5); }",
          "    let spare_after_set_len = buf.spare_capacity_mut();",
          "    assert_eq!(spare_after_set_len.len(), buf.cap - 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]