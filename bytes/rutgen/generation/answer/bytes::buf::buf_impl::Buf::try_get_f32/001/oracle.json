[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[0], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[0], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 1 }));",
          "    assert_eq!(buf.remaining(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[0, 1], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 4, available: 2 }), result);",
          "    assert_eq!(2, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[0, 1], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 2 }), result);",
          "    assert_eq!(2, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[0, 1, 2], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            Err(TryGetError { requested: 4, available: self.remaining() })",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[0, 1, 2], pos: 0 };",
          "    let result = buf.try_get_f32();",
          "    assert_eq!(result, Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]