[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    });",
          "    ",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = 1;",
          "    let mut buffer = vec![0u8; len];",
          "    buffer[0] = 42;",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "",
          "    unsafe {",
          "        let _result = shared_v_to_vec(&data, ptr, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 1);",
          "    assert_eq!(_result[0], 42);",
          "    assert!(!data.load(Ordering::Relaxed).is_null());",
          "    assert_eq!(shared.ref_count.load(Ordering::Acquire), 1);",
          "    assert!(shared.is_unique());",
          "    assert_eq!(shared.vec.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    });",
          "    ",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = 1;",
          "    let mut buffer = vec![0u8; len];",
          "    buffer[0] = 42;",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "",
          "    unsafe {",
          "        let _result = shared_v_to_vec(&data, ptr, len);",
          "    }",
          "    assert_eq!(_result.len(), 1);",
          "    assert_eq!(_result[0], 42);",
          "    assert!(!data.load(Ordering::Relaxed).is_null());",
          "    assert_eq!(shared.ref_count.load(Ordering::Acquire), 1);",
          "    assert!(shared.is_unique());",
          "    assert_eq!(shared.vec.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    });",
          "    ",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = MAX_VEC_POS;",
          "    let mut buffer = vec![0u8; len];",
          "    for i in 0..len {",
          "        buffer[i] = i as u8;",
          "    }",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "",
          "    unsafe {",
          "        let _result = shared_v_to_vec(&data, ptr, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let shared = Box::new(Shared { vec: Vec::new(), original_capacity_repr: 0, ref_count: AtomicUsize::new(1) });",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = MAX_VEC_POS;",
          "    let mut buffer = vec![0u8; len];",
          "    for i in 0..len { buffer[i] = i as u8; }",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "    unsafe { let result = shared_v_to_vec(&data, ptr, len); assert_eq!(result.len(), len); assert_eq!(result, buffer); }"
        ],
        "code": [
          "{",
          "    let shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    });",
          "    ",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = MAX_VEC_POS;",
          "    let mut buffer = vec![0u8; len];",
          "    for i in 0..len {",
          "        buffer[i] = i as u8;",
          "    }",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "",
          "    unsafe {",
          "        let _result = shared_v_to_vec(&data, ptr, len);",
          "    }",
          "    let shared = Box::new(Shared { vec: Vec::new(), original_capacity_repr: 0, ref_count: AtomicUsize::new(1) });",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = MAX_VEC_POS;",
          "    let mut buffer = vec![0u8; len];",
          "    for i in 0..len { buffer[i] = i as u8; }",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "    unsafe { let result = shared_v_to_vec(&data, ptr, len); assert_eq!(result.len(), len); assert_eq!(result, buffer); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    });",
          "    ",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = 10; // Choose an intermediate length",
          "    let mut buffer = vec![0u8; len];",
          "    for i in 0..len {",
          "        buffer[i] = (i * 2) as u8; // Fill with some pattern",
          "    }",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "",
          "    unsafe {",
          "        let _result = shared_v_to_vec(&data, ptr, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(_result.len() == len);",
          "    assert!(!_result.is_empty());",
          "    assert_eq!(_result, buffer);",
          "    assert_eq!(_result.as_ptr(), buffer.as_ptr());",
          "    assert_eq!(_result.capacity(), len);"
        ],
        "code": [
          "{",
          "    let shared = Box::new(Shared {",
          "        vec: Vec::new(),",
          "        original_capacity_repr: 0,",
          "        ref_count: AtomicUsize::new(1),",
          "    });",
          "    ",
          "    let data = AtomicPtr::new(Box::into_raw(shared));",
          "    let len: usize = 10; // Choose an intermediate length",
          "    let mut buffer = vec![0u8; len];",
          "    for i in 0..len {",
          "        buffer[i] = (i * 2) as u8; // Fill with some pattern",
          "    }",
          "    let ptr: *const u8 = buffer.as_ptr();",
          "",
          "    unsafe {",
          "        let _result = shared_v_to_vec(&data, ptr, len);",
          "    }",
          "    assert!(_result.len() == len);",
          "    assert!(!_result.is_empty());",
          "    assert_eq!(_result, buffer);",
          "    assert_eq!(_result.as_ptr(), buffer.as_ptr());",
          "    assert_eq!(_result.capacity(), len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]