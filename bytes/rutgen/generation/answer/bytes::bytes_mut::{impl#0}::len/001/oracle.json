[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut::new();",
          "    let _ = bytes_mut.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    let bytes_mut_with_data = BytesMut::from_vec(vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(bytes_mut_with_data.len(), 5);",
          "    let bytes_mut_empty = BytesMut::new();",
          "    assert!(bytes_mut_empty.is_empty());",
          "    let bytes_mut_capacity = BytesMut::with_capacity(10);",
          "    assert_eq!(bytes_mut_capacity.capacity(), 10);",
          "    bytes_mut_capacity.resize(5, 0);",
          "    assert_eq!(bytes_mut_capacity.len(), 5);",
          "    bytes_mut_capacity.truncate(3);",
          "    assert_eq!(bytes_mut_capacity.len(), 3);",
          "    bytes_mut_capacity.clear();",
          "    assert_eq!(bytes_mut_capacity.len(), 0);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut::new();",
          "    let _ = bytes_mut.len();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    let bytes_mut_with_data = BytesMut::from_vec(vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(bytes_mut_with_data.len(), 5);",
          "    let bytes_mut_empty = BytesMut::new();",
          "    assert!(bytes_mut_empty.is_empty());",
          "    let bytes_mut_capacity = BytesMut::with_capacity(10);",
          "    assert_eq!(bytes_mut_capacity.capacity(), 10);",
          "    bytes_mut_capacity.resize(5, 0);",
          "    assert_eq!(bytes_mut_capacity.len(), 5);",
          "    bytes_mut_capacity.truncate(3);",
          "    assert_eq!(bytes_mut_capacity.len(), 3);",
          "    bytes_mut_capacity.clear();",
          "    assert_eq!(bytes_mut_capacity.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3]);",
          "    let _ = bytes_mut.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 3);",
          "    ",
          "    let mut empty_bytes_mut = BytesMut::new();",
          "    assert_eq!(empty_bytes_mut.len(), 0);",
          "    ",
          "    let mut full_bytes_mut = BytesMut::with_capacity(5);",
          "    full_bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    assert_eq!(full_bytes_mut.len(), 5);",
          "    ",
          "    let mut truncated_bytes_mut = BytesMut::with_capacity(10);",
          "    truncated_bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    truncated_bytes_mut.truncate(3);",
          "    assert_eq!(truncated_bytes_mut.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3]);",
          "    let _ = bytes_mut.len();",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    ",
          "    let mut empty_bytes_mut = BytesMut::new();",
          "    assert_eq!(empty_bytes_mut.len(), 0);",
          "    ",
          "    let mut full_bytes_mut = BytesMut::with_capacity(5);",
          "    full_bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    assert_eq!(full_bytes_mut.len(), 5);",
          "    ",
          "    let mut truncated_bytes_mut = BytesMut::with_capacity(10);",
          "    truncated_bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    truncated_bytes_mut.truncate(3);",
          "    assert_eq!(truncated_bytes_mut.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(usize::MAX);",
          "    bytes_mut.resize(usize::MAX, 0);",
          "    let _ = bytes_mut.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), usize::MAX);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(usize::MAX);",
          "    bytes_mut.resize(usize::MAX, 0);",
          "    let _ = bytes_mut.len();",
          "    assert_eq!(bytes_mut.len(), usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    bytes_mut.truncate(3);",
          "    let _ = bytes_mut.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 3);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    bytes_mut.clear();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty() == true);",
          "    bytes_mut.resize(5, 0);",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    bytes_mut.truncate(0);",
          "    assert_eq!(bytes_mut.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    bytes_mut.truncate(3);",
          "    let _ = bytes_mut.len();",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    bytes_mut.clear();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty() == true);",
          "    bytes_mut.resize(5, 0);",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    bytes_mut.truncate(0);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3]);",
          "    bytes_mut.clear();",
          "    let _ = bytes_mut.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3]);",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    bytes_mut.clear();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    bytes_mut.resize(5, 0);",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    bytes_mut.truncate(2);",
          "    assert_eq!(bytes_mut.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3]);",
          "    bytes_mut.clear();",
          "    let _ = bytes_mut.len();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3]);",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    bytes_mut.clear();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    bytes_mut.resize(5, 0);",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    bytes_mut.truncate(2);",
          "    assert_eq!(bytes_mut.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes_mut = BytesMut::zeroed(0);",
          "    let _ = bytes_mut.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    ",
          "    let bytes_mut = BytesMut::with_capacity(10);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    ",
          "    let bytes_mut = BytesMut::new();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    ",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    ",
          "    let mut bytes_mut = BytesMut::zeroed(5);",
          "    unsafe { bytes_mut.set_len(5) };",
          "    assert_eq!(bytes_mut.len(), 5);"
        ],
        "code": [
          "{",
          "    let bytes_mut = BytesMut::zeroed(0);",
          "    let _ = bytes_mut.len();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    ",
          "    let bytes_mut = BytesMut::with_capacity(10);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    ",
          "    let bytes_mut = BytesMut::new();",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    ",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    ",
          "    let mut bytes_mut = BytesMut::zeroed(5);",
          "    unsafe { bytes_mut.set_len(5) };",
          "    assert_eq!(bytes_mut.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]