[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\xA1\\xA0\\x09\\x08\";",
          "    let result = buf.try_get_i32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0xA009A1A1_i32), buf.try_get_i32_ne());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.advance(4);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 0}), buf.try_get_i32_ne());",
          "    buf.advance(0);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\xA1\\xA0\\x09\\x08\";",
          "    let result = buf.try_get_i32_ne();",
          "    assert_eq!(Ok(0xA009A1A1_i32), buf.try_get_i32_ne());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.advance(4);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 0}), buf.try_get_i32_ne());",
          "    buf.advance(0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x08\\x09\\xA0\"[..];",
          "    let result = buf.try_get_i32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x08\\x09\\xA0\"[..];",
          "    let result = buf.try_get_i32_ne();",
          "    assert_eq!(result, Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]