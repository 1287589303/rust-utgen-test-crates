[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];",
          "    let _result = buf.try_get_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf_short: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf_short.try_get_i128());",
          "    assert_eq!(15, buf_short.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16 hello\"[..];",
          "    let _result = buf.try_get_i128();",
          "    assert_eq!(Ok(0x01020304050607080910111213141516_i128), buf.try_get_i128());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf_short: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf_short.try_get_i128());",
          "    assert_eq!(15, buf_short.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    let _result = buf.try_get_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128());",
          "    assert_eq!(15, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    let _result = buf.try_get_i128();",
          "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128());",
          "    assert_eq!(15, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    let _result = buf.try_get_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));",
          "    assert_eq!(buf.remaining(), 15);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    let _result = buf.try_get_i128();",
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));",
          "    assert_eq!(buf.remaining(), 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\"[..];",
          "    let _result = buf.try_get_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 1 }));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\"[..];",
          "    let _result = buf.try_get_i128();",
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 1 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
          "    let _result = buf.try_get_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 16, available: 2 }), buf.try_get_i128());",
          "    assert_eq!(2, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\"[..];",
          "    let _result = buf.try_get_i128();",
          "    assert_eq!(Err(TryGetError { requested: 16, available: 2 }), buf.try_get_i128());",
          "    assert_eq!(2, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    let _result = buf.try_get_i128();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\"[..];",
          "    let _result = buf.try_get_i128();",
          "    assert_eq!(_result, Err(TryGetError { requested: 16, available: 15 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]