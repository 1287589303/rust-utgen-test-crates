[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let additional = 0;",
          "    let allocate = true;",
          "    unsafe {",
          "        bytes_mut.reserve_inner(additional, allocate);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert!(bytes_mut.ptr.as_ptr() != core::ptr::null_mut());",
          "    assert!(bytes_mut.data.is_null());",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.kind(), KIND_ARC);",
          "    assert!(bytes_mut.is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let additional = 0;",
          "    let allocate = true;",
          "    unsafe {",
          "        bytes_mut.reserve_inner(additional, allocate);",
          "    }",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert!(bytes_mut.ptr.as_ptr() != core::ptr::null_mut());",
          "    assert!(bytes_mut.data.is_null());",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.kind(), KIND_ARC);",
          "    assert!(bytes_mut.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::zeroed(0);",
          "    let additional = 0;",
          "    let allocate = true;",
          "    unsafe {",
          "        bytes_mut.reserve_inner(additional, allocate);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert!(bytes_mut.ptr.as_ptr() != core::ptr::null_mut());",
          "    assert_eq!(bytes_mut.len(), bytes_mut.capacity());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::zeroed(0);",
          "    let additional = 0;",
          "    let allocate = true;",
          "    unsafe {",
          "        bytes_mut.reserve_inner(additional, allocate);",
          "    }",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert!(bytes_mut.ptr.as_ptr() != core::ptr::null_mut());",
          "    assert_eq!(bytes_mut.len(), bytes_mut.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(0);",
          "    let additional = 0;",
          "    let allocate = true;",
          "    unsafe {",
          "        bytes_mut.reserve_inner(additional, allocate);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.ptr.as_ptr() as usize, ptr::null_mut::<u8>() as usize);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.data as usize & KIND_MASK, KIND_ARC);",
          "    assert!(bytes_mut.try_reclaim(additional));"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(0);",
          "    let additional = 0;",
          "    let allocate = true;",
          "    unsafe {",
          "        bytes_mut.reserve_inner(additional, allocate);",
          "    }",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.ptr.as_ptr() as usize, ptr::null_mut::<u8>() as usize);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert_eq!(bytes_mut.data as usize & KIND_MASK, KIND_ARC);",
          "    assert!(bytes_mut.try_reclaim(additional));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]