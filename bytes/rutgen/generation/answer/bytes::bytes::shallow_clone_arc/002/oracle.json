[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Shared {",
          "        buf: *mut u8,",
          "        cap: usize,",
          "        ref_cnt: AtomicUsize,",
          "    }",
          "",
          "    let initial_ref_cnt = usize::MAX >> 1;",
          "    let shared_data = Box::into_raw(Box::new(Shared {",
          "        buf: std::ptr::null_mut(),",
          "        cap: 0,",
          "        ref_cnt: AtomicUsize::new(initial_ref_cnt),",
          "    }));",
          "",
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        let result = shallow_clone_arc(shared_data, ptr, len);",
          "        // Here would be any additional logic needed, ",
          "        // but as per the requirements, no assertions or checks are made.",
          "    }",
          "}"
        ],
        "oracle": [
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "    let initial_ref_cnt = usize::MAX >> 1;",
          "    let shared_data = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(initial_ref_cnt) }));",
          "    let result = unsafe { shallow_clone_arc(shared_data, ptr, len) };",
          "    assert_eq!(result.ptr, ptr);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(unsafe { (*result.data.get()).ref_cnt.load(Ordering::Relaxed) }, initial_ref_cnt + 1);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);"
        ],
        "code": [
          "{",
          "    struct Shared {",
          "        buf: *mut u8,",
          "        cap: usize,",
          "        ref_cnt: AtomicUsize,",
          "    }",
          "",
          "    let initial_ref_cnt = usize::MAX >> 1;",
          "    let shared_data = Box::into_raw(Box::new(Shared {",
          "        buf: std::ptr::null_mut(),",
          "        cap: 0,",
          "        ref_cnt: AtomicUsize::new(initial_ref_cnt),",
          "    }));",
          "",
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        let result = shallow_clone_arc(shared_data, ptr, len);",
          "        // Here would be any additional logic needed, ",
          "        // but as per the requirements, no assertions or checks are made.",
          "    }",
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "    let initial_ref_cnt = usize::MAX >> 1;",
          "    let shared_data = Box::into_raw(Box::new(Shared { buf: std::ptr::null_mut(), cap: 0, ref_cnt: AtomicUsize::new(initial_ref_cnt) }));",
          "    let result = unsafe { shallow_clone_arc(shared_data, ptr, len) };",
          "    assert_eq!(result.ptr, ptr);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(unsafe { (*result.data.get()).ref_cnt.load(Ordering::Relaxed) }, initial_ref_cnt + 1);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Shared {",
          "        buf: *mut u8,",
          "        cap: usize,",
          "        ref_cnt: AtomicUsize,",
          "    }",
          "",
          "    let initial_ref_cnt = usize::MAX >> 1;",
          "    let buf = Box::new([0u8; 10]);",
          "    let shared_data = Box::into_raw(Box::new(Shared {",
          "        buf: buf.as_mut_ptr(),",
          "        cap: 10,",
          "        ref_cnt: AtomicUsize::new(initial_ref_cnt),",
          "    }));",
          "",
          "    let ptr: *const u8 = shared_data as *const u8; // point to the Shared struct",
          "    let len: usize = 10;",
          "",
          "    unsafe {",
          "        let result = shallow_clone_arc(shared_data, ptr, len);",
          "        // Here would be any additional logic needed,",
          "        // but as per the requirements, no assertions or checks are made.",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.ptr, ptr);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(unsafe { result.data.load(Ordering::Relaxed) }, shared_data as *mut _);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert_eq!(shared_data.ref_cnt.load(Ordering::Relaxed), initial_ref_cnt + 1);"
        ],
        "code": [
          "{",
          "    struct Shared {",
          "        buf: *mut u8,",
          "        cap: usize,",
          "        ref_cnt: AtomicUsize,",
          "    }",
          "",
          "    let initial_ref_cnt = usize::MAX >> 1;",
          "    let buf = Box::new([0u8; 10]);",
          "    let shared_data = Box::into_raw(Box::new(Shared {",
          "        buf: buf.as_mut_ptr(),",
          "        cap: 10,",
          "        ref_cnt: AtomicUsize::new(initial_ref_cnt),",
          "    }));",
          "",
          "    let ptr: *const u8 = shared_data as *const u8; // point to the Shared struct",
          "    let len: usize = 10;",
          "",
          "    unsafe {",
          "        let result = shallow_clone_arc(shared_data, ptr, len);",
          "        // Here would be any additional logic needed,",
          "        // but as per the requirements, no assertions or checks are made.",
          "    }",
          "    assert_eq!(result.ptr, ptr);",
          "    assert_eq!(result.len, len);",
          "    assert_eq!(unsafe { result.data.load(Ordering::Relaxed) }, shared_data as *mut _);",
          "    assert_eq!(result.vtable, &SHARED_VTABLE);",
          "    assert_eq!(shared_data.ref_cnt.load(Ordering::Relaxed), initial_ref_cnt + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]