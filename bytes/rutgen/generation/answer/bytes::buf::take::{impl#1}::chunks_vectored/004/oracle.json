[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn has_remaining(&self) -> bool {",
          "            self.remaining() > 0",
          "        }",
          "        ",
          "        #[cfg(feature = \"std\")]",
          "        fn chunks_vectored<'a>(&'a self, _dst: &mut [IoSlice<'a>]) -> usize {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let buf = TestBuf { data: vec![1, 2, 3, 4], position: 0 };",
          "    let take = Take { inner: buf, limit: 0 };",
          "    ",
          "    let mut dst: &mut [std::io::IoSlice] = &mut [];",
          "    let result = take.chunks_vectored(dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn has_remaining(&self) -> bool {",
          "            self.remaining() > 0",
          "        }",
          "        ",
          "        #[cfg(feature = \"std\")]",
          "        fn chunks_vectored<'a>(&'a self, _dst: &mut [IoSlice<'a>]) -> usize {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let buf = TestBuf { data: vec![1, 2, 3, 4], position: 0 };",
          "    let take = Take { inner: buf, limit: 0 };",
          "    ",
          "    let mut dst: &mut [std::io::IoSlice] = &mut [];",
          "    let result = take.chunks_vectored(dst);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn has_remaining(&self) -> bool {",
          "            self.remaining() > 0",
          "        }",
          "        ",
          "        #[cfg(feature = \"std\")]",
          "        fn chunks_vectored<'a>(&'a self, _dst: &mut [IoSlice<'a>]) -> usize {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let buf = TestBuf { data: vec![1, 2, 3, 4], position: 0 };",
          "    let take = Take { inner: buf, limit: 0 };",
          "    ",
          "    let mut dst: &mut [std::io::IoSlice] = &mut [std::io::IoSlice::new(&[])];",
          "    let result = take.chunks_vectored(dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl Buf for TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {",
          "            unimplemented!()",
          "        }",
          "",
          "        fn has_remaining(&self) -> bool {",
          "            self.remaining() > 0",
          "        }",
          "        ",
          "        #[cfg(feature = \"std\")]",
          "        fn chunks_vectored<'a>(&'a self, _dst: &mut [IoSlice<'a>]) -> usize {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let buf = TestBuf { data: vec![1, 2, 3, 4], position: 0 };",
          "    let take = Take { inner: buf, limit: 0 };",
          "    ",
          "    let mut dst: &mut [std::io::IoSlice] = &mut [std::io::IoSlice::new(&[])];",
          "    let result = take.chunks_vectored(dst);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]