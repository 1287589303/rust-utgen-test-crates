[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello\");",
          "    let b = a.split_off(0);",
          "    // Note: Not asserting results, just calling the function.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 0);",
          "    assert_eq!(b.len(), 5);",
          "    assert_eq!(&*b.as_slice(), b\"hello\");",
          "    assert_eq!(b.ptr, a.ptr);",
          "    assert!(a.is_unique());",
          "    assert!(b.is_unique());",
          "    assert!(a.is_empty());"
        ],
        "code": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello\");",
          "    let b = a.split_off(0);",
          "    // Note: Not asserting results, just calling the function.",
          "    assert_eq!(a.len(), 0);",
          "    assert_eq!(b.len(), 5);",
          "    assert_eq!(&*b.as_slice(), b\"hello\");",
          "    assert_eq!(b.ptr, a.ptr);",
          "    assert!(a.is_unique());",
          "    assert!(b.is_unique());",
          "    assert!(a.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello\");",
          "    let b = a.split_off(a.len());",
          "    // Note: Not asserting results, just calling the function.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 5);",
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(a.as_slice(), b\"hello\");",
          "    assert_eq!(b.as_slice(), &[]);",
          "    assert_eq!(a.ptr, b\"hello\".as_ptr());",
          "    assert_eq!(b.ptr, ptr::null());"
        ],
        "code": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello\");",
          "    let b = a.split_off(a.len());",
          "    // Note: Not asserting results, just calling the function.",
          "    assert_eq!(a.len(), 5);",
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(a.as_slice(), b\"hello\");",
          "    assert_eq!(b.as_slice(), &[]);",
          "    assert_eq!(a.ptr, b\"hello\".as_ptr());",
          "    assert_eq!(b.ptr, ptr::null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello\");",
          "    let _b = a.split_off(a.len() + 1);",
          "    // Expected to panic as at > self.len().",
          "}"
        ],
        "oracle": [
          "    assert_panics!(split_off(a.len() + 1));",
          "    assert_eq!(a.len(), 5);",
          "    assert_eq!(a.ptr, a.ptr);"
        ],
        "code": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello\");",
          "    let _b = a.split_off(a.len() + 1);",
          "    // Expected to panic as at > self.len().",
          "    assert_panics!(split_off(a.len() + 1));",
          "    assert_eq!(a.len(), 5);",
          "    assert_eq!(a.ptr, a.ptr);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello world\");",
          "    let b = a.split_off(5);",
          "    // Note: Not asserting results, just calling the function.",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 5);",
          "    assert_eq!(b.len(), 6);",
          "    assert_eq!(&a[..], b\"hello\");",
          "    assert_eq!(&b[..], b\" world\");",
          "    assert!(a.ptr == b.ptr.wrapping_sub(5));",
          "    assert!(b.ptr == a.ptr.wrapping_add(5));",
          "    assert!(a.is_empty() == false);",
          "    assert!(b.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut a = Bytes::copy_from_slice(b\"hello world\");",
          "    let b = a.split_off(5);",
          "    // Note: Not asserting results, just calling the function.",
          "    assert_eq!(a.len(), 5);",
          "    assert_eq!(b.len(), 6);",
          "    assert_eq!(&a[..], b\"hello\");",
          "    assert_eq!(&b[..], b\" world\");",
          "    assert!(a.ptr == b.ptr.wrapping_sub(5));",
          "    assert!(b.ptr == a.ptr.wrapping_add(5));",
          "    assert!(a.is_empty() == false);",
          "    assert!(b.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]