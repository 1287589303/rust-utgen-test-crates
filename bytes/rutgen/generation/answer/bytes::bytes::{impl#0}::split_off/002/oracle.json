[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"hello world\");",
          "    let result = bytes.split_off(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 5);",
          "    assert_eq!(result.len(), 6);",
          "    assert_eq!(&bytes.as_slice()[..], b\"hello\");",
          "    assert_eq!(&result.as_slice()[..], b\" world\");",
          "    assert!(bytes.len() + result.len() == b\"hello world\".len());",
          "    assert!(result.ptr == bytes.ptr.wrapping_add(5));",
          "    assert!(bytes.is_unique());",
          "    assert!(result.is_unique());"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"hello world\");",
          "    let result = bytes.split_off(5);",
          "    assert_eq!(bytes.len(), 5);",
          "    assert_eq!(result.len(), 6);",
          "    assert_eq!(&bytes.as_slice()[..], b\"hello\");",
          "    assert_eq!(&result.as_slice()[..], b\" world\");",
          "    assert!(bytes.len() + result.len() == b\"hello world\".len());",
          "    assert!(result.ptr == bytes.ptr.wrapping_add(5));",
          "    assert!(bytes.is_unique());",
          "    assert!(result.is_unique());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"abcdefgh\");",
          "    let result = bytes.split_off(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 4);",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(&bytes.as_slice(), &b\"abcd\"[..]);",
          "    assert_eq!(&result.as_slice(), &b\"efgh\"[..]);",
          "    assert!(bytes.is_unique());",
          "    assert!(!result.is_unique());",
          "    assert!(result.ptr as usize > bytes.ptr as usize);",
          "    assert!(result.len() <= bytes.len());"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"abcdefgh\");",
          "    let result = bytes.split_off(4);",
          "    assert_eq!(bytes.len(), 4);",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(&bytes.as_slice(), &b\"abcd\"[..]);",
          "    assert_eq!(&result.as_slice(), &b\"efgh\"[..]);",
          "    assert!(bytes.is_unique());",
          "    assert!(!result.is_unique());",
          "    assert!(result.ptr as usize > bytes.ptr as usize);",
          "    assert!(result.len() <= bytes.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"data\");",
          "    let result = bytes.split_off(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 1);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(unsafe { core::slice::from_raw_parts(bytes.ptr, bytes.len) }, b\"d\");",
          "    assert_eq!(unsafe { core::slice::from_raw_parts(result.ptr, result.len) }, b\"ata\");",
          "    assert!(result.ptr as usize > bytes.ptr as usize);",
          "    assert!(bytes.len() + result.len() == 4);",
          "    assert!(result.is_unique());",
          "    assert!(!bytes.is_unique());"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"data\");",
          "    let result = bytes.split_off(1);",
          "    assert_eq!(bytes.len(), 1);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(unsafe { core::slice::from_raw_parts(bytes.ptr, bytes.len) }, b\"d\");",
          "    assert_eq!(unsafe { core::slice::from_raw_parts(result.ptr, result.len) }, b\"ata\");",
          "    assert!(result.ptr as usize > bytes.ptr as usize);",
          "    assert!(bytes.len() + result.len() == 4);",
          "    assert!(result.is_unique());",
          "    assert!(!bytes.is_unique());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"panic\");",
          "    let _result = bytes.split_off(5);",
          "}"
        ],
        "oracle": [
          "    assert!(bytes.len() == 5);",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(bytes.split_off(5).len() == 0);",
          "    assert!(bytes.len() == 5);",
          "    assert!(bytes.ptr == bytes.ptr);",
          "    assert!(bytes.is_unique() == true);",
          "    assert!(bytes.clone().len() == 5);",
          "    assert!(bytes.split_off(5).ptr == bytes.ptr.wrapping_add(5));"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::copy_from_slice(b\"panic\");",
          "    let _result = bytes.split_off(5);",
          "    assert!(bytes.len() == 5);",
          "    assert!(bytes.is_empty() == false);",
          "    assert!(bytes.split_off(5).len() == 0);",
          "    assert!(bytes.len() == 5);",
          "    assert!(bytes.ptr == bytes.ptr);",
          "    assert!(bytes.is_unique() == true);",
          "    assert!(bytes.clone().len() == 5);",
          "    assert!(bytes.split_off(5).ptr == bytes.ptr.wrapping_add(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]