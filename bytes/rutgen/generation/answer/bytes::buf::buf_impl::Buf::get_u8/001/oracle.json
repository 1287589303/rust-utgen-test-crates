[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "        ",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], position: 0 };",
          "    buf.get_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u8()).is_err());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "        ",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], position: 0 };",
          "    buf.get_u8();",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u8()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "        ",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], position: 1 };",
          "    buf.get_u8();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.position, 1);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u8()).is_err());",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.chunk(), &[]);",
          "    assert_eq!(buf.remaining(), buf.data.len() - buf.position);",
          "    assert_eq!(buf.position, 1);",
          "    assert!(buf.remaining() < 1);",
          "    assert_eq!(buf.data, &[]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "        ",
          "        fn chunk(&self) -> &[u8] {",
          "            &self.data[self.position..]",
          "        }",
          "        ",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &[], position: 1 };",
          "    buf.get_u8();",
          "    assert_eq!(buf.position, 1);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u8()).is_err());",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.chunk(), &[]);",
          "    assert_eq!(buf.remaining(), buf.data.len() - buf.position);",
          "    assert_eq!(buf.position, 1);",
          "    assert!(buf.remaining() < 1);",
          "    assert_eq!(buf.data, &[]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]