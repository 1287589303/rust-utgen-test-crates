[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 16 bytes remaining, should return Ok(ret)",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 16);",
          "    assert_eq!(result, Ok(0x01020304050607080910111213141516_i128));",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 16 bytes remaining, should return Ok(ret)",
          "    assert_eq!(buf.remaining(), 16);",
          "    assert_eq!(result, Ok(0x01020304050607080910111213141516_i128));",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 15 bytes remaining, should return Err(TryGetError{requested: 16, available: 15})",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128_le());",
          "    assert_eq!(15, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 15 bytes remaining, should return Err(TryGetError{requested: 16, available: 15})",
          "    assert_eq!(Err(TryGetError { requested: 16, available: 15 }), buf.try_get_i128_le());",
          "    assert_eq!(15, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 0 bytes remaining, should return Err(TryGetError{requested: 16, available: 0})",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 16, available: 0}), buf.try_get_i128_le());",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 0 bytes remaining, should return Err(TryGetError{requested: 16, available: 0})",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 0}), buf.try_get_i128_le());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 1 byte remaining, should return Err(TryGetError{requested: 16, available: 1})",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 16, available: 1}), buf.try_get_i128_le());",
          "    assert_eq!(1, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 1 byte remaining, should return Err(TryGetError{requested: 16, available: 1})",
          "    assert_eq!(Err(TryGetError{requested: 16, available: 1}), buf.try_get_i128_le());",
          "    assert_eq!(1, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\\x02\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 17 bytes remaining, should return Ok(ret)",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 17);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), 0x01020304050607080910111213141516_i128);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x16\\x15\\x14\\x13\\x12\\x11\\x10\\x09\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\\x02\"[..];",
          "    let result = buf.try_get_i128_le();",
          "    // The buffer has 17 bytes remaining, should return Ok(ret)",
          "    assert_eq!(buf.remaining(), 17);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), 0x01020304050607080910111213141516_i128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]