[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    ",
          "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "    ",
          "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[5, 4, 3, 2, 1];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[5, 4, 3, 2, 1];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1: &[u8] = &[];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let data1: &[u8] = &[];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let data1: &[u8] = &[1, 2, 3, 4, 5];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data1: &[u8] = &[];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let data1: &[u8] = &[];",
          "    let bytes1 = Bytes {",
          "        ptr: data1.as_ptr(),",
          "        len: data1.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let data2: &[u8] = &[];",
          "    let bytes2 = Bytes {",
          "        ptr: data2.as_ptr(),",
          "        len: data2.len(),",
          "        data: AtomicPtr::new(ptr::null_mut()),",
          "        vtable: &SHARED_VTABLE,",
          "    };",
          "",
          "    let result = bytes1.eq(&bytes2);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]