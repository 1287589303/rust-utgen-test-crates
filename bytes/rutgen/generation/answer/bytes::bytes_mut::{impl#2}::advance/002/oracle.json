[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.resize(5, 0); // Set length to 5, remaining should be 5",
          "    let cnt = bytes_mut.remaining() + 1; // Exceeds remaining",
          "",
          "    unsafe {",
          "        bytes_mut.advance(cnt);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.remaining(), 5);",
          "    assert!(cnt > bytes_mut.remaining());",
          "    assert!(std::panic::catch_unwind(|| bytes_mut.advance(cnt)).is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.resize(5, 0); // Set length to 5, remaining should be 5",
          "    let cnt = bytes_mut.remaining() + 1; // Exceeds remaining",
          "",
          "    unsafe {",
          "        bytes_mut.advance(cnt);",
          "    }",
          "    assert_eq!(bytes_mut.remaining(), 5);",
          "    assert!(cnt > bytes_mut.remaining());",
          "    assert!(std::panic::catch_unwind(|| bytes_mut.advance(cnt)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new(); // Initial length is 0, remaining is 0",
          "    let cnt = 0; // Zero count",
          "",
          "    unsafe {",
          "        bytes_mut.advance(cnt);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(true, std::panic::catch_unwind(|| {",
          "    let mut bytes_mut = BytesMut::new();",
          "    let cnt = 1; // cnt > remaining()",
          "    unsafe {",
          "    bytes_mut.advance(cnt);",
          "    }",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new(); // Initial length is 0, remaining is 0",
          "    let cnt = 0; // Zero count",
          "",
          "    unsafe {",
          "        bytes_mut.advance(cnt);",
          "    }",
          "    assert_eq!(true, std::panic::catch_unwind(|| {",
          "    let mut bytes_mut = BytesMut::new();",
          "    let cnt = 1; // cnt > remaining()",
          "    unsafe {",
          "    bytes_mut.advance(cnt);",
          "    }",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(5);",
          "    bytes_mut.resize(3, 0); // Set length to 3, remaining should be 3",
          "    let cnt = bytes_mut.capacity() + 1; // Exceeds capacity",
          "",
          "    unsafe {",
          "        bytes_mut.advance(cnt);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(bytes_mut.remaining() == 3);",
          "    assert!(cnt > bytes_mut.remaining());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    bytes_mut.advance(cnt);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(5);",
          "    bytes_mut.resize(3, 0); // Set length to 3, remaining should be 3",
          "    let cnt = bytes_mut.capacity() + 1; // Exceeds capacity",
          "",
          "    unsafe {",
          "        bytes_mut.advance(cnt);",
          "    }",
          "    assert!(bytes_mut.remaining() == 3);",
          "    assert!(cnt > bytes_mut.remaining());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    bytes_mut.advance(cnt);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]