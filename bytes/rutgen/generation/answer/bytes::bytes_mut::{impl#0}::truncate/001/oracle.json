[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    buf.truncate(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.is_empty());",
          "    buf.truncate(10);",
          "    assert_eq!(buf.len(), 0);",
          "    buf.truncate(5);",
          "    assert_eq!(buf.len(), 0);",
          "    buf.truncate(10);",
          "    assert_eq!(buf.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    buf.truncate(0);",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(buf.is_empty());",
          "    buf.truncate(10);",
          "    assert_eq!(buf.len(), 0);",
          "    buf.truncate(5);",
          "    assert_eq!(buf.len(), 0);",
          "    buf.truncate(10);",
          "    assert_eq!(buf.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    buf.truncate(10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 10);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(!buf.is_empty());",
          "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    buf.truncate(10);",
          "    assert_eq!(buf.len(), 10);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert!(!buf.is_empty());",
          "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    buf.truncate(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(10, 0);",
          "    buf.truncate(5);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert_eq!(buf.as_slice(), &[0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]