[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty: Vec<u8> = vec![];",
          "    let bytes: Bytes = Bytes::from_iter(empty);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len, 0);",
          "    assert!(bytes.ptr.is_null());",
          "    assert_eq!(bytes.data.load(Ordering::Relaxed), ptr::null_mut());",
          "    assert_eq!(bytes.vtable, STATIC_VTABLE);"
        ],
        "code": [
          "{",
          "    let empty: Vec<u8> = vec![];",
          "    let bytes: Bytes = Bytes::from_iter(empty);",
          "    assert_eq!(bytes.len, 0);",
          "    assert!(bytes.ptr.is_null());",
          "    assert_eq!(bytes.data.load(Ordering::Relaxed), ptr::null_mut());",
          "    assert_eq!(bytes.vtable, STATIC_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let single_item: Vec<u8> = vec![42];",
          "    let bytes: Bytes = Bytes::from_iter(single_item);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len, 1);",
          "    assert_eq!(unsafe { *bytes.ptr }, 42);",
          "    assert!(unsafe { bytes.vtable.is_unique(&bytes.data) });"
        ],
        "code": [
          "{",
          "    let single_item: Vec<u8> = vec![42];",
          "    let bytes: Bytes = Bytes::from_iter(single_item);",
          "    assert_eq!(bytes.len, 1);",
          "    assert_eq!(unsafe { *bytes.ptr }, 42);",
          "    assert!(unsafe { bytes.vtable.is_unique(&bytes.data) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let multiple_items: Vec<u8> = (0..10).map(|x| x as u8).collect();",
          "    let bytes: Bytes = Bytes::from_iter(multiple_items);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len, 10);",
          "    assert_eq!(unsafe { ptr::slice_from_raw_parts(bytes.ptr, bytes.len) }, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    assert!(bytes.vtable.is_unique(&bytes.data));",
          "    assert_eq!(bytes.into_vec(), multiple_items);",
          "    assert!(unsafe { bytes.data.load(Ordering::SeqCst).is_null() });"
        ],
        "code": [
          "{",
          "    let multiple_items: Vec<u8> = (0..10).map(|x| x as u8).collect();",
          "    let bytes: Bytes = Bytes::from_iter(multiple_items);",
          "    assert_eq!(bytes.len, 10);",
          "    assert_eq!(unsafe { ptr::slice_from_raw_parts(bytes.ptr, bytes.len) }, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
          "    assert!(bytes.vtable.is_unique(&bytes.data));",
          "    assert_eq!(bytes.into_vec(), multiple_items);",
          "    assert!(unsafe { bytes.data.load(Ordering::SeqCst).is_null() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let min_items: Vec<u8> = (0..1).map(|x| x as u8).collect();",
          "    let bytes: Bytes = Bytes::from_iter(min_items);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len, 1);",
          "    assert_eq!(unsafe { *bytes.ptr }, 0);",
          "    assert!(bytes.data.load(Ordering::SeqCst).is_null());",
          "    assert!(bytes.vtable.is_unique(&bytes.data));",
          "    assert_eq!(bytes.into_vec(), min_items);"
        ],
        "code": [
          "{",
          "    let min_items: Vec<u8> = (0..1).map(|x| x as u8).collect();",
          "    let bytes: Bytes = Bytes::from_iter(min_items);",
          "    assert_eq!(bytes.len, 1);",
          "    assert_eq!(unsafe { *bytes.ptr }, 0);",
          "    assert!(bytes.data.load(Ordering::SeqCst).is_null());",
          "    assert!(bytes.vtable.is_unique(&bytes.data));",
          "    assert_eq!(bytes.into_vec(), min_items);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_items: Vec<u8> = (0..1000).map(|x| (x % 256) as u8).collect();",
          "    let bytes: Bytes = Bytes::from_iter(max_items);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len, 1000);",
          "    assert_eq!(bytes.ptr as *const u8, max_items.as_ptr());",
          "    let vec_from_bytes: Vec<u8> = unsafe { (bytes.vtable.into_vec)(&bytes.data, bytes.ptr, bytes.len) };",
          "    assert_eq!(vec_from_bytes, max_items);"
        ],
        "code": [
          "{",
          "    let max_items: Vec<u8> = (0..1000).map(|x| (x % 256) as u8).collect();",
          "    let bytes: Bytes = Bytes::from_iter(max_items);",
          "    assert_eq!(bytes.len, 1000);",
          "    assert_eq!(bytes.ptr as *const u8, max_items.as_ptr());",
          "    let vec_from_bytes: Vec<u8> = unsafe { (bytes.vtable.into_vec)(&bytes.data, bytes.ptr, bytes.len) };",
          "    assert_eq!(vec_from_bytes, max_items);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let full_range: Vec<u8> = (0..255).collect();",
          "    let bytes: Bytes = Bytes::from_iter(full_range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len, 255);",
          "    assert_eq!(unsafe { slice::from_raw_parts(bytes.ptr, bytes.len) }, &full_range[..]);",
          "    assert_eq!(bytes.data.load(Ordering::SeqCst), std::ptr::null_mut());",
          "    assert_eq!(bytes.vtable, &STATIC_VTABLE);",
          "    assert!(unsafe { (STATIC_VTABLE.is_unique)(&bytes.data) });",
          "    assert_eq!(mem::size_of::<Bytes>(), 24);"
        ],
        "code": [
          "{",
          "    let full_range: Vec<u8> = (0..255).collect();",
          "    let bytes: Bytes = Bytes::from_iter(full_range);",
          "    assert_eq!(bytes.len, 255);",
          "    assert_eq!(unsafe { slice::from_raw_parts(bytes.ptr, bytes.len) }, &full_range[..]);",
          "    assert_eq!(bytes.data.load(Ordering::SeqCst), std::ptr::null_mut());",
          "    assert_eq!(bytes.vtable, &STATIC_VTABLE);",
          "    assert!(unsafe { (STATIC_VTABLE.is_unique)(&bytes.data) });",
          "    assert_eq!(mem::size_of::<Bytes>(), 24);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]