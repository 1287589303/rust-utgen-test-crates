[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01u8; 8][..];",
          "    buf.try_get_int(1).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(1_i64), buf.try_get_int(1));",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(8); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01u8; 8][..];",
          "    buf.try_get_int(1).unwrap();",
          "    assert_eq!(Ok(1_i64), buf.try_get_int(1));",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(8); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x00000201_i64), buf.try_get_int(2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(Ok(0x00000201_i64), buf.try_get_int(2));",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x00000201_i64), buf.try_get_int(2));",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(Ok(0x00000201_i64), buf.try_get_int(2));",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x0000030201_i64), buf.try_get_int(3));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0000030201_i64), buf.try_get_int(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 5}), buf.try_get_int(4));",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 8}), buf.try_get_int(5));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(Ok(0x0000000000000001_i64), buf.try_get_int(1));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(6, buf.remaining());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int(10); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x0000030201_i64), buf.try_get_int(3));",
          "    assert_eq!(Ok(0x0000030201_i64), buf.try_get_int(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 5}), buf.try_get_int(4));",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 8}), buf.try_get_int(5));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(Ok(0x0000000000000001_i64), buf.try_get_int(1));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(6, buf.remaining());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "    assert!(panic::catch_unwind(|| { buf.try_get_int(10); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x00000004030201_i64), buf.try_get_int(4));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x00000004030201_i64), buf.try_get_int(4));",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_int(8));",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf2 = &mut [0x01, 0x02, 0x03, 0x04][..];",
          "    assert_eq!(Ok(0x00000003020100_i64), buf2.try_get_int(3));",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 1 }), buf2.try_get_int(5));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 7, available: 4 }), buf.try_get_int(7));",
          "    let mut buf3 = &mut [0x00; 8][..];",
          "    assert_eq!(Ok(0x0000000000000000_i64), buf3.try_get_int(8));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf3.try_get_int(9));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x00000004030201_i64), buf.try_get_int(4));",
          "    assert_eq!(Ok(0x00000004030201_i64), buf.try_get_int(4));",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_int(8));",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf2 = &mut [0x01, 0x02, 0x03, 0x04][..];",
          "    assert_eq!(Ok(0x00000003020100_i64), buf2.try_get_int(3));",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 1 }), buf2.try_get_int(5));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 7, available: 4 }), buf.try_get_int(7));",
          "    let mut buf3 = &mut [0x00; 8][..];",
          "    assert_eq!(Ok(0x0000000000000000_i64), buf3.try_get_int(8));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf3.try_get_int(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x0000000504030201_i64), buf.try_get_int(5));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0000000504030201_i64), buf.try_get_int(5));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 4}), buf.try_get_int(5));",
          "    panic_does_not_fit(8, 9);",
          "    panic_does_not_fit(8, 10);",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(2, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x0000000504030201_i64), buf.try_get_int(5));",
          "    assert_eq!(Ok(0x0000000504030201_i64), buf.try_get_int(5));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 4}), buf.try_get_int(5));",
          "    panic_does_not_fit(8, 9);",
          "    panic_does_not_fit(8, 10);",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(2, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x000000060504030201_i64), buf.try_get_int(6));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x000000060504030201_i64), buf.try_get_int(6));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x0000000000000001_i64), buf.try_get_int(1));",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_int(2));",
          "    assert_eq!(true, buf.has_remaining());",
          "    buf.advance(2);",
          "    assert_eq!(2, buf.remaining());",
          "    assert_eq!(Ok(0x000000050404_i64), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 3}), buf.try_get_int(8));",
          "    assert_eq!(Ok(0x00000006050403_i64), buf.try_get_int(6));"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00][..];",
          "    assert_eq!(Ok(0x000000060504030201_i64), buf.try_get_int(6));",
          "    assert_eq!(Ok(0x000000060504030201_i64), buf.try_get_int(6));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x0000000000000001_i64), buf.try_get_int(1));",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 1}), buf.try_get_int(2));",
          "    assert_eq!(true, buf.has_remaining());",
          "    buf.advance(2);",
          "    assert_eq!(2, buf.remaining());",
          "    assert_eq!(Ok(0x000000050404_i64), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 3}), buf.try_get_int(8));",
          "    assert_eq!(Ok(0x00000006050403_i64), buf.try_get_int(6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x00][..];",
          "    assert_eq!(Ok(0x00000007060504030201_i64), buf.try_get_int(7));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x00000007060504030201_i64), buf.try_get_int(7));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x0000000000000000_i64), &mut [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00][..].try_get_int(8));",
          "    assert!(panic_does_not_fit(8, 9).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x00][..];",
          "    assert_eq!(Ok(0x00000007060504030201_i64), buf.try_get_int(7));",
          "    assert_eq!(Ok(0x00000007060504030201_i64), buf.try_get_int(7));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok(0x0000000000000000_i64), &mut [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00][..].try_get_int(8));",
          "    assert!(panic_does_not_fit(8, 9).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &mut [0u8; 8][..];",
          "    buf.try_get_int(9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(panic_does_not_fit(8, 9).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0u8; 8][..];",
          "    buf.try_get_int(9);",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(panic_does_not_fit(8, 9).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &mut [0x01, 0x02][..];",
          "    assert_eq!(Err(TryGetError { requested: 3, available: 2 }), buf.try_get_int(3));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok($typ::from_be_bytes(buf)), buf.try_get_int($len_to_read));",
          "    assert!(SIZE.checked_sub($len_to_read).is_some());",
          "    assert!(buf.try_copy_to_slice(&mut buf[slice_at..]).is_ok());"
        ],
        "code": [
          "{",
          "    let mut buf = &mut [0x01, 0x02][..];",
          "    assert_eq!(Err(TryGetError { requested: 3, available: 2 }), buf.try_get_int(3));",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Ok($typ::from_be_bytes(buf)), buf.try_get_int($len_to_read));",
          "    assert!(SIZE.checked_sub($len_to_read).is_some());",
          "    assert!(buf.try_copy_to_slice(&mut buf[slice_at..]).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]