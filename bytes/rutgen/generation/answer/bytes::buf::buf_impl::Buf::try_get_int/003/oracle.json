[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01Hello\"[..];",
          "    let _ = buf.try_get_int(1);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01_i64), buf.try_get_int(1));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 6}), buf.try_get_int(9));",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01Hello\"[..];",
          "    let _ = buf.try_get_int(1);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x01_i64), buf.try_get_int(1));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 6}), buf.try_get_int(9));",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02Hello\"[..];",
          "    let _ = buf.try_get_int(2);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102_i64), buf.try_get_int(2));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02Hello\"[..];",
          "    let _ = buf.try_get_int(2);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x0102_i64), buf.try_get_int(2));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03Hello\"[..];",
          "    let _ = buf.try_get_int(3);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    panic_does_not_fit(8, 9);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03Hello\"[..];",
          "    let _ = buf.try_get_int(3);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    panic_does_not_fit(8, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04Hello\"[..];",
          "    let _ = buf.try_get_int(4);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304_i64), buf.try_get_int(4));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_int(5));",
          "    assert_eq!(4, buf.remaining());",
          "    let buf_underflow = &b\"\\x01\\x02\\x03\"[..];",
          "    let mut buf = buf_underflow;",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), buf.try_get_int(8));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_panics!(buf.try_get_int(9));"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04Hello\"[..];",
          "    let _ = buf.try_get_int(4);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x01020304_i64), buf.try_get_int(4));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 4 }), buf.try_get_int(5));",
          "    assert_eq!(4, buf.remaining());",
          "    let buf_underflow = &b\"\\x01\\x02\\x03\"[..];",
          "    let mut buf = buf_underflow;",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), buf.try_get_int(8));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_panics!(buf.try_get_int(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05Hello\"[..];",
          "    let _ = buf.try_get_int(5);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102030405_i64), buf.try_get_int(5));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 6 }), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    panic_does_not_fit(8, 9);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05Hello\"[..];",
          "    let _ = buf.try_get_int(5);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x0102030405_i64), buf.try_get_int(5));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 6 }), buf.try_get_int(9));",
          "    assert_eq!(3, buf.remaining());",
          "    panic_does_not_fit(8, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06Hello\"[..];",
          "    let _ = buf.try_get_int(6);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203040506_i64), buf.try_get_int(6));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06Hello\"[..];",
          "    let _ = buf.try_get_int(6);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x010203040506_i64), buf.try_get_int(6));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07Hello\"[..];",
          "    let _ = buf.try_get_int(7);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607_i64), buf.try_get_int(7));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(Err(TryGetError{requested: 6, available: 5}), buf.try_get_int(6));",
          "    assert_eq!(Err(TryGetError{requested: 0, available: 8}), buf.try_get_int(0));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07Hello\"[..];",
          "    let _ = buf.try_get_int(7);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x01020304050607_i64), buf.try_get_int(7));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_int(9));",
          "    assert_eq!(Err(TryGetError{requested: 6, available: 5}), buf.try_get_int(6));",
          "    assert_eq!(Err(TryGetError{requested: 0, available: 8}), buf.try_get_int(0));",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08Hello\"[..];",
          "    let _ = buf.try_get_int(8);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_int(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_int(9));",
          "    assert_eq!(0, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(10); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(8); }).is_ok());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08Hello\"[..];",
          "    let _ = buf.try_get_int(8);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Ok(0x0102030405060708_i64), buf.try_get_int(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_int(9));",
          "    assert_eq!(0, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(9); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(10); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_int(8); }).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_int(9);",
          "    let _ = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_int(9));",
          "    assert_eq!(8, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _ = buf.try_get_int(9);",
          "    let _ = buf.remaining();",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_int(9));",
          "    assert_eq!(8, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_int(9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = &b\"\\x01\\x02\\x03 hello\"[..];",
          "    let _ = buf.try_get_int(9); // this should panic",
          "    assert!(std::panic::catch_unwind(|| { let _ = buf.try_get_int(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let _ = buf.try_get_int(9);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_int(4));",
          "    assert_eq!(Ok(0x010203_i64), buf.try_get_int(3));",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = &b\"\\x01\\x02\\x03 hello\"[..];",
          "    let _ = buf.try_get_int(9); // this should panic",
          "    assert!(std::panic::catch_unwind(|| { let _ = buf.try_get_int(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]