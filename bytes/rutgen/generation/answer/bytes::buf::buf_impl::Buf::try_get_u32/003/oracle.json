[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            if self.remaining() < 4 {",
          "                return Err(TryGetError {",
          "                    requested: 4,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let ret = u32::from_be_bytes(self.data[self.pos..self.pos + 4].try_into().unwrap());",
          "            self.pos += 4;",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09\\xA0\\xA1\"[..], pos: 0 };",
          "    assert_eq!(Ok(0x0809A0A1), buf.try_get_u32());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0809A0A1), buf.try_get_u32());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = TestBuf { data: &b\"\\x01\\x02\\x03\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf = TestBuf { data: &b\"\\x00\\x00\\x00\\x01Hello\"[..], pos: 0 };",
          "    assert_eq!(Ok(1), buf.try_get_u32());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = TestBuf { data: &b\"\\xFF\\xFF\\xFF\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "    let mut buf = TestBuf { data: &b\"\\xAB\\xCD\\xEF\\x01\\x02\\x03\\x04\"[..], pos: 0 };",
          "    assert_eq!(Ok(0xABCDEF01), buf.try_get_u32());",
          "    assert_eq!(3, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            if self.remaining() < 4 {",
          "                return Err(TryGetError {",
          "                    requested: 4,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let ret = u32::from_be_bytes(self.data[self.pos..self.pos + 4].try_into().unwrap());",
          "            self.pos += 4;",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x08\\x09\\xA0\\xA1\"[..], pos: 0 };",
          "    assert_eq!(Ok(0x0809A0A1), buf.try_get_u32());",
          "    assert_eq!(Ok(0x0809A0A1), buf.try_get_u32());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = TestBuf { data: &b\"\\x01\\x02\\x03\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf = TestBuf { data: &b\"\\x00\\x00\\x00\\x01Hello\"[..], pos: 0 };",
          "    assert_eq!(Ok(1), buf.try_get_u32());",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf = TestBuf { data: &b\"\\xFF\\xFF\\xFF\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "    let mut buf = TestBuf { data: &b\"\\xAB\\xCD\\xEF\\x01\\x02\\x03\\x04\"[..], pos: 0 };",
          "    assert_eq!(Ok(0xABCDEF01), buf.try_get_u32());",
          "    assert_eq!(3, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            if self.remaining() < 4 {",
          "                return Err(TryGetError {",
          "                    requested: 4,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let ret = u32::from_be_bytes(self.data[self.pos..self.pos + 4].try_into().unwrap());",
          "            self.pos += 4;",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x01\\x02\\x03\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0809A0A1), buf.try_get_u32());",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_valid = TestBuf { data: &b\"\\x08\\x09\\xA0\\xA1 hello\"[..], pos: 0 };",
          "    assert_eq!(Ok(0x0809A0A1), buf_valid.try_get_u32());",
          "    assert_eq!(6, buf_valid.remaining());",
          "    let mut buf_insufficient = TestBuf { data: &b\"\\x01\\x02\\x03\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf_insufficient.try_get_u32());",
          "    assert_eq!(3, buf_insufficient.remaining());",
          "    let mut buf_edge_case = TestBuf { data: &b\"\\x00\\x00\\x00\\x00\"[..], pos: 0 };",
          "    assert_eq!(Ok(0), buf_edge_case.try_get_u32());",
          "    assert_eq!(0, buf_edge_case.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: &'static [u8],",
          "        pos: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.pos",
          "        }",
          "",
          "        fn try_get_u32(&mut self) -> Result<u32, TryGetError> {",
          "            if self.remaining() < 4 {",
          "                return Err(TryGetError {",
          "                    requested: 4,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let ret = u32::from_be_bytes(self.data[self.pos..self.pos + 4].try_into().unwrap());",
          "            self.pos += 4;",
          "            Ok(ret)",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf { data: &b\"\\x01\\x02\\x03\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "    assert_eq!(Ok(0x0809A0A1), buf.try_get_u32());",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf.try_get_u32());",
          "    assert_eq!(3, buf.remaining());",
          "    let mut buf_valid = TestBuf { data: &b\"\\x08\\x09\\xA0\\xA1 hello\"[..], pos: 0 };",
          "    assert_eq!(Ok(0x0809A0A1), buf_valid.try_get_u32());",
          "    assert_eq!(6, buf_valid.remaining());",
          "    let mut buf_insufficient = TestBuf { data: &b\"\\x01\\x02\\x03\"[..], pos: 0 };",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), buf_insufficient.try_get_u32());",
          "    assert_eq!(3, buf_insufficient.remaining());",
          "    let mut buf_edge_case = TestBuf { data: &b\"\\x00\\x00\\x00\\x00\"[..], pos: 0 };",
          "    assert_eq!(Ok(0), buf_edge_case.try_get_u32());",
          "    assert_eq!(0, buf_edge_case.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]