[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BufMutImpl {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for BufMutImpl {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.buf.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::from(&mut self.buf[self.position..])",
          "        }",
          "    }",
          "",
          "    let mut buf = BufMutImpl { buf: vec![0; 16], position: 0 };",
          "    buf.put_u64_ne(0x0102030405060708);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.buf, if cfg!(target_endian = \"big\") { b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\" } else { b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\" });",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 8], position: 0 };",
          "    buf.put_u64_ne(0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(buf.buf, if cfg!(target_endian = \"big\") { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" } else { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" });",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 0], position: 0 };",
          "    let result = std::panic::catch_unwind(|| { buf.put_u64_ne(0x0102030405060708); });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 7], position: 0 };",
          "    let result = std::panic::catch_unwind(|| { buf.put_u64_ne(0x0102030405060708); });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 16], position: 8 };",
          "    buf.put_u64_ne(0x0102030405060708);",
          "    assert_eq!(buf.buf, if cfg!(target_endian = \"big\") { b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\" } else { b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\" });"
        ],
        "code": [
          "{",
          "    struct BufMutImpl {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for BufMutImpl {",
          "        fn remaining_mut(&self) -> usize {",
          "            self.buf.len() - self.position",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            &mut UninitSlice::from(&mut self.buf[self.position..])",
          "        }",
          "    }",
          "",
          "    let mut buf = BufMutImpl { buf: vec![0; 16], position: 0 };",
          "    buf.put_u64_ne(0x0102030405060708);",
          "    assert_eq!(buf.buf, if cfg!(target_endian = \"big\") { b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\" } else { b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\" });",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 8], position: 0 };",
          "    buf.put_u64_ne(0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(buf.buf, if cfg!(target_endian = \"big\") { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" } else { b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" });",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 0], position: 0 };",
          "    let result = std::panic::catch_unwind(|| { buf.put_u64_ne(0x0102030405060708); });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 7], position: 0 };",
          "    let result = std::panic::catch_unwind(|| { buf.put_u64_ne(0x0102030405060708); });",
          "    assert!(result.is_err());",
          "    ",
          "    let mut buf = BufMutImpl { buf: vec![0; 16], position: 8 };",
          "    buf.put_u64_ne(0x0102030405060708);",
          "    assert_eq!(buf.buf, if cfg!(target_endian = \"big\") { b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\" } else { b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\" });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct BufMutImpl {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for BufMutImpl {",
          "        fn remaining_mut(&self) -> usize {",
          "            0 // Insufficient capacity",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, _cnt: usize) {",
          "            // Do nothing",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            // Will not be used as it should panic",
          "            &mut UninitSlice::from(&mut [])",
          "        }",
          "    }",
          "",
          "    let mut buf = BufMutImpl { buf: vec![], position: 0 };",
          "    buf.put_u64_ne(0x0102030405060708);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| buf.put_u64_ne(0x0102030405060708)).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct BufMutImpl {",
          "        buf: Vec<u8>,",
          "        position: usize,",
          "    }",
          "    ",
          "    unsafe impl BufMut for BufMutImpl {",
          "        fn remaining_mut(&self) -> usize {",
          "            0 // Insufficient capacity",
          "        }",
          "        ",
          "        unsafe fn advance_mut(&mut self, _cnt: usize) {",
          "            // Do nothing",
          "        }",
          "",
          "        fn has_remaining_mut(&self) -> bool {",
          "            self.remaining_mut() > 0",
          "        }",
          "",
          "        fn chunk_mut(&mut self) -> &mut UninitSlice {",
          "            // Will not be used as it should panic",
          "            &mut UninitSlice::from(&mut [])",
          "        }",
          "    }",
          "",
          "    let mut buf = BufMutImpl { buf: vec![], position: 0 };",
          "    buf.put_u64_ne(0x0102030405060708);",
          "    assert_eq!(std::panic::catch_unwind(|| buf.put_u64_ne(0x0102030405060708)).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]