[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[];",
          "    bytes.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[];",
          "    bytes.put_slice(src);",
          "    assert_eq!(bytes.len(), 0);",
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert!(bytes.is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[];",
          "    bytes.put_slice(src);",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[];",
          "    bytes.put_slice(src);",
          "    assert_eq!(bytes.len(), 0);",
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert!(bytes.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // length equals capacity",
          "    bytes.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 10);",
          "    assert!(bytes.is_empty() == false);",
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);",
          "    assert_eq!(bytes.spare_capacity_mut().len(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // length equals capacity",
          "    bytes.put_slice(src);",
          "    assert_eq!(bytes.len(), 10);",
          "    assert!(bytes.is_empty() == false);",
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);",
          "    assert_eq!(bytes.spare_capacity_mut().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // length exceeds capacity",
          "    bytes.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 11);",
          "    assert_eq!(bytes.capacity(), 20);",
          "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);",
          "    assert!(!bytes.is_empty());",
          "    assert!(bytes.remaining_mut() >= 0);",
          "    assert!(bytes.try_reclaim(5));"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // length exceeds capacity",
          "    bytes.put_slice(src);",
          "    assert_eq!(bytes.len(), 11);",
          "    assert_eq!(bytes.capacity(), 20);",
          "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);",
          "    assert!(!bytes.is_empty());",
          "    assert!(bytes.remaining_mut() >= 0);",
          "    assert!(bytes.try_reclaim(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5]; // length is less than capacity",
          "    bytes.put_slice(src);",
          "}"
        ],
        "oracle": [
          "    let bytes = BytesMut::with_capacity(10);",
          "    assert_eq!(bytes.len(), 5);",
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert!(!bytes.is_empty());",
          "    let src: &[u8] = &[1, 2, 3, 4, 5];",
          "    bytes.put_slice(src);",
          "    assert_eq!(bytes.len(), 10);",
          "    assert_eq!(bytes.as_slice()[5..10], &[1, 2, 3, 4, 5]);",
          "    assert!(bytes.remainng_mut() >= 0);"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5]; // length is less than capacity",
          "    bytes.put_slice(src);",
          "    let bytes = BytesMut::with_capacity(10);",
          "    assert_eq!(bytes.len(), 5);",
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert_eq!(bytes.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert!(!bytes.is_empty());",
          "    let src: &[u8] = &[1, 2, 3, 4, 5];",
          "    bytes.put_slice(src);",
          "    assert_eq!(bytes.len(), 10);",
          "    assert_eq!(bytes.as_slice()[5..10], &[1, 2, 3, 4, 5]);",
          "    assert!(bytes.remainng_mut() >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]