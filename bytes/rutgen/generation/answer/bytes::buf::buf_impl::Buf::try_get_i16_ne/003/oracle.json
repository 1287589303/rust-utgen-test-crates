[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\";",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(0x0001_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf_short: &[u8] = b\"\\x01\";",
          "    let result_short = buf_short.try_get_i16_ne();",
          "    let remaining_short = buf_short.remaining();",
          "    assert_eq!(result_short, Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(remaining_short, 1);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\";",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0001_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf_short: &[u8] = b\"\\x01\";",
          "    let result_short = buf_short.try_get_i16_ne();",
          "    let remaining_short = buf_short.remaining();",
          "    assert_eq!(result_short, Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(remaining_short, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\"; // less than 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(remaining, 1);",
          "    ",
          "    let mut buf: &[u8] = b\"\\x01\\x02\"; // exactly 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0001_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\"; // more than 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0001_i16));",
          "    assert_eq!(remaining, 2);",
          "    ",
          "    let mut buf: &[u8] = b\"\\x00\\x01\"; // testing exact boundary condition",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0000_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf: &[u8] = b\"\\xFF\\xFF\"; // testing negative value",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(-1_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\xFF\"; // less than 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(remaining, 1);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\"; // less than 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(remaining, 1);",
          "    ",
          "    let mut buf: &[u8] = b\"\\x01\\x02\"; // exactly 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0001_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\"; // more than 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0001_i16));",
          "    assert_eq!(remaining, 2);",
          "    ",
          "    let mut buf: &[u8] = b\"\\x00\\x01\"; // testing exact boundary condition",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(0x0000_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf: &[u8] = b\"\\xFF\\xFF\"; // testing negative value",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Ok(-1_i16));",
          "    assert_eq!(remaining, 0);",
          "    ",
          "    let mut buf: &[u8] = &b\"\\xFF\"; // less than 2 bytes",
          "    let result = buf.try_get_i16_ne();",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, Err(TryGetError { requested: 2, available: 1 }));",
          "    assert_eq!(remaining, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]