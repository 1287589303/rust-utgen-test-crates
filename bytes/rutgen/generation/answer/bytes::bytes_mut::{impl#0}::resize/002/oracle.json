[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(3, 0x1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    buf.resize(5, 0x2);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x2, 0x2]);",
          "    buf.resize(3, 0x3);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    buf.resize(1, 0x4);",
          "    assert_eq!(buf.len(), 1);",
          "    assert_eq!(&buf[..], &[0x1]);",
          "    buf.resize(0, 0x5);",
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.is_empty());",
          "    buf.resize(5, 0x6);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x6, 0x6]);",
          "    buf.resize(3, 0x7);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6]);",
          "    buf.resize(10, 0x8);",
          "    assert_eq!(buf.len(), 10);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(3, 0x1);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    buf.resize(5, 0x2);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x2, 0x2]);",
          "    buf.resize(3, 0x3);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    buf.resize(1, 0x4);",
          "    assert_eq!(buf.len(), 1);",
          "    assert_eq!(&buf[..], &[0x1]);",
          "    buf.resize(0, 0x5);",
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.is_empty());",
          "    buf.resize(5, 0x6);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x6, 0x6]);",
          "    buf.resize(3, 0x7);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6]);",
          "    buf.resize(10, 0x8);",
          "    assert_eq!(buf.len(), 10);",
          "    assert_eq!(buf.capacity(), 10);",
          "    assert_eq!(&buf[..], &[0x6, 0x6, 0x6, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(4, 0x0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0]);",
          "    buf.resize(5, 0x1);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0, 0x1]);",
          "    buf.resize(3, 0x2);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(4, 0x0);",
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0]);",
          "    buf.resize(5, 0x1);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x0, 0x1]);",
          "    buf.resize(3, 0x2);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(6, 0xFF);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 6);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.len() > 5);",
          "    assert!(buf.capacity() >= buf.len());",
          "    assert!(buf.spare_capacity_mut().len() == 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(6, 0xFF);",
          "    assert_eq!(buf.len(), 6);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.len() > 5);",
          "    assert!(buf.capacity() >= buf.len());",
          "    assert!(buf.spare_capacity_mut().len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]