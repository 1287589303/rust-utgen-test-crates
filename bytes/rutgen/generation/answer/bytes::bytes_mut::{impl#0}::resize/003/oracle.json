[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0x1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    ",
          "    buf.resize(5, 0x2);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    ",
          "    buf.resize(0, 0x2);",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(&buf[..], &[]);",
          "    ",
          "    buf.resize(3, 0x3);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3]);",
          "    ",
          "    buf.resize(5, 0x4);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3, 0x4, 0x4]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0x1);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    ",
          "    buf.resize(5, 0x2);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    ",
          "    buf.resize(0, 0x2);",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(&buf[..], &[]);",
          "    ",
          "    buf.resize(3, 0x3);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3]);",
          "    ",
          "    buf.resize(5, 0x4);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x3, 0x3, 0x3, 0x4, 0x4]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(3, 0x1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    ",
          "    buf.resize(2, 0x2);",
          "    assert_eq!(buf.len(), 2);",
          "    assert_eq!(&buf[..], &[0x1, 0x1]);",
          "    ",
          "    buf.resize(4, 0x3);",
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);",
          "    ",
          "    buf.resize(5, 0x4);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3, 0x4]);",
          "    ",
          "    buf.resize(0, 0x0);",
          "    assert_eq!(buf.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(3, 0x1);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    ",
          "    buf.resize(2, 0x2);",
          "    assert_eq!(buf.len(), 2);",
          "    assert_eq!(&buf[..], &[0x1, 0x1]);",
          "    ",
          "    buf.resize(4, 0x3);",
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);",
          "    ",
          "    buf.resize(5, 0x4);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3, 0x4]);",
          "    ",
          "    buf.resize(0, 0x0);",
          "    assert_eq!(buf.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(3, 0x1);",
          "    buf.resize(3, 0x2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    buf.resize(3, 0x2);",
          "    assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(3, 0x1);",
          "    buf.resize(3, 0x2);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);",
          "    buf.resize(3, 0x2);",
          "    assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0x1);",
          "    buf.resize(3, 0x2);",
          "}"
        ],
        "oracle": [
          "    buf.resize(5, 0x1); assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    buf.resize(3, 0x2); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
          "    buf.resize(0, 0x2); assert_eq!(&buf[..], &[]);",
          "    buf.resize(7, 0x3); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3]);",
          "    buf.resize(3, 0x4); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
          "    buf.resize(5, 0x5); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x5, 0x5]);",
          "    buf.resize(5, 0x0); assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x5, 0x5]);",
          "    buf.resize(3, 0x1); assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0x1);",
          "    buf.resize(3, 0x2);",
          "    buf.resize(5, 0x1); assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    buf.resize(3, 0x2); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
          "    buf.resize(0, 0x2); assert_eq!(&buf[..], &[]);",
          "    buf.resize(7, 0x3); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3]);",
          "    buf.resize(3, 0x4); assert_eq!(&buf[..], &[0x2, 0x2, 0x2]);",
          "    buf.resize(5, 0x5); assert_eq!(&buf[..], &[0x2, 0x2, 0x2, 0x5, 0x5]);",
          "    buf.resize(5, 0x0); assert_eq!(&buf[..], &[0x0, 0x0, 0x0, 0x5, 0x5]);",
          "    buf.resize(3, 0x1); assert_eq!(&buf[..], &[0x0, 0x0, 0x0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0x1);",
          "    buf.resize(4, 0x2);",
          "    buf.resize(5, 0x3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    buf.resize(4, 0x2);",
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1]);",
          "    buf.resize(5, 0x3);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x3]);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(5, 0x1);",
          "    buf.resize(4, 0x2);",
          "    buf.resize(5, 0x3);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x1]);",
          "    buf.resize(4, 0x2);",
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1]);",
          "    buf.resize(5, 0x3);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(&buf[..], &[0x1, 0x1, 0x1, 0x1, 0x3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]