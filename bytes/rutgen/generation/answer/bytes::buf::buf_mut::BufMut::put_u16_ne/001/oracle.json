[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(0);",
          "    let n: u16 = 0x0809;",
          "    // This should panic because of insufficient capacity",
          "    let result = std::panic::catch_unwind(|| {",
          "        buf.put_slice(&n.to_ne_bytes())",
          "    });",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    buf.remaining_mut() == 0;",
          "    std::panic::catch_unwind(|| buf.put_u16_ne(0x0809)).is_err();",
          "    buf.remaining_mut() == 2;",
          "    buf.put_slice(&[0x08, 0x09]);",
          "    buf.data == vec![0x08, 0x09];",
          "    buf.put_u16_ne(0x1234);",
          "    buf.data == vec![0x08, 0x09, 0x12, 0x34];",
          "    buf.remaining_mut() == 0;",
          "    std::panic::catch_unwind(|| buf.put_u16_ne(0xABCD)).is_err();"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(0);",
          "    let n: u16 = 0x0809;",
          "    // This should panic because of insufficient capacity",
          "    let result = std::panic::catch_unwind(|| {",
          "        buf.put_slice(&n.to_ne_bytes())",
          "    });",
          "    assert!(result.is_err());",
          "    buf.remaining_mut() == 0;",
          "    std::panic::catch_unwind(|| buf.put_u16_ne(0x0809)).is_err();",
          "    buf.remaining_mut() == 2;",
          "    buf.put_slice(&[0x08, 0x09]);",
          "    buf.data == vec![0x08, 0x09];",
          "    buf.put_u16_ne(0x1234);",
          "    buf.data == vec![0x08, 0x09, 0x12, 0x34];",
          "    buf.remaining_mut() == 0;",
          "    std::panic::catch_unwind(|| buf.put_u16_ne(0xABCD)).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(1);",
          "    let n: u16 = 0x0809;",
          "    // This should panic because of insufficient capacity",
          "    let result = std::panic::catch_unwind(|| {",
          "        buf.put_slice(&n.to_ne_bytes())",
          "    });",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16_ne(0x0809);",
          "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { vec![0x08, 0x09] } else { vec![0x09, 0x08] });",
          "    let mut buf = TestBuf::new(0);",
          "    let result = std::panic::catch_unwind(|| { buf.put_u16_ne(0x0809) });",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(1);",
          "    let n: u16 = 0x0809;",
          "    // This should panic because of insufficient capacity",
          "    let result = std::panic::catch_unwind(|| {",
          "        buf.put_slice(&n.to_ne_bytes())",
          "    });",
          "    assert!(result.is_err());",
          "    assert_eq!(result.is_err(), true);",
          "    let mut buf = TestBuf::new(2);",
          "    buf.put_u16_ne(0x0809);",
          "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { vec![0x08, 0x09] } else { vec![0x09, 0x08] });",
          "    let mut buf = TestBuf::new(0);",
          "    let result = std::panic::catch_unwind(|| { buf.put_u16_ne(0x0809) });",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    let n: u16 = 0x0809;",
          "    buf.put_slice(&n.to_ne_bytes());",
          "}"
        ],
        "oracle": [
          "    let mut buf = TestBuf::new(2);",
          "    let n: u16 = 0x0809;",
          "    buf.put_u16_ne(n);",
          "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { vec![0x08, 0x09] } else { vec![0x09, 0x08] });",
          "    ",
          "    let mut buf_small = TestBuf::new(1);",
          "    let n_small: u16 = 0xFFFF;",
          "    let panic_result = std::panic::catch_unwind(|| { buf_small.put_u16_ne(n_small); });",
          "    assert!(panic_result.is_err());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(2);",
          "    let n: u16 = 0x0809;",
          "    buf.put_slice(&n.to_ne_bytes());",
          "    let mut buf = TestBuf::new(2);",
          "    let n: u16 = 0x0809;",
          "    buf.put_u16_ne(n);",
          "    assert_eq!(buf.data, if cfg!(target_endian = \"big\") { vec![0x08, 0x09] } else { vec![0x09, 0x08] });",
          "    ",
          "    let mut buf_small = TestBuf::new(1);",
          "    let n_small: u16 = 0xFFFF;",
          "    let panic_result = std::panic::catch_unwind(|| { buf_small.put_u16_ne(n_small); });",
          "    assert!(panic_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(10);",
          "    let n: u16 = 0x0809;",
          "    buf.put_slice(&n.to_ne_bytes());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining_mut(), 8);",
          "    assert_eq!(buf.data, vec![0x08, 0x09]);",
          "    let mut buf2 = TestBuf::new(2);",
          "    let result = std::panic::catch_unwind(|| buf2.put_u16_ne(0x0809));",
          "    assert!(result.is_err());",
          "    buf2.advance_mut(2);",
          "    assert_eq!(buf2.remaining_mut(), 0);",
          "    buf2.put_slice(&n.to_ne_bytes());",
          "    assert_eq!(buf2.data, vec![0x08, 0x09]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        capacity: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(capacity: usize) -> Self {",
          "            TestBuf {",
          "                data: Vec::with_capacity(capacity),",
          "                capacity,",
          "            }",
          "        }",
          "",
          "        fn remaining_mut(&self) -> usize {",
          "            self.capacity - self.data.len()",
          "        }",
          "",
          "        unsafe fn advance_mut(&mut self, cnt: usize) {",
          "            self.data.resize(self.data.len() + cnt, 0);",
          "        }",
          "",
          "        fn put_slice(&mut self, src: &[u8]) {",
          "            if self.remaining_mut() < src.len() {",
          "                panic!(\"not enough space\");",
          "            }",
          "            self.data.extend_from_slice(src);",
          "            unsafe { self.advance_mut(src.len()) };",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf::new(10);",
          "    let n: u16 = 0x0809;",
          "    buf.put_slice(&n.to_ne_bytes());",
          "    assert_eq!(buf.remaining_mut(), 8);",
          "    assert_eq!(buf.data, vec![0x08, 0x09]);",
          "    let mut buf2 = TestBuf::new(2);",
          "    let result = std::panic::catch_unwind(|| buf2.put_u16_ne(0x0809));",
          "    assert!(result.is_err());",
          "    buf2.advance_mut(2);",
          "    assert_eq!(buf2.remaining_mut(), 0);",
          "    buf2.put_slice(&n.to_ne_bytes());",
          "    assert_eq!(buf2.data, vec![0x08, 0x09]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]