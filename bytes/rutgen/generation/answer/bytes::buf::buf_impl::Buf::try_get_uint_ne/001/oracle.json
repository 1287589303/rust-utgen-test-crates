[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _ = buf.try_get_uint_ne(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 5 }), buf.try_get_uint_ne(4));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 5 }), buf.try_get_uint_ne(9));",
          "    assert_eq!(buf.remaining(), 5);",
          "    buf.advance(3);",
          "    assert_eq!(Ok(0x040506_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(0, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _ = buf.try_get_uint_ne(3);",
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(5, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 5 }), buf.try_get_uint_ne(4));",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 5 }), buf.try_get_uint_ne(9));",
          "    assert_eq!(buf.remaining(), 5);",
          "    buf.advance(3);",
          "    assert_eq!(Ok(0x040506_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\";",
          "    let _ = buf.try_get_uint_ne(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x080706_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 5}), buf.try_get_uint_ne(4));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_uint_ne(9));",
          "    assert_eq!(6, buf.remaining());",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_ne(9)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\";",
          "    let _ = buf.try_get_uint_ne(3);",
          "    assert_eq!(Ok(0x080706_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 5}), buf.try_get_uint_ne(4));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_uint_ne(9));",
          "    assert_eq!(6, buf.remaining());",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_ne(9)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\";",
          "    let _ = buf.try_get_uint_ne(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_ne(4));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\";",
          "    let _ = buf.try_get_uint_ne(4);",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint_ne(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _ = buf.try_get_uint_ne(9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_uint_ne(9));"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _ = buf.try_get_uint_ne(9);",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_uint_ne(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _ = buf.try_get_uint_ne(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_ne(4));",
          "    assert_eq!(Ok(0x05060708_u64), buf.try_get_uint_ne(4));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_uint_ne(9));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 4}), buf.try_get_uint_ne(8));",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let _ = buf.try_get_uint_ne(8);",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint_ne(4));",
          "    assert_eq!(Ok(0x05060708_u64), buf.try_get_uint_ne(4));",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 8}), buf.try_get_uint_ne(9));",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 4}), buf.try_get_uint_ne(8));",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x00\\x01\\x02\\x03\\x04\";",
          "    let _ = buf.try_get_uint_ne(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x000102_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 5}), buf.try_get_uint_ne(4));",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf: &[u8] = b\"\\x00\\x01\\x02\\x03\";",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 4}), buf.try_get_uint_ne(9));",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_ne(9)).is_err());",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_ne(10)).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x00\\x01\\x02\\x03\\x04\";",
          "    let _ = buf.try_get_uint_ne(3);",
          "    assert_eq!(Ok(0x000102_u64), buf.try_get_uint_ne(3));",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 5}), buf.try_get_uint_ne(4));",
          "    assert_eq!(6, buf.remaining());",
          "    let mut buf: &[u8] = b\"\\x00\\x01\\x02\\x03\";",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 4}), buf.try_get_uint_ne(9));",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_ne(9)).is_err());",
          "    assert!(panic::catch_unwind(|| buf.try_get_uint_ne(10)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]