[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5); // initial capacity is less than the extend length",
          "    buf.extend_from_slice(b\"abcde\"); // extend with length greater than capacity",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.capacity() > 5);",
          "    assert_eq!(&buf[..], b\"abcde\");",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.spare_capacity_mut().len() > 0);",
          "    assert!(buf.remaining_mut() > 0);",
          "    assert!(buf.try_reclaim(1) == true);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5); // initial capacity is less than the extend length",
          "    buf.extend_from_slice(b\"abcde\"); // extend with length greater than capacity",
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.capacity() > 5);",
          "    assert_eq!(&buf[..], b\"abcde\");",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.spare_capacity_mut().len() > 0);",
          "    assert!(buf.remaining_mut() > 0);",
          "    assert!(buf.try_reclaim(1) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5); // initial capacity",
          "    buf.extend_from_slice(b\"abc\"); // fill part of the capacity",
          "    buf.extend_from_slice(b\"de\"); // now extending to hit the exact capacity",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.capacity() > 5);",
          "    assert_eq!(&buf[..], b\"abcde\");",
          "    assert!(buf.spare_capacity_mut().len() < 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5); // initial capacity",
          "    buf.extend_from_slice(b\"abc\"); // fill part of the capacity",
          "    buf.extend_from_slice(b\"de\"); // now extending to hit the exact capacity",
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.capacity() > 5);",
          "    assert_eq!(&buf[..], b\"abcde\");",
          "    assert!(buf.spare_capacity_mut().len() < 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::new(); // Starts with 0 capacity",
          "    buf.extend_from_slice(b\"hello\"); // Extend with a length greater than initial capacity",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.capacity() > 0);",
          "    assert_eq!(&buf[..], b\"hello\");",
          "    assert!(buf.spare_capacity_mut().len() > 0);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::new(); // Starts with 0 capacity",
          "    buf.extend_from_slice(b\"hello\"); // Extend with a length greater than initial capacity",
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.capacity() > 0);",
          "    assert_eq!(&buf[..], b\"hello\");",
          "    assert!(buf.spare_capacity_mut().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]