[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(6);",
          "    buf.resize(6, 0);",
          "    buf.extend_from_slice(b\"abc\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 6);",
          "    assert_eq!(buf.as_slice(), b\"abc\\0\\0\\0\");",
          "    assert_eq!(buf.capacity(), 6);",
          "    assert!(!buf.is_empty());",
          "    assert_eq!(buf.spare_capacity_mut().len(), 3);",
          "    assert!(buf.spare_capacity_mut().iter().all(|&x| x == MaybeUninit::new(0)));"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(6);",
          "    buf.resize(6, 0);",
          "    buf.extend_from_slice(b\"abc\");",
          "    assert_eq!(buf.len(), 6);",
          "    assert_eq!(buf.as_slice(), b\"abc\\0\\0\\0\");",
          "    assert_eq!(buf.capacity(), 6);",
          "    assert!(!buf.is_empty());",
          "    assert_eq!(buf.spare_capacity_mut().len(), 3);",
          "    assert!(buf.spare_capacity_mut().iter().all(|&x| x == MaybeUninit::new(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(4, 0);",
          "    buf.extend_from_slice(b\"abcd\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 8);",
          "    assert_eq!(buf.as_slice(), b\"abcd\\x00\\x00\");"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(10);",
          "    buf.resize(4, 0);",
          "    buf.extend_from_slice(b\"abcd\");",
          "    assert_eq!(buf.len(), 8);",
          "    assert_eq!(buf.as_slice(), b\"abcd\\x00\\x00\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(2, 0);",
          "    buf.extend_from_slice(b\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 2);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], b\"\\x00\\x00\");",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.remaining_mut() == 3);",
          "    assert!(buf.spare_capacity_mut().len() == 3);",
          "    assert!(buf.try_reclaim(3) == true);",
          "    assert!(buf.len() == 2);",
          "    assert!(buf.capacity() == 5);",
          "    assert!(buf.remaining_mut() == 3);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(5);",
          "    buf.resize(2, 0);",
          "    buf.extend_from_slice(b\"\");",
          "    assert_eq!(buf.len(), 2);",
          "    assert_eq!(buf.capacity(), 5);",
          "    assert_eq!(&buf[..], b\"\\x00\\x00\");",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.remaining_mut() == 3);",
          "    assert!(buf.spare_capacity_mut().len() == 3);",
          "    assert!(buf.try_reclaim(3) == true);",
          "    assert!(buf.len() == 2);",
          "    assert!(buf.capacity() == 5);",
          "    assert!(buf.remaining_mut() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = BytesMut::with_capacity(50);",
          "    buf.resize(20, 0);",
          "    buf.extend_from_slice(b\"123456\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 26);",
          "    assert_eq!(buf.capacity(), 50);",
          "    assert_eq!(&buf[..], b\"123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\");",
          "    assert!(buf.spare_capacity_mut().len() >= 24);"
        ],
        "code": [
          "{",
          "    let mut buf = BytesMut::with_capacity(50);",
          "    buf.resize(20, 0);",
          "    buf.extend_from_slice(b\"123456\");",
          "    assert_eq!(buf.len(), 26);",
          "    assert_eq!(buf.capacity(), 50);",
          "    assert_eq!(&buf[..], b\"123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\");",
          "    assert!(buf.spare_capacity_mut().len() >= 24);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]