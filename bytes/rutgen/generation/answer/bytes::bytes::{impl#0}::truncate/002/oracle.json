[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::from_static(&b\"hello world\"[..]);",
          "    let len = 5; // len is less than buf.len()",
          "    buf.vtable = &PROMOTABLE_ODD_VTABLE; // Setting vtable to PROMOTABLE_ODD_VTABLE",
          "    buf.truncate(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.as_slice(), b\"hello\"[..]);",
          "    assert!(!buf.is_empty());",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert_eq!(buf.ptr, unsafe { buf.ptr.add(0) });"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::from_static(&b\"hello world\"[..]);",
          "    let len = 5; // len is less than buf.len()",
          "    buf.vtable = &PROMOTABLE_ODD_VTABLE; // Setting vtable to PROMOTABLE_ODD_VTABLE",
          "    buf.truncate(len);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.as_slice(), b\"hello\"[..]);",
          "    assert!(!buf.is_empty());",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert_eq!(buf.ptr, unsafe { buf.ptr.add(0) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::from_static(&b\"hello universe\"[..]);",
          "    let len = 6; // len is less than buf.len()",
          "    buf.vtable = &PROMOTABLE_ODD_VTABLE; // Setting vtable to PROMOTABLE_ODD_VTABLE",
          "    buf.truncate(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 6);",
          "    assert_eq!(buf.as_slice(), b\"hello u\"[..]);",
          "    assert!(buf.is_unique());"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::from_static(&b\"hello universe\"[..]);",
          "    let len = 6; // len is less than buf.len()",
          "    buf.vtable = &PROMOTABLE_ODD_VTABLE; // Setting vtable to PROMOTABLE_ODD_VTABLE",
          "    buf.truncate(len);",
          "    assert_eq!(buf.len(), 6);",
          "    assert_eq!(buf.as_slice(), b\"hello u\"[..]);",
          "    assert!(buf.is_unique());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::from_static(&b\"goodbye\"[..]);",
          "    let len = 3; // len is less than buf.len()",
          "    buf.vtable = &PROMOTABLE_ODD_VTABLE; // Setting vtable to PROMOTABLE_ODD_VTABLE",
          "    buf.truncate(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.as_slice(), b\"goo\"[..]);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable == &PROMOTABLE_ODD_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::from_static(&b\"goodbye\"[..]);",
          "    let len = 3; // len is less than buf.len()",
          "    buf.vtable = &PROMOTABLE_ODD_VTABLE; // Setting vtable to PROMOTABLE_ODD_VTABLE",
          "    buf.truncate(len);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.as_slice(), b\"goo\"[..]);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable == &PROMOTABLE_ODD_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]