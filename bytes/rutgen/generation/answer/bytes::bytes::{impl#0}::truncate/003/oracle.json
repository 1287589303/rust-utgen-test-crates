[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::from_static(b\"hello world\");",
          "    let len = 5;",
          "    buf.truncate(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.as_slice(), b\"hello\");",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::from_static(b\"hello world\");",
          "    let len = 5;",
          "    buf.truncate(len);",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.as_slice(), b\"hello\");",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::from_static(b\"hello world\");",
          "    let len = 1;",
          "    buf.truncate(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 1);",
          "    assert_eq!(slice::from_raw_parts(buf.ptr, buf.len()), b\"h\"[..]);",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::from_static(b\"hello world\");",
          "    let len = 1;",
          "    buf.truncate(len);",
          "    assert_eq!(buf.len(), 1);",
          "    assert_eq!(slice::from_raw_parts(buf.ptr, buf.len()), b\"h\"[..]);",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::from_static(b\"hello world\");",
          "    let len = 4;",
          "    buf.truncate(len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(buf.as_slice(), b\"hell\");",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::from_static(b\"hello world\");",
          "    let len = 4;",
          "    buf.truncate(len);",
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(buf.as_slice(), b\"hell\");",
          "    assert!(buf.is_empty() == false);",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]