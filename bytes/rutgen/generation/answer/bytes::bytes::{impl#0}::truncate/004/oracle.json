[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::copy_from_slice(&[1, 2, 3, 4, 5]);",
          "    buf.truncate(buf.len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert!(buf.is_unique());"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::copy_from_slice(&[1, 2, 3, 4, 5]);",
          "    buf.truncate(buf.len());",
          "    assert_eq!(buf.len(), 5);",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert!(buf.is_unique());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::copy_from_slice(&[1, 2, 3, 4, 5]);",
          "    buf.truncate(10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.is_empty() == false);",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(buf.ptr, NonNull::dangling().as_ptr());",
          "    assert_eq!(buf.data.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert_eq!(buf.vtable, &OWNED_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::copy_from_slice(&[1, 2, 3, 4, 5]);",
          "    buf.truncate(10);",
          "    assert_eq!(buf.len(), 5);",
          "    assert!(buf.is_empty() == false);",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(buf.ptr, NonNull::dangling().as_ptr());",
          "    assert_eq!(buf.data.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert_eq!(buf.vtable, &OWNED_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = Bytes::new();",
          "    buf.truncate(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.is_empty());"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::new();",
          "    buf.truncate(0);",
          "    assert_eq!(buf.len(), 0);",
          "    assert!(buf.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = Bytes::copy_from_slice(&[1, 2, 3]);",
          "    buf.truncate(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert!(buf.len() == 3, \"Expected length to remain 3 after truncating with usize::MAX\");",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3], \"Expected buffer content to remain unchanged after truncating with usize::MAX\");",
          "    assert!(buf.is_unique(), \"Expected buffer to remain unique after truncating with usize::MAX\");"
        ],
        "code": [
          "{",
          "    let mut buf = Bytes::copy_from_slice(&[1, 2, 3]);",
          "    buf.truncate(usize::MAX);",
          "    assert!(buf.len() == 3, \"Expected length to remain 3 after truncating with usize::MAX\");",
          "    assert_eq!(buf.as_slice(), &[1, 2, 3], \"Expected buffer content to remain unchanged after truncating with usize::MAX\");",
          "    assert!(buf.is_unique(), \"Expected buffer to remain unique after truncating with usize::MAX\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]