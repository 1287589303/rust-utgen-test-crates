[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcd\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 1);",
          "    assert_eq!(buf.as_slice(), b\"a\");",
          "    assert_eq!(buf.vtable, &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.is_unique());",
          "    assert_eq!(buf.clone().len(), 1);",
          "    assert!(buf.clone().as_slice() == b\"a\");",
          "    assert!(buf.clone().vtable as *const Vtable == &PROMOTABLE_EVEN_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcd\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(1);",
          "    assert_eq!(buf.len(), 1);",
          "    assert_eq!(buf.as_slice(), b\"a\");",
          "    assert_eq!(buf.vtable, &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.is_unique());",
          "    assert_eq!(buf.clone().len(), 1);",
          "    assert!(buf.clone().as_slice() == b\"a\");",
          "    assert!(buf.clone().vtable as *const Vtable == &PROMOTABLE_EVEN_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcd\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 2);",
          "    assert_eq!(buf.as_slice(), &b\"ab\"[..]);",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcd\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(2);",
          "    assert_eq!(buf.len(), 2);",
          "    assert_eq!(buf.as_slice(), &b\"ab\"[..]);",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcd\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.as_slice(), b\"abc\"[..]);",
          "    assert!(buf.is_unique());",
          "    assert_eq!(buf.vtable as *const Vtable, &PROMOTABLE_EVEN_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcd\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(3);",
          "    assert_eq!(buf.len(), 3);",
          "    assert_eq!(buf.as_slice(), b\"abc\"[..]);",
          "    assert!(buf.is_unique());",
          "    assert_eq!(buf.vtable as *const Vtable, &PROMOTABLE_EVEN_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcdef\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(buf.as_slice(), b\"abcd\");",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);"
        ],
        "code": [
          "{",
          "    let mut buf = {",
          "        let data = b\"abcdef\";",
          "        let bytes = Bytes::from_static(data);",
          "        bytes.clone()",
          "    };",
          "    buf.truncate(4);",
          "    assert_eq!(buf.len(), 4);",
          "    assert_eq!(buf.as_slice(), b\"abcd\");",
          "    assert!(buf.is_unique());",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_EVEN_VTABLE);",
          "    assert!(buf.vtable as *const Vtable != &PROMOTABLE_ODD_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]