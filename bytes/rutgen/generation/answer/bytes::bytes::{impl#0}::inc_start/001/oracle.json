[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::from_static(&[1, 2, 3, 4]);",
          "    let by = bytes.len(); // self.len == by",
          "    unsafe { bytes.inc_start(by) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 0);",
          "    assert_eq!(bytes.ptr, bytes.ptr.wrapping_add(by));",
          "    assert!(bytes.is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::from_static(&[1, 2, 3, 4]);",
          "    let by = bytes.len(); // self.len == by",
          "    unsafe { bytes.inc_start(by) };",
          "    assert_eq!(bytes.len(), 0);",
          "    assert_eq!(bytes.ptr, bytes.ptr.wrapping_add(by));",
          "    assert!(bytes.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes = Bytes::from_static(&[1, 2, 3, 4]);",
          "    let by = 2; // self.len > by",
          "    unsafe { bytes.inc_start(by) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.len(), 2);",
          "    assert_eq!(bytes.as_ptr(), unsafe { bytes.ptr.add(2) });"
        ],
        "code": [
          "{",
          "    let mut bytes = Bytes::from_static(&[1, 2, 3, 4]);",
          "    let by = 2; // self.len > by",
          "    unsafe { bytes.inc_start(by) };",
          "    assert_eq!(bytes.len(), 2);",
          "    assert_eq!(bytes.as_ptr(), unsafe { bytes.ptr.add(2) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]