[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![1, 2, 3, 4, 5];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "}"
        ],
        "oracle": [
          "    let vec = vec![1, 2, 3, 4, 5];",
          "    let shared = Shared { buf: vec.as_ptr() as *mut u8, cap: vec.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let bytes_mut = BytesMut { ptr: NonNull::new(shared.buf).unwrap(), len: vec.len(), cap: vec.capacity(), data: &shared as *const Shared as *mut Shared };",
          "    assert_eq!(bytes_mut.deref_mut(), vec.as_mut_slice());",
          "    let vec2 = vec![10, 20, 30];",
          "    let shared2 = Shared { buf: vec2.as_ptr() as *mut u8, cap: vec2.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let bytes_mut2 = BytesMut { ptr: NonNull::new(shared2.buf).unwrap(), len: vec2.len(), cap: vec2.capacity(), data: &shared2 as *const Shared as *mut Shared };",
          "    assert_eq!(bytes_mut2.deref_mut(), vec2.as_mut_slice());",
          "    let empty_vec: Vec<u8> = Vec::new();",
          "    let empty_shared = Shared { buf: empty_vec.as_ptr() as *mut u8, cap: empty_vec.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let empty_bytes_mut = BytesMut { ptr: NonNull::new(empty_shared.buf).unwrap(), len: empty_vec.len(), cap: empty_vec.capacity(), data: &empty_shared as *const Shared as *mut Shared };",
          "    assert_eq!(empty_bytes_mut.deref_mut(), empty_vec.as_mut_slice());"
        ],
        "code": [
          "{",
          "    let vec = vec![1, 2, 3, 4, 5];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "    let vec = vec![1, 2, 3, 4, 5];",
          "    let shared = Shared { buf: vec.as_ptr() as *mut u8, cap: vec.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let bytes_mut = BytesMut { ptr: NonNull::new(shared.buf).unwrap(), len: vec.len(), cap: vec.capacity(), data: &shared as *const Shared as *mut Shared };",
          "    assert_eq!(bytes_mut.deref_mut(), vec.as_mut_slice());",
          "    let vec2 = vec![10, 20, 30];",
          "    let shared2 = Shared { buf: vec2.as_ptr() as *mut u8, cap: vec2.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let bytes_mut2 = BytesMut { ptr: NonNull::new(shared2.buf).unwrap(), len: vec2.len(), cap: vec2.capacity(), data: &shared2 as *const Shared as *mut Shared };",
          "    assert_eq!(bytes_mut2.deref_mut(), vec2.as_mut_slice());",
          "    let empty_vec: Vec<u8> = Vec::new();",
          "    let empty_shared = Shared { buf: empty_vec.as_ptr() as *mut u8, cap: empty_vec.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let empty_bytes_mut = BytesMut { ptr: NonNull::new(empty_shared.buf).unwrap(), len: empty_vec.len(), cap: empty_vec.capacity(), data: &empty_shared as *const Shared as *mut Shared };",
          "    assert_eq!(empty_bytes_mut.deref_mut(), empty_vec.as_mut_slice());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![0; usize::MAX >> 5];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "}"
        ],
        "oracle": [
          "    let vec = vec![0; usize::MAX >> 5];",
          "    let shared = Shared { buf: vec.as_ptr() as *mut u8, cap: vec.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let bytes_mut = BytesMut { ptr: NonNull::new(shared.buf).unwrap(), len: vec.len(), cap: vec.capacity(), data: &shared as *const Shared as *mut Shared };",
          "    let result = bytes_mut.deref_mut();",
          "    assert_eq!(result.len(), vec.len());",
          "    assert!(result.as_ptr() == vec.as_ptr());",
          "    assert!(result as *mut [u8] == bytes_mut.ptr.as_ptr());"
        ],
        "code": [
          "{",
          "    let vec = vec![0; usize::MAX >> 5];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "    let vec = vec![0; usize::MAX >> 5];",
          "    let shared = Shared { buf: vec.as_ptr() as *mut u8, cap: vec.capacity(), ref_cnt: AtomicUsize::new(1) };",
          "    let bytes_mut = BytesMut { ptr: NonNull::new(shared.buf).unwrap(), len: vec.len(), cap: vec.capacity(), data: &shared as *const Shared as *mut Shared };",
          "    let result = bytes_mut.deref_mut();",
          "    assert_eq!(result.len(), vec.len());",
          "    assert!(result.as_ptr() == vec.as_ptr());",
          "    assert!(result as *mut [u8] == bytes_mut.ptr.as_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![42];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "}"
        ],
        "oracle": [
          "    let vec = vec![42];",
          "    let shared = Shared {",
          "    buf: vec.as_ptr() as *mut u8,",
          "    cap: vec.capacity(),",
          "    ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "    ptr: NonNull::new(shared.buf).unwrap(),",
          "    len: vec.len(),",
          "    cap: vec.capacity(),",
          "    data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    assert_eq!(bytes_mut.deref_mut(), &mut vec[..]);"
        ],
        "code": [
          "{",
          "    let vec = vec![42];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "    let vec = vec![42];",
          "    let shared = Shared {",
          "    buf: vec.as_ptr() as *mut u8,",
          "    cap: vec.capacity(),",
          "    ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "    ptr: NonNull::new(shared.buf).unwrap(),",
          "    len: vec.len(),",
          "    cap: vec.capacity(),",
          "    data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    assert_eq!(bytes_mut.deref_mut(), &mut vec[..]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let vec = vec![255; 1];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "}"
        ],
        "oracle": [
          "    let expected_ptr: *mut u8 = bytes_mut.ptr.as_ptr();",
          "    let expected_len: usize = bytes_mut.len;",
          "    let expected_cap: usize = bytes_mut.cap;",
          "    let result_slice: &mut [u8] = bytes_mut.deref_mut();",
          "    assert_eq!(result_slice.as_mut_ptr(), expected_ptr);",
          "    assert_eq!(result_slice.len(), expected_len);",
          "    assert_eq!(bytes_mut.cap, expected_cap);"
        ],
        "code": [
          "{",
          "    let vec = vec![255; 1];",
          "    let shared = Shared {",
          "        buf: vec.as_ptr() as *mut u8,",
          "        cap: vec.capacity(),",
          "        ref_cnt: AtomicUsize::new(1),",
          "    };",
          "    let bytes_mut = BytesMut {",
          "        ptr: NonNull::new(shared.buf).unwrap(),",
          "        len: vec.len(),",
          "        cap: vec.capacity(),",
          "        data: &shared as *const Shared as *mut Shared,",
          "    };",
          "    let _result: &mut [u8] = bytes_mut.deref_mut();",
          "    let expected_ptr: *mut u8 = bytes_mut.ptr.as_ptr();",
          "    let expected_len: usize = bytes_mut.len;",
          "    let expected_cap: usize = bytes_mut.cap;",
          "    let result_slice: &mut [u8] = bytes_mut.deref_mut();",
          "    assert_eq!(result_slice.as_mut_ptr(), expected_ptr);",
          "    assert_eq!(result_slice.len(), expected_len);",
          "    assert_eq!(bytes_mut.cap, expected_cap);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]