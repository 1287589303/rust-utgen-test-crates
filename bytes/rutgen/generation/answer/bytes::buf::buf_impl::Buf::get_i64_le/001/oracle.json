[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _result = buf.get_i64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0x0102030405060708);",
          "    let mut buf_underflow: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
          "    panic::catch_unwind(|| { buf_underflow.get_i64_le(); }).is_err();",
          "    let mut buf_exact: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(buf_exact.get_i64_le(), 0x0102030405060708);",
          "    let mut buf: &mut [u8] = &mut [0; 8];",
          "    let mut source: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    source.copy_to_slice(buf);",
          "    let converted_buf: &mut dyn Buf = &mut buf;",
          "    assert_eq!(converted_buf.get_i64_le(), 0x0102030405060708);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01\"[..];",
          "    let _result = buf.get_i64_le();",
          "    assert_eq!(_result, 0x0102030405060708);",
          "    let mut buf_underflow: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\"[..];",
          "    panic::catch_unwind(|| { buf_underflow.get_i64_le(); }).is_err();",
          "    let mut buf_exact: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(buf_exact.get_i64_le(), 0x0102030405060708);",
          "    let mut buf: &mut [u8] = &mut [0; 8];",
          "    let mut source: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    source.copy_to_slice(buf);",
          "    let converted_buf: &mut dyn Buf = &mut buf;",
          "    assert_eq!(converted_buf.get_i64_le(), 0x0102030405060708);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let _result = buf.get_i64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0x0102030405060708);",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _result = buf.get_i64_le();",
          "    assert_eq!(_result, 0);",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _result = std::panic::catch_unwind(|| buf.get_i64_le());",
          "    assert!(result.is_err());",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    let _result = std::panic::catch_unwind(|| buf.get_i64_le());",
          "    assert!(result.is_err());",
          "    let mut buf: &[u8] = &b\"\\x02\\x01\"[..];",
          "    let _result = std::panic::catch_unwind(|| buf.get_i64_le());",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\\x04\\x03\\x02\\x01 hello\"[..];",
          "    let _result = buf.get_i64_le();",
          "    assert_eq!(_result, 0x0102030405060708);",
          "    let mut buf: &[u8] = &b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"[..];",
          "    let _result = buf.get_i64_le();",
          "    assert_eq!(_result, 0);",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _result = std::panic::catch_unwind(|| buf.get_i64_le());",
          "    assert!(result.is_err());",
          "    let mut buf: &[u8] = &b\"\"[..];",
          "    let _result = std::panic::catch_unwind(|| buf.get_i64_le());",
          "    assert!(result.is_err());",
          "    let mut buf: &[u8] = &b\"\\x02\\x01\"[..];",
          "    let _result = std::panic::catch_unwind(|| buf.get_i64_le());",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\"[..];",
          "    let _result = buf.get_i64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| buf.get_i64_le()).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x08\\x07\\x06\\x05\"[..];",
          "    let _result = buf.get_i64_le();",
          "    assert_eq!(std::panic::catch_unwind(|| buf.get_i64_le()).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\"[..];",
          "    let _result = buf.get_i64_le();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.get_i64_le(), 0xFFFFFFFFFFFFFFFF);",
          "    assert!(!buf.has_remaining());",
          "    assert_panics!(buf.get_i64_le());",
          "    buf.advance(8);",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\"[..];",
          "    let _result = buf.get_i64_le();",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.get_i64_le(), 0xFFFFFFFFFFFFFFFF);",
          "    assert!(!buf.has_remaining());",
          "    assert_panics!(buf.get_i64_le());",
          "    buf.advance(8);",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]