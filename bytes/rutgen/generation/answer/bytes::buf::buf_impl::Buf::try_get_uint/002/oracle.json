[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\"[..];",
          "    let result = buf.try_get_uint(1);",
          "    let expected = Ok(1_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_uint(1), Ok(1_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_uint(2), Err(TryGetError { requested: 2, available: 0 }));",
          "    assert_eq!(buf.try_get_uint(0), Ok(0_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.advance(0);",
          "    let mut buf2 = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(buf2.try_get_uint(8), Ok(0x0102030405060708_u64));",
          "    assert_eq!(buf2.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\"[..];",
          "    let result = buf.try_get_uint(1);",
          "    let expected = Ok(1_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.try_get_uint(1), Ok(1_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_uint(2), Err(TryGetError { requested: 2, available: 0 }));",
          "    assert_eq!(buf.try_get_uint(0), Ok(0_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.advance(0);",
          "    let mut buf2 = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(buf2.try_get_uint(8), Ok(0x0102030405060708_u64));",
          "    assert_eq!(buf2.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\"[..];",
          "    let result = buf.try_get_uint(2);",
          "    let expected = Ok(0x0102_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_uint(2), Ok(0x0102_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_uint(1), Err(TryGetError { requested: 1, available: 0 }));",
          "    assert_eq!(buf.try_get_uint(3), Err(TryGetError { requested: 3, available: 0 }));",
          "    assert!(matches!(buf.try_get_uint(9), Err(TryGetError { requested: 9, available: available }) if available == 0));"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\"[..];",
          "    let result = buf.try_get_uint(2);",
          "    let expected = Ok(0x0102_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.try_get_uint(2), Ok(0x0102_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.try_get_uint(1), Err(TryGetError { requested: 1, available: 0 }));",
          "    assert_eq!(buf.try_get_uint(3), Err(TryGetError { requested: 3, available: 0 }));",
          "    assert!(matches!(buf.try_get_uint(9), Err(TryGetError { requested: 9, available: available }) if available == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_uint(3);",
          "    let expected = Ok(0x010203_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_uint(3), Ok(0x010203_u64));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.try_get_uint(4), Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);",
          "    panic::catch_unwind(|| { buf.try_get_uint(9); }).is_err();"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_uint(3);",
          "    let expected = Ok(0x010203_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.try_get_uint(3), Ok(0x010203_u64));",
          "    assert_eq!(buf.remaining(), 6);",
          "    assert_eq!(buf.try_get_uint(4), Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);",
          "    panic::catch_unwind(|| { buf.try_get_uint(9); }).is_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let result = buf.try_get_uint(4);",
          "    let expected = Ok(0x01020304_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_uint(4), Ok(0x01020304_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf2 = &b\"\\x01\\x02\\x03\"[..];",
          "    let result2 = buf2.try_get_uint(4);",
          "    let expected2 = Err(TryGetError { requested: 4, available: 3 });",
          "    assert_eq!(result2, expected2);",
          "    assert_eq!(buf2.remaining(), 3);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let result = buf.try_get_uint(4);",
          "    let expected = Ok(0x01020304_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.try_get_uint(4), Ok(0x01020304_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf2 = &b\"\\x01\\x02\\x03\"[..];",
          "    let result2 = buf2.try_get_uint(4);",
          "    let expected2 = Err(TryGetError { requested: 4, available: 3 });",
          "    assert_eq!(result2, expected2);",
          "    assert_eq!(buf2.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let result = buf.try_get_uint(5);",
          "    let expected = Ok(0x0102030405_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_uint(5), Ok(0x0102030405_u64));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let result = buf.try_get_uint(5);",
          "    let expected = Ok(0x0102030405_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.try_get_uint(5), Ok(0x0102030405_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let result = buf.try_get_uint(6);",
          "    let expected = Ok(0x010203040506_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_uint(6), Ok(0x010203040506_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(buf.try_get_uint(4), Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "    ",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_uint(8);",
          "    assert_eq!(result, Ok(0x0102030405060708_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf = &b\"\"[..];",
          "    assert_eq!(buf.try_get_uint(1), Err(TryGetError { requested: 1, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = buf.try_get_uint(9);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let result = buf.try_get_uint(6);",
          "    let expected = Ok(0x010203040506_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.try_get_uint(6), Ok(0x010203040506_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(buf.try_get_uint(4), Err(TryGetError { requested: 4, available: 3 }));",
          "    assert_eq!(buf.remaining(), 3);",
          "    ",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_uint(8);",
          "    assert_eq!(result, Ok(0x0102030405060708_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf = &b\"\"[..];",
          "    assert_eq!(buf.try_get_uint(1), Err(TryGetError { requested: 1, available: 0 }));",
          "    assert_eq!(buf.remaining(), 0);",
          "    ",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let _ = buf.try_get_uint(9);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_uint(7);",
          "    let expected = Ok(0x01020304050607_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304050607_u64), result);",
          "    assert_eq!(1, remaining);",
          "    assert!(buf.remaining() >= 1);",
          "    assert!(buf.try_get_uint(7).is_ok());",
          "    assert!(buf.try_get_uint(8).is_err());",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 1}), buf.try_get_uint(8));",
          "    assert_eq!(Ok(0x01020304050607_u64), buf.try_get_uint(7));",
          "    assert_eq!(remaining, 1);",
          "    assert!(buf.remaining() > 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_uint(7);",
          "    let expected = Ok(0x01020304050607_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(Ok(0x01020304050607_u64), result);",
          "    assert_eq!(1, remaining);",
          "    assert!(buf.remaining() >= 1);",
          "    assert!(buf.try_get_uint(7).is_ok());",
          "    assert!(buf.try_get_uint(8).is_err());",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 1}), buf.try_get_uint(8));",
          "    assert_eq!(Ok(0x01020304050607_u64), buf.try_get_uint(7));",
          "    assert_eq!(remaining, 1);",
          "    assert!(buf.remaining() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_uint(8);",
          "    let expected = Ok(0x0102030405060708_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_uint(8);",
          "    assert_eq!(result, Ok(0x0102030405060708_u64));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_uint(8);",
          "    let expected = Ok(0x0102030405060708_u64);",
          "    let remaining = buf.remaining();",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let result = buf.try_get_uint(8);",
          "    assert_eq!(result, Ok(0x0102030405060708_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_uint(9);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_uint(9);",
          "    result.is_err()",
          "    }).is_err());",
          "    ",
          "    assert_eq!(result, Err(TryGetError { requested: 9, available: 8 }));",
          "    ",
          "    assert_eq!(buf.remaining(), 8);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_uint(9);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let result = buf.try_get_uint(9);",
          "    result.is_err()",
          "    }).is_err());",
          "    ",
          "    assert_eq!(result, Err(TryGetError { requested: 9, available: 8 }));",
          "    ",
          "    assert_eq!(buf.remaining(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_uint(4);",
          "    let expected = Err(TryGetError { requested: 4, available: 3 });",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, expected);",
          "    assert_eq!(remaining, 3);",
          "    assert!(buf.remaining() == 3);",
          "    assert!(matches!(result, Err(TryGetError{requested: 4, available: 3})));"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let result = buf.try_get_uint(4);",
          "    let expected = Err(TryGetError { requested: 4, available: 3 });",
          "    let remaining = buf.remaining();",
          "    assert_eq!(result, expected);",
          "    assert_eq!(remaining, 3);",
          "    assert!(buf.remaining() == 3);",
          "    assert!(matches!(result, Err(TryGetError{requested: 4, available: 3})));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let result = buf.try_get_uint(0);",
          "    let expected = Ok(0_u64);",
          "    let remaining = buf.remaining();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.try_get_uint(0), expected);",
          "    assert_eq!(remaining, buf.remaining());",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(buf.try_get_uint(0).is_ok());",
          "    assert!(buf.try_get_uint(4).is_err());",
          "    assert_eq!(buf.try_get_uint(0).unwrap(), 0_u64);",
          "    assert_eq!(buf.try_get_uint(0).unwrap_err().requested, 0);",
          "    assert_eq!(buf.try_get_uint(0).unwrap_err().available, 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\"[..];",
          "    let result = buf.try_get_uint(0);",
          "    let expected = Ok(0_u64);",
          "    let remaining = buf.remaining();",
          "    assert_eq!(buf.try_get_uint(0), expected);",
          "    assert_eq!(remaining, buf.remaining());",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(buf.try_get_uint(0).is_ok());",
          "    assert!(buf.try_get_uint(4).is_err());",
          "    assert_eq!(buf.try_get_uint(0).unwrap(), 0_u64);",
          "    assert_eq!(buf.try_get_uint(0).unwrap_err().requested, 0);",
          "    assert_eq!(buf.try_get_uint(0).unwrap_err().available, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]