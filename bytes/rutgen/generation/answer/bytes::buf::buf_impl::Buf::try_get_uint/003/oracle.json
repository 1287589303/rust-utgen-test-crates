[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\"[..];",
          "    let _result = buf.try_get_uint(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(1_u64), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_uint(2));",
          "    assert_eq!(1, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\"[..];",
          "    let _result = buf.try_get_uint(1);",
          "    assert_eq!(Ok(1_u64), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 2, available: 0}), buf.try_get_uint(2));",
          "    assert_eq!(1, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\"[..];",
          "    let _result = buf.try_get_uint(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102_u64), buf.try_get_uint(2));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_uint(4));",
          "    assert_eq!(2, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\"[..];",
          "    let _result = buf.try_get_uint(2);",
          "    assert_eq!(Ok(0x0102_u64), buf.try_get_uint(2));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 2}), buf.try_get_uint(4));",
          "    assert_eq!(2, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let _result = buf.try_get_uint(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(panic_does_not_fit(8, 9), panic::catch_unwind(|| buf.try_get_uint(9)).is_err());",
          "    assert_eq!(panic_does_not_fit(8, 9), panic::catch_unwind(|| buf.try_get_uint(9)).unwrap_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let _result = buf.try_get_uint(3);",
          "    assert_eq!(Ok(0x010203_u64), buf.try_get_uint(3));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 3}), buf.try_get_uint(4));",
          "    assert_eq!(3, buf.remaining());",
          "    assert_eq!(panic_does_not_fit(8, 9), panic::catch_unwind(|| buf.try_get_uint(9)).is_err());",
          "    assert_eq!(panic_does_not_fit(8, 9), panic::catch_unwind(|| buf.try_get_uint(9)).unwrap_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _result = buf.try_get_uint(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 0 }), buf.try_get_uint(5));",
          "    assert_eq!(4, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint(9); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\"[..];",
          "    let _result = buf.try_get_uint(4);",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 5, available: 0 }), buf.try_get_uint(5));",
          "    assert_eq!(4, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| { buf.try_get_uint(9); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _result = buf.try_get_uint(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 6, available: 5 }), buf.try_get_uint(6));",
          "    assert_eq!(Err(TryGetError { requested: 7, available: 5 }), buf.try_get_uint(7));",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_uint(8));",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint(4));",
          "    assert_eq!(3, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\"[..];",
          "    let _result = buf.try_get_uint(5);",
          "    assert_eq!(Err(TryGetError { requested: 6, available: 5 }), buf.try_get_uint(6));",
          "    assert_eq!(Err(TryGetError { requested: 7, available: 5 }), buf.try_get_uint(7));",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_uint(8));",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint(4));",
          "    assert_eq!(3, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _result = buf.try_get_uint(6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(0x010203040506_u64));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..];",
          "    let _result = buf.try_get_uint(6);",
          "    assert_eq!(_result, Ok(0x010203040506_u64));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _result = buf.try_get_uint(7);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), _result);",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..];",
          "    let _result = buf.try_get_uint(7);",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 7}), _result);",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _result = buf.try_get_uint(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_uint(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_uint(9));",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 0}), buf.try_get_uint(5));"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _result = buf.try_get_uint(8);",
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_uint(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_uint(9));",
          "    assert_eq!(Err(TryGetError{requested: 5, available: 0}), buf.try_get_uint(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _result = buf.try_get_uint(9);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_uint(9));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(u64::try_from(buf.try_get_uint(9).err()).is_ok(), false);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _result = buf.try_get_uint(9);",
          "    assert_eq!(Err(TryGetError { requested: 9, available: 8 }), buf.try_get_uint(9));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(u64::try_from(buf.try_get_uint(9).err()).is_ok(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let _result = buf.try_get_uint(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\"[..];",
          "    let _result = buf.try_get_uint(4);",
          "    assert_eq!(_result, Err(TryGetError{requested: 4, available: 3}));",
          "    assert_eq!(buf.remaining(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let _result = buf.try_get_uint(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(Ok(0x01_u64), buf.try_get_uint(1));",
          "    assert_eq!(2, buf.remaining());",
          "    assert_eq!(Ok(0x02_u64), buf.try_get_uint(1));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Ok(0x03_u64), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 0}), buf.try_get_uint(4));",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint(4));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_eq!(Ok(0x05060708_u64), buf.try_get_uint(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    buf.try_get_uint(9);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &[];",
          "    let _result = buf.try_get_uint(1);",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\"[..];",
          "    assert_eq!(Ok(0x01_u64), buf.try_get_uint(1));",
          "    assert_eq!(2, buf.remaining());",
          "    assert_eq!(Ok(0x02_u64), buf.try_get_uint(1));",
          "    assert_eq!(1, buf.remaining());",
          "    assert_eq!(Ok(0x03_u64), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 4, available: 0}), buf.try_get_uint(4));",
          "    assert_eq!(0, buf.remaining());",
          "    let mut buf: &[u8] = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    assert_eq!(Ok(0x01020304_u64), buf.try_get_uint(4));",
          "    assert_eq!(4, buf.remaining());",
          "    assert_eq!(Ok(0x05060708_u64), buf.try_get_uint(4));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint(1));",
          "    assert_eq!(0, buf.remaining());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    buf.try_get_uint(9);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _result = buf.try_get_uint(8);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_uint(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_uint(9));",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 0}), buf.try_get_uint(8));",
          "    buf.advance(8);",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint(1));",
          "    assert_eq!(buf.remaining(), 0);"
        ],
        "code": [
          "{",
          "    let mut buf = &b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\"[..];",
          "    let _result = buf.try_get_uint(8);",
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_uint(8));",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError{requested: 9, available: 0}), buf.try_get_uint(9));",
          "    assert_eq!(Err(TryGetError{requested: 8, available: 0}), buf.try_get_uint(8));",
          "    buf.advance(8);",
          "    assert_eq!(Err(TryGetError{requested: 1, available: 0}), buf.try_get_uint(1));",
          "    assert_eq!(buf.remaining(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]