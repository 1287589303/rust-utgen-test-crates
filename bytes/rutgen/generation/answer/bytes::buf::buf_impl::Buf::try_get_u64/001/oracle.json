[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_u64(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let mut buf = [0; 8];",
          "            buf.copy_from_slice(&self.data[self.position..self.position + 8]);",
          "            self.position += 8;",
          "            Ok(u64::from_be_bytes(buf))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..].to_vec(),",
          "        position: 0,",
          "    };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(7, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_u64(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let mut buf = [0; 8];",
          "            buf.copy_from_slice(&self.data[self.position..self.position + 8]);",
          "            self.position += 8;",
          "            Ok(u64::from_be_bytes(buf))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..].to_vec(),",
          "        position: 0,",
          "    };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(7, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(7, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_u64(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let mut buf = [0; 8];",
          "            buf.copy_from_slice(&self.data[self.position..self.position + 8]);",
          "            self.position += 8;",
          "            Ok(u64::from_be_bytes(buf))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..].to_vec(),",
          "        position: 0,",
          "    };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_u64());",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());",
          "    buf.position = 6;",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_u64(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let mut buf = [0; 8];",
          "            buf.copy_from_slice(&self.data[self.position..self.position + 8]);",
          "            self.position += 8;",
          "            Ok(u64::from_be_bytes(buf))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: b\"\\x01\\x02\\x03\\x04\\x05\\x06\"[..].to_vec(),",
          "        position: 0,",
          "    };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_u64());",
          "    assert_eq!(6, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 6 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 5 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 4 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 3 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 2 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 1 }), buf.try_get_u64());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());",
          "    buf.position = 6;",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_u64(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let mut buf = [0; 8];",
          "            buf.copy_from_slice(&self.data[self.position..self.position + 8]);",
          "            self.position += 8;",
          "            Ok(u64::from_be_bytes(buf))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: b\"\"[..].to_vec(),",
          "        position: 0,",
          "    };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());",
          "    assert_eq!(0, buf.remaining());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.position = 0;",
          "    buf.data = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..].to_vec();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(7, buf.remaining());",
          "    buf.position = 0;",
          "    buf.data = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..].to_vec();",
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64());",
          "    assert_eq!(6, buf.remaining());"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "        position: usize,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn remaining(&self) -> usize {",
          "            self.data.len() - self.position",
          "        }",
          "",
          "        fn advance(&mut self, cnt: usize) {",
          "            self.position += cnt;",
          "        }",
          "",
          "        fn try_get_u64(&mut self) -> Result<u64, TryGetError> {",
          "            if self.remaining() < 8 {",
          "                return Err(TryGetError {",
          "                    requested: 8,",
          "                    available: self.remaining(),",
          "                });",
          "            }",
          "            let mut buf = [0; 8];",
          "            buf.copy_from_slice(&self.data[self.position..self.position + 8]);",
          "            self.position += 8;",
          "            Ok(u64::from_be_bytes(buf))",
          "        }",
          "    }",
          "",
          "    let mut buf = TestBuf {",
          "        data: b\"\"[..].to_vec(),",
          "        position: 0,",
          "    };",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());",
          "    assert_eq!(0, buf.remaining());",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 0 }), buf.try_get_u64());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.position = 0;",
          "    buf.data = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\"[..].to_vec();",
          "    assert_eq!(Err(TryGetError { requested: 8, available: 7 }), buf.try_get_u64());",
          "    assert_eq!(7, buf.remaining());",
          "    buf.position = 0;",
          "    buf.data = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08 hello\"[..].to_vec();",
          "    assert_eq!(Ok(0x0102030405060708_u64), buf.try_get_u64());",
          "    assert_eq!(6, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]