[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
          "    bytes_mut.extend(bytes_vec);",
          "}"
        ],
        "oracle": [
          "    bytes_mut.extend(vec![Bytes::from(vec![1, 2, 3])]); // Test with non-empty iterator",
          "    assert_eq!(bytes_mut.len(), 3); // Expect length to be 3 after extension",
          "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]); // Expect contents to match inserted bytes",
          "    ",
          "    bytes_mut.clear(); // Reset for the next test",
          "    bytes_mut.extend(vec![]); // Test with empty iterator",
          "    assert_eq!(bytes_mut.len(), 0); // Expect length to remain 0",
          "    assert!(bytes_mut.is_empty()); // Expect BytesMut to be empty after extending with empty iterator"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
          "    bytes_mut.extend(bytes_vec);",
          "    bytes_mut.extend(vec![Bytes::from(vec![1, 2, 3])]); // Test with non-empty iterator",
          "    assert_eq!(bytes_mut.len(), 3); // Expect length to be 3 after extension",
          "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]); // Expect contents to match inserted bytes",
          "    ",
          "    bytes_mut.clear(); // Reset for the next test",
          "    bytes_mut.extend(vec![]); // Test with empty iterator",
          "    assert_eq!(bytes_mut.len(), 0); // Expect length to remain 0",
          "    assert!(bytes_mut.is_empty()); // Expect BytesMut to be empty after extending with empty iterator",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let empty_bytes_vec: Vec<Bytes> = Vec::new();",
          "    bytes_mut.extend(empty_bytes_vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    let non_empty_bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
          "    bytes_mut.extend(non_empty_bytes_vec);",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]);",
          "    assert!(bytes_mut.capacity() > 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let empty_bytes_vec: Vec<Bytes> = Vec::new();",
          "    bytes_mut.extend(empty_bytes_vec);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    let non_empty_bytes_vec = vec![Bytes::from(vec![1, 2, 3])];",
          "    bytes_mut.extend(non_empty_bytes_vec);",
          "    assert_eq!(bytes_mut.len(), 3);",
          "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3]);",
          "    assert!(bytes_mut.capacity() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]