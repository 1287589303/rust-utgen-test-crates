[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let empty_iter = vec![].into_iter();",
          "    bytes_mut.extend(empty_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.freeze().len(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let empty_iter = vec![].into_iter();",
          "    bytes_mut.extend(empty_iter);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "    assert_eq!(bytes_mut.freeze().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let zero_element_iter = vec![Bytes::from(vec![])].into_iter().filter(|_| false);",
          "    bytes_mut.extend(zero_element_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let zero_element_iter = vec![Bytes::from(vec![])].into_iter().filter(|_| false);",
          "    bytes_mut.extend(zero_element_iter);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(bytes_mut.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]