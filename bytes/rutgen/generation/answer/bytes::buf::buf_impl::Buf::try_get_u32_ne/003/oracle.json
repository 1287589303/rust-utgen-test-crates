[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\xA1\\xA0\\x09\\x08\"; // native-endian 0xA10908A1",
          "    let result = buf.try_get_u32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Ok(0xA10908A1_u32), buf.try_get_u32_ne());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.remaining() == 4;",
          "    let ret = buf.try_get_u32_ne();",
          "    assert!(ret.is_ok());",
          "    assert_ne!(buf.remaining(), 0);",
          "    let err_result: Result<u32, TryGetError> = Err(TryGetError { requested: 4, available: 3 });",
          "    assert_eq!(err_result, buf.try_get_u32_ne());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\xA1\\xA0\\x09\\x08\"; // native-endian 0xA10908A1",
          "    let result = buf.try_get_u32_ne();",
          "    assert_eq!(Ok(0xA10908A1_u32), buf.try_get_u32_ne());",
          "    assert_eq!(0, buf.remaining());",
          "    buf.remaining() == 4;",
          "    let ret = buf.try_get_u32_ne();",
          "    assert!(ret.is_ok());",
          "    assert_ne!(buf.remaining(), 0);",
          "    let err_result: Result<u32, TryGetError> = Err(TryGetError { requested: 4, available: 3 });",
          "    assert_eq!(err_result, buf.try_get_u32_ne());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x08\\x09\\xA0\"; // only 3 bytes available",
          "    let result = buf.try_get_u32_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), result);",
          "    assert_eq!(3, buf.remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x08\\x09\\xA0\"; // only 3 bytes available",
          "    let result = buf.try_get_u32_ne();",
          "    assert_eq!(Err(TryGetError { requested: 4, available: 3 }), result);",
          "    assert_eq!(3, buf.remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]