[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let result = bytes_mut.split_to(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(result.capacity(), bytes_mut.capacity());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::new();",
          "    let result = bytes_mut.split_to(0);",
          "    assert_eq!(result.len(), 0);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert!(bytes_mut.is_empty());",
          "    assert_eq!(result.capacity(), bytes_mut.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1]);",
          "    let result = bytes_mut.split_to(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(bytes_mut.len(), 1);",
          "    assert_eq!(result[0], 1);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1]);",
          "    let result = bytes_mut.split_to(1);",
          "    assert_eq!(result.len(), 1);",
          "    assert_eq!(bytes_mut.len(), 1);",
          "    assert_eq!(result[0], 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4, 5]);",
          "    let result = bytes_mut.split_to(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(result.as_slice(), &[1, 2, 3]);",
          "    assert_eq!(bytes_mut.len(), 2);",
          "    assert_eq!(bytes_mut.as_slice(), &[4, 5]);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(result.is_empty() == false);",
          "    assert!(bytes_mut.capacity() >= 2);",
          "    assert!(result.capacity() >= 3);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4, 5]);",
          "    let result = bytes_mut.split_to(3);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(result.as_slice(), &[1, 2, 3]);",
          "    assert_eq!(bytes_mut.len(), 2);",
          "    assert_eq!(bytes_mut.as_slice(), &[4, 5]);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(result.is_empty() == false);",
          "    assert!(bytes_mut.capacity() >= 2);",
          "    assert!(result.capacity() >= 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let result = bytes_mut.split_to(4); // Should panic",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(std::panic::catch_unwind(|| {",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    bytes_mut.split_to(4);",
          "    }), Err(_)));",
          "    ",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let result = bytes_mut.len();",
          "    assert_eq!(result, 3);",
          "    ",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let result = bytes_mut.split_to(3);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(bytes_mut.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let result = bytes_mut.split_to(4); // Should panic",
          "    assert!(matches!(std::panic::catch_unwind(|| {",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    bytes_mut.split_to(4);",
          "    }), Err(_)));",
          "    ",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let result = bytes_mut.len();",
          "    assert_eq!(result, 3);",
          "    ",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3]);",
          "    let result = bytes_mut.split_to(3);",
          "    assert_eq!(result.len(), 3);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4]);",
          "    let result = bytes_mut.split_to(4); // Edge case where at == len",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(&result[..], &[1, 2, 3, 4]);",
          "    assert!(bytes_mut.is_empty());",
          "    assert!(result.capacity() >= result.len());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::from_vec(vec![1, 2, 3, 4]);",
          "    let result = bytes_mut.split_to(4); // Edge case where at == len",
          "    assert_eq!(result.len(), 4);",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(&result[..], &[1, 2, 3, 4]);",
          "    assert!(bytes_mut.is_empty());",
          "    assert!(result.capacity() >= result.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]