[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = Vec::with_capacity(10);",
          "    unsafe { buffer.set_len(10); } ",
          "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10 now",
          "    let cnt = remaining; // cnt is also 10, equal to remaining",
          "    unsafe { buffer.advance_mut(cnt); } ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 10 + cnt);",
          "    assert_eq!(buffer.len(), 20);",
          "    assert!(buffer.capacity() >= buffer.len());",
          "    assert!(buffer.capacity() - buffer.len() >= 0);"
        ],
        "code": [
          "{",
          "    let mut buffer = Vec::with_capacity(10);",
          "    unsafe { buffer.set_len(10); } ",
          "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10 now",
          "    let cnt = remaining; // cnt is also 10, equal to remaining",
          "    unsafe { buffer.advance_mut(cnt); } ",
          "    assert_eq!(buffer.len(), 10 + cnt);",
          "    assert_eq!(buffer.len(), 20);",
          "    assert!(buffer.capacity() >= buffer.len());",
          "    assert!(buffer.capacity() - buffer.len() >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = Vec::with_capacity(1);",
          "    unsafe { buffer.set_len(0); }",
          "    let remaining = buffer.capacity() - buffer.len(); // remaining is 1",
          "    let cnt = remaining; // cnt is also 1, equal to remaining",
          "    unsafe { buffer.advance_mut(cnt); } ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 1);",
          "    assert_eq!(buffer.capacity(), 1);",
          "    assert!(buffer.has_remaining_mut() == false);",
          "    assert!(std::ptr::read(buffer.as_ptr()) == 0);"
        ],
        "code": [
          "{",
          "    let mut buffer = Vec::with_capacity(1);",
          "    unsafe { buffer.set_len(0); }",
          "    let remaining = buffer.capacity() - buffer.len(); // remaining is 1",
          "    let cnt = remaining; // cnt is also 1, equal to remaining",
          "    unsafe { buffer.advance_mut(cnt); } ",
          "    assert_eq!(buffer.len(), 1);",
          "    assert_eq!(buffer.capacity(), 1);",
          "    assert!(buffer.has_remaining_mut() == false);",
          "    assert!(std::ptr::read(buffer.as_ptr()) == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = Vec::with_capacity(20);",
          "    unsafe { buffer.set_len(10); }",
          "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10",
          "    let cnt = remaining; // cnt is also 10, equal to remaining",
          "    unsafe { buffer.advance_mut(cnt); } ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 20);",
          "    assert_eq!(buffer.capacity(), 20);",
          "    assert!(buffer.has_remaining_mut());",
          "    assert_eq!(buffer.remaining_mut(), 0);"
        ],
        "code": [
          "{",
          "    let mut buffer = Vec::with_capacity(20);",
          "    unsafe { buffer.set_len(10); }",
          "    let remaining = buffer.capacity() - buffer.len(); // remaining is 10",
          "    let cnt = remaining; // cnt is also 10, equal to remaining",
          "    unsafe { buffer.advance_mut(cnt); } ",
          "    assert_eq!(buffer.len(), 20);",
          "    assert_eq!(buffer.capacity(), 20);",
          "    assert!(buffer.has_remaining_mut());",
          "    assert_eq!(buffer.remaining_mut(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]