[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = Bytes::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(&b[..], b\"\");"
        ],
        "code": [
          "{",
          "    let b = Bytes::new();",
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(&b[..], b\"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = Bytes::new();",
          "    let length = b.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(&b[..], b\"\");",
          "    assert_eq!(b.data.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert_eq!(b.vtable, &STATIC_VTABLE);"
        ],
        "code": [
          "{",
          "    let b = Bytes::new();",
          "    let length = b.len();",
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(&b[..], b\"\");",
          "    assert_eq!(b.data.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert_eq!(b.vtable, &STATIC_VTABLE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = Bytes::new();",
          "    let is_empty = b.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(b.len(), 0);",
          "    assert!(is_empty);",
          "    assert_eq!(&b[..], b\"\");",
          "    assert!(b.as_slice().is_empty());",
          "    assert!(b.is_unique());"
        ],
        "code": [
          "{",
          "    let b = Bytes::new();",
          "    let is_empty = b.is_empty();",
          "    assert_eq!(b.len(), 0);",
          "    assert!(is_empty);",
          "    assert_eq!(&b[..], b\"\");",
          "    assert!(b.as_slice().is_empty());",
          "    assert!(b.is_unique());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b = Bytes::new();",
          "    let slice = b.slice(..);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(slice.is_empty());",
          "    assert_eq!(&slice[..], b\"\");",
          "    assert_eq!(slice.ptr, b.ptr);",
          "    assert_eq!(slice.data, b.data);",
          "    assert_eq!(slice.vtable, b.vtable);"
        ],
        "code": [
          "{",
          "    let b = Bytes::new();",
          "    let slice = b.slice(..);",
          "    assert_eq!(b.len(), 0);",
          "    assert!(b.is_empty());",
          "    assert_eq!(slice.len(), 0);",
          "    assert!(slice.is_empty());",
          "    assert_eq!(&slice[..], b\"\");",
          "    assert_eq!(slice.ptr, b.ptr);",
          "    assert_eq!(slice.data, b.data);",
          "    assert_eq!(slice.vtable, b.vtable);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]