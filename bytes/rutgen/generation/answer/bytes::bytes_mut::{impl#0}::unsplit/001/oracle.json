[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_buf = BytesMut::new();",
          "    let other_buf = BytesMut::from_vec(vec![1, 2, 3]);",
          "    self_buf.unsplit(other_buf);",
          "}"
        ],
        "oracle": [
          "    assert!(self_buf.len() == 3);",
          "    assert!(self_buf.capacity() >= 3);",
          "    assert_eq!(self_buf.as_slice(), &[1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let mut self_buf = BytesMut::new();",
          "    let other_buf = BytesMut::from_vec(vec![1, 2, 3]);",
          "    self_buf.unsplit(other_buf);",
          "    assert!(self_buf.len() == 3);",
          "    assert!(self_buf.capacity() >= 3);",
          "    assert_eq!(self_buf.as_slice(), &[1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_buf = BytesMut::new();",
          "    let other_buf = BytesMut::new();",
          "    self_buf.unsplit(other_buf);",
          "}"
        ],
        "oracle": [
          "    assert!(self_buf.is_empty());",
          "    assert_eq!(self_buf.len(), 0);",
          "    assert_eq!(self_buf.capacity(), 0);",
          "    assert_eq!(self_buf, other_buf);",
          "    assert!(self_buf.as_slice().is_empty());",
          "    assert!(self_buf.is_empty());"
        ],
        "code": [
          "{",
          "    let mut self_buf = BytesMut::new();",
          "    let other_buf = BytesMut::new();",
          "    self_buf.unsplit(other_buf);",
          "    assert!(self_buf.is_empty());",
          "    assert_eq!(self_buf.len(), 0);",
          "    assert_eq!(self_buf.capacity(), 0);",
          "    assert_eq!(self_buf, other_buf);",
          "    assert!(self_buf.as_slice().is_empty());",
          "    assert!(self_buf.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_buf = BytesMut::new();",
          "    let other_buf = BytesMut::with_capacity(128);",
          "    self_buf.unsplit(other_buf);",
          "}"
        ],
        "oracle": [
          "    assert!(self_buf.is_empty());",
          "    assert_eq!(self_buf.len(), 0);",
          "    assert_eq!(self_buf.capacity(), 128);",
          "    assert_eq!(self_buf, other_buf);"
        ],
        "code": [
          "{",
          "    let mut self_buf = BytesMut::new();",
          "    let other_buf = BytesMut::with_capacity(128);",
          "    self_buf.unsplit(other_buf);",
          "    assert!(self_buf.is_empty());",
          "    assert_eq!(self_buf.len(), 0);",
          "    assert_eq!(self_buf.capacity(), 128);",
          "    assert_eq!(self_buf, other_buf);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]