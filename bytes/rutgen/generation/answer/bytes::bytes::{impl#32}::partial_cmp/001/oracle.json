[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let my_string = String::from(\"hello\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Equal));",
          "    assert!(my_string.partial_cmp(&Bytes::from(\"world\".as_bytes())) < Some(cmp::Ordering::Equal));",
          "    assert!(my_string.partial_cmp(&Bytes::from(\"abc\".as_bytes())) > Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hello\".as_bytes())), Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"HELLO\".as_bytes())), Some(cmp::Ordering::Greater));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"Hello\".as_bytes())), Some(cmp::Ordering::Greater));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hello!\".as_bytes())), Some(cmp::Ordering::Less));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hello\".as_bytes().to_vec())), Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"\".as_bytes())), Some(cmp::Ordering::Greater));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"HELLO!\".as_bytes())), Some(cmp::Ordering::Less));"
        ],
        "code": [
          "{",
          "    let my_string = String::from(\"hello\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Equal));",
          "    assert!(my_string.partial_cmp(&Bytes::from(\"world\".as_bytes())) < Some(cmp::Ordering::Equal));",
          "    assert!(my_string.partial_cmp(&Bytes::from(\"abc\".as_bytes())) > Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hello\".as_bytes())), Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"HELLO\".as_bytes())), Some(cmp::Ordering::Greater));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"Hello\".as_bytes())), Some(cmp::Ordering::Greater));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hello!\".as_bytes())), Some(cmp::Ordering::Less));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hello\".as_bytes().to_vec())), Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"\".as_bytes())), Some(cmp::Ordering::Greater));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"HELLO!\".as_bytes())), Some(cmp::Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let my_string = String::from(\"hello world\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Less));",
          "    let my_bytes_equal = Bytes::from(\"hello world\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_equal), Some(cmp::Ordering::Equal));",
          "    let my_bytes_greater = Bytes::from(\"hello universe\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_greater), Some(cmp::Ordering::Greater));",
          "    let my_bytes_empty = Bytes::from(\"\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_empty), Some(cmp::Ordering::Greater));",
          "    let my_bytes_large = Bytes::from(\"hello world!\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_large), Some(cmp::Ordering::Less));",
          "    let my_bytes_non_ascii = Bytes::from(\"こんにちは\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_non_ascii), Some(cmp::Ordering::Less));"
        ],
        "code": [
          "{",
          "    let my_string = String::from(\"hello world\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Less));",
          "    let my_bytes_equal = Bytes::from(\"hello world\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_equal), Some(cmp::Ordering::Equal));",
          "    let my_bytes_greater = Bytes::from(\"hello universe\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_greater), Some(cmp::Ordering::Greater));",
          "    let my_bytes_empty = Bytes::from(\"\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_empty), Some(cmp::Ordering::Greater));",
          "    let my_bytes_large = Bytes::from(\"hello world!\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_large), Some(cmp::Ordering::Less));",
          "    let my_bytes_non_ascii = Bytes::from(\"こんにちは\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_non_ascii), Some(cmp::Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let my_string = String::from(\"hi\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(my_string.partial_cmp(&my_bytes).is_some(), true);",
          "    assert!(my_string.partial_cmp(&my_bytes).unwrap() == cmp::Ordering::Less);",
          "    assert_eq!(my_string.as_bytes().len(), 2);",
          "    assert_eq!(my_bytes.len(), 5);",
          "    assert_eq!(my_bytes.as_slice(), b\"hello\");",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hi\".as_bytes())).unwrap(), cmp::Ordering::Equal);",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"a\".as_bytes())).unwrap(), cmp::Ordering::Greater);"
        ],
        "code": [
          "{",
          "    let my_string = String::from(\"hi\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes).is_some(), true);",
          "    assert!(my_string.partial_cmp(&my_bytes).unwrap() == cmp::Ordering::Less);",
          "    assert_eq!(my_string.as_bytes().len(), 2);",
          "    assert_eq!(my_bytes.len(), 5);",
          "    assert_eq!(my_bytes.as_slice(), b\"hello\");",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"hi\".as_bytes())).unwrap(), cmp::Ordering::Equal);",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"a\".as_bytes())).unwrap(), cmp::Ordering::Greater);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let my_string = String::from(\"a\");",
          "    let my_bytes = Bytes::from(\"a\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Equal));",
          "    my_string.push_str(\"b\");",
          "    let my_bytes_b = Bytes::from(\"a\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_b), Some(cmp::Ordering::Greater));",
          "    let my_bytes_c = Bytes::from(\"b\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_c), Some(cmp::Ordering::Less));",
          "    let my_bytes_empty = Bytes::from(\"\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_empty), Some(cmp::Ordering::Greater));",
          "    let my_string_empty = String::from(\"\");",
          "    assert_eq!(my_string_empty.partial_cmp(&my_bytes), Some(cmp::Ordering::Less));",
          "    my_string.push_str(\"a\");",
          "    let my_bytes_same = Bytes::from(\"aa\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_same), Some(cmp::Ordering::Less));"
        ],
        "code": [
          "{",
          "    let my_string = String::from(\"a\");",
          "    let my_bytes = Bytes::from(\"a\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Equal));",
          "    my_string.push_str(\"b\");",
          "    let my_bytes_b = Bytes::from(\"a\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_b), Some(cmp::Ordering::Greater));",
          "    let my_bytes_c = Bytes::from(\"b\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_c), Some(cmp::Ordering::Less));",
          "    let my_bytes_empty = Bytes::from(\"\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_empty), Some(cmp::Ordering::Greater));",
          "    let my_string_empty = String::from(\"\");",
          "    assert_eq!(my_string_empty.partial_cmp(&my_bytes), Some(cmp::Ordering::Less));",
          "    my_string.push_str(\"a\");",
          "    let my_bytes_same = Bytes::from(\"aa\".as_bytes());",
          "    assert_eq!(my_string.partial_cmp(&my_bytes_same), Some(cmp::Ordering::Less));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let my_string = String::from(\"a\".repeat(1024));",
          "    let my_bytes = Bytes::from(\"a\".repeat(1024).as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(my_string.partial_cmp(&my_bytes).is_some(), true);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.len(), my_bytes.len());",
          "    assert_eq!(my_bytes.len(), 1024);",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"b\".repeat(1024).as_bytes())), Some(cmp::Ordering::Less));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"a\".repeat(512).as_bytes())), Some(cmp::Ordering::Greater));"
        ],
        "code": [
          "{",
          "    let my_string = String::from(\"a\".repeat(1024));",
          "    let my_bytes = Bytes::from(\"a\".repeat(1024).as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes).is_some(), true);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes), Some(cmp::Ordering::Equal));",
          "    assert_eq!(my_string.len(), my_bytes.len());",
          "    assert_eq!(my_bytes.len(), 1024);",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"b\".repeat(1024).as_bytes())), Some(cmp::Ordering::Less));",
          "    assert_eq!(my_string.partial_cmp(&Bytes::from(\"a\".repeat(512).as_bytes())), Some(cmp::Ordering::Greater));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let my_string = String::from(\"\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(my_string.partial_cmp(&my_bytes), None);"
        ],
        "code": [
          "{",
          "    let my_string = String::from(\"\");",
          "    let my_bytes = Bytes::from(\"hello\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let my_string = String::from(\"hello\");",
          "    let my_bytes = Bytes::from(\"\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(my_string.partial_cmp(&my_bytes), None);"
        ],
        "code": [
          "{",
          "    let my_string = String::from(\"hello\");",
          "    let my_bytes = Bytes::from(\"\".as_bytes());",
          "    let _ = my_string.partial_cmp(&my_bytes);",
          "    assert_eq!(my_string.partial_cmp(&my_bytes), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]