[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let mut a = TestBuf::new(vec![1, 2, 3]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "}"
        ],
        "oracle": [
          "    let mut a = TestBuf::new(vec![1, 2, 3]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "    assert_eq!(chain.first_mut().data, vec![1, 2, 3]);",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "    assert_eq!(first.data, vec![2, 3]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "    ",
          "    let mut a = TestBuf::new(vec![1, 2, 3]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "    let mut a = TestBuf::new(vec![1, 2, 3]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "    assert_eq!(chain.first_mut().data, vec![1, 2, 3]);",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "    assert_eq!(first.data, vec![2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "",
          "    let mut a = TestBuf::new(vec![]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(0);",
          "}"
        ],
        "oracle": [
          "    let mut a = TestBuf::new(vec![1, 2, 3, 4]);",
          "    let b = vec![5, 6, 7];",
          "    let mut chain = Chain::new(a, b);",
          "    let first = chain.first_mut();",
          "    assert_eq!(first.data, vec![1, 2, 3, 4]);",
          "    ",
          "    let first = chain.first_mut();",
          "    first.advance(2);",
          "    assert_eq!(first.data, vec![3, 4]);",
          "    ",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "    assert_eq!(first.data, vec![4]);",
          "    ",
          "    let first = chain.first_mut();",
          "    first.advance(4);",
          "    assert_eq!(first.data, vec![]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "",
          "    let mut a = TestBuf::new(vec![]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(0);",
          "    let mut a = TestBuf::new(vec![1, 2, 3, 4]);",
          "    let b = vec![5, 6, 7];",
          "    let mut chain = Chain::new(a, b);",
          "    let first = chain.first_mut();",
          "    assert_eq!(first.data, vec![1, 2, 3, 4]);",
          "    ",
          "    let first = chain.first_mut();",
          "    first.advance(2);",
          "    assert_eq!(first.data, vec![3, 4]);",
          "    ",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "    assert_eq!(first.data, vec![4]);",
          "    ",
          "    let first = chain.first_mut();",
          "    first.advance(4);",
          "    assert_eq!(first.data, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "",
          "    let mut a = TestBuf::new((0..1000).collect());",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(500);",
          "}"
        ],
        "oracle": [
          "    let mut a = TestBuf::new((0..1000).collect());",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "    let first = chain.first_mut();",
          "    assert_eq!(first.data.len(), 500);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "",
          "    let mut a = TestBuf::new((0..1000).collect());",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(500);",
          "    let mut a = TestBuf::new((0..1000).collect());",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "    let first = chain.first_mut();",
          "    assert_eq!(first.data.len(), 500);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "",
          "    let mut a = TestBuf::new(vec![255, 255, 255]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "}"
        ],
        "oracle": [
          "    let mut a = TestBuf::new(vec![255, 255, 255]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "    let first = chain.first_mut();",
          "    assert_eq!(first.data, vec![255, 255]);"
        ],
        "code": [
          "{",
          "    struct TestBuf {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestBuf {",
          "        fn new(data: Vec<u8>) -> Self {",
          "            TestBuf { data }",
          "        }",
          "        ",
          "        fn advance(&mut self, n: usize) {",
          "            self.data.drain(0..n);",
          "        }",
          "",
          "        fn copy_to_bytes(&self) -> &[u8] {",
          "            &self.data",
          "        }",
          "    }",
          "",
          "    let mut a = TestBuf::new(vec![255, 255, 255]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "",
          "    let first = chain.first_mut();",
          "    first.advance(1);",
          "    let mut a = TestBuf::new(vec![255, 255, 255]);",
          "    let b = vec![4, 5, 6];",
          "    let mut chain = Chain::new(a, b);",
          "    let first = chain.first_mut();",
          "    assert_eq!(first.data, vec![255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]