[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let _ = bytes.split_off(11); // at > self.capacity()",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert!(bytes.is_empty());",
          "    assert!(std::panic::catch_unwind(|| bytes.split_off(11)).is_err());"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(10);",
          "    let _ = bytes.split_off(11); // at > self.capacity()",
          "    assert_eq!(bytes.capacity(), 10);",
          "    assert!(bytes.is_empty());",
          "    assert!(std::panic::catch_unwind(|| bytes.split_off(11)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let _ = bytes.split_off(1); // at > self.capacity()",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| { let mut bytes = BytesMut::new(); bytes.split_off(1); }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::new();",
          "    let _ = bytes.split_off(1); // at > self.capacity()",
          "    assert_eq!(std::panic::catch_unwind(|| { let mut bytes = BytesMut::new(); bytes.split_off(1); }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(5);",
          "    let _ = bytes.split_off(10); // at > self.capacity()",
          "}"
        ],
        "oracle": [
          "    assert_panics(bytes.split_off(10));",
          "    assert_eq!(bytes.capacity(), 5);"
        ],
        "code": [
          "{",
          "    let mut bytes = BytesMut::with_capacity(5);",
          "    let _ = bytes.split_off(10); // at > self.capacity()",
          "    assert_panics(bytes.split_off(10));",
          "    assert_eq!(bytes.capacity(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]