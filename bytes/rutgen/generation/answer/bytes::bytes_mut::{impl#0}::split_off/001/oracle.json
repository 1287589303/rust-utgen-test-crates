[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let other = bytes_mut.split_off(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(other.len(), 5);",
          "    assert_eq!(other.capacity(), 10);",
          "    assert_eq!(&bytes_mut.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(&other.as_slice(), &[]);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let other = bytes_mut.split_off(0);",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(other.len(), 5);",
          "    assert_eq!(other.capacity(), 10);",
          "    assert_eq!(&bytes_mut.as_slice(), &[1, 2, 3, 4, 5]);",
          "    assert_eq!(&other.as_slice(), &[]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let other = bytes_mut.split_off(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert_eq!(other.len(), 5);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(other.capacity(), 10);",
          "    assert_eq!(&bytes_mut.as_slice()[..], &[1, 2, 3, 4, 5]);",
          "    assert_eq!(&other.as_slice()[..], &[]);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(other.is_empty() == true);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let other = bytes_mut.split_off(5);",
          "    assert_eq!(bytes_mut.len(), 5);",
          "    assert_eq!(other.len(), 5);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(other.capacity(), 10);",
          "    assert_eq!(&bytes_mut.as_slice()[..], &[1, 2, 3, 4, 5]);",
          "    assert_eq!(&other.as_slice()[..], &[]);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(other.is_empty() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let other = bytes_mut.split_off(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 4);",
          "    assert_eq!(other.len(), 6);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(other.capacity(), 10);",
          "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3, 4]);",
          "    assert_eq!(other.as_slice(), &[5]);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(other.is_empty() == false);",
          "    assert!(bytes_mut.capacity() >= bytes_mut.len());",
          "    assert!(other.capacity() >= other.len());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = BytesMut::with_capacity(10);",
          "    bytes_mut.extend_from_slice(&[1, 2, 3, 4, 5]);",
          "    let other = bytes_mut.split_off(4);",
          "    assert_eq!(bytes_mut.len(), 4);",
          "    assert_eq!(other.len(), 6);",
          "    assert_eq!(bytes_mut.capacity(), 10);",
          "    assert_eq!(other.capacity(), 10);",
          "    assert_eq!(bytes_mut.as_slice(), &[1, 2, 3, 4]);",
          "    assert_eq!(other.as_slice(), &[5]);",
          "    assert!(bytes_mut.is_empty() == false);",
          "    assert!(other.is_empty() == false);",
          "    assert!(bytes_mut.capacity() >= bytes_mut.len());",
          "    assert!(other.capacity() >= other.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]