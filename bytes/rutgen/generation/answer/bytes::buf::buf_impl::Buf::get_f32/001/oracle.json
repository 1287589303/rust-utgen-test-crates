[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\\x9A\"[..];",
          "    let _ = buf.get_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.get_f32(), 1.2f32);",
          "    assert_panics!(buf.get_f32());",
          "    buf.advance(4);",
          "    let mut buf_overflow: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    assert_panics!(buf_overflow.get_f32());",
          "    buf.copy_to_slice(&mut [0u8; 4]);",
          "    let mut buf_valid: &[u8] = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];",
          "    assert_eq!(buf_valid.get_f32(), 1.2f32);",
          "    assert_eq!(buf_valid.remaining(), 4);",
          "    assert!(buf_valid.has_remaining());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\\x9A\"[..];",
          "    let _ = buf.get_f32();",
          "    assert_eq!(buf.get_f32(), 1.2f32);",
          "    assert_panics!(buf.get_f32());",
          "    buf.advance(4);",
          "    let mut buf_overflow: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    assert_panics!(buf_overflow.get_f32());",
          "    buf.copy_to_slice(&mut [0u8; 4]);",
          "    let mut buf_valid: &[u8] = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];",
          "    assert_eq!(buf_valid.get_f32(), 1.2f32);",
          "    assert_eq!(buf_valid.remaining(), 4);",
          "    assert!(buf_valid.has_remaining());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let _ = buf.get_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(1.2f32, buf.get_f32());",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];",
          "    #[should_panic]",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let _ = buf.get_f32();"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let _ = buf.get_f32();",
          "    assert_eq!(1.2f32, buf.get_f32());",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\\x9A hello\"[..];",
          "    #[should_panic]",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\"[..];",
          "    let _ = buf.get_f32();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\\x9A\\x40\\x20\\x00\\x00\"[..];",
          "    let _ = buf.get_f32();",
          "    let _ = buf.get_f32();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.get_f32(), 1.2f32);",
          "    assert_eq!(buf.get_f32(), 2.5f32);",
          "    assert!(std::panic::catch_unwind(|| buf.get_f32()).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = &b\"\\x3F\\x99\\x99\\x9A\\x40\\x20\\x00\\x00\"[..];",
          "    let _ = buf.get_f32();",
          "    let _ = buf.get_f32();",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert_eq!(buf.get_f32(), 1.2f32);",
          "    assert_eq!(buf.get_f32(), 2.5f32);",
          "    assert!(std::panic::catch_unwind(|| buf.get_f32()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]