[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.advance_unchecked(0) };",
          "}"
        ],
        "oracle": [
          "    unsafe { bytes_mut.len() == 134217727 }",
          "    unsafe { bytes_mut.cap == 134217727 }",
          "    unsafe { bytes_mut.ptr == NonNull::new_unchecked(bytes_mut.data as *mut u8) }",
          "    unsafe { bytes_mut.kind() == KIND_VEC }",
          "    unsafe { bytes_mut.get_vec_pos() == 0 }"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.advance_unchecked(0) };",
          "    unsafe { bytes_mut.len() == 134217727 }",
          "    unsafe { bytes_mut.cap == 134217727 }",
          "    unsafe { bytes_mut.ptr == NonNull::new_unchecked(bytes_mut.data as *mut u8) }",
          "    unsafe { bytes_mut.kind() == KIND_VEC }",
          "    unsafe { bytes_mut.get_vec_pos() == 0 }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.advance_unchecked(bytes_mut.capacity()) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 134217727);",
          "    assert!(bytes_mut.ptr.as_ptr() != std::ptr::null_mut());",
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert!(bytes_mut.cap == 0);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.advance_unchecked(bytes_mut.capacity()) };",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.capacity(), 134217727);",
          "    assert!(bytes_mut.ptr.as_ptr() != std::ptr::null_mut());",
          "    assert!(bytes_mut.kind() == KIND_VEC);",
          "    assert!(bytes_mut.cap == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.set_vec_pos(134217727) };",
          "    let count = 134217727 - unsafe { bytes_mut.get_vec_pos() };",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "}"
        ],
        "oracle": [
          "    let bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap, 134217727);",
          "    assert!(unsafe { bytes_mut.get_vec_pos() } == 0);",
          "    unsafe { bytes_mut.set_vec_pos(134217727) };",
          "    let count = 134217727 - unsafe { bytes_mut.get_vec_pos() };",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert!(unsafe { bytes_mut.get_vec_pos() } == 134217727);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.set_vec_pos(134217727) };",
          "    let count = 134217727 - unsafe { bytes_mut.get_vec_pos() };",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "    let bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap, 134217727);",
          "    assert!(unsafe { bytes_mut.get_vec_pos() } == 0);",
          "    unsafe { bytes_mut.set_vec_pos(134217727) };",
          "    let count = 134217727 - unsafe { bytes_mut.get_vec_pos() };",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap, 0);",
          "    assert!(unsafe { bytes_mut.get_vec_pos() } == 134217727);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.set_vec_pos(67108863) }; // Half of MAX_VEC_POS",
          "    let count = 134217727 - unsafe { bytes_mut.get_vec_pos() };",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap(), 0);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), unsafe { bytes_mut.ptr.as_ptr().add(134217727) });",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.is_empty());"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.set_vec_pos(67108863) }; // Half of MAX_VEC_POS",
          "    let count = 134217727 - unsafe { bytes_mut.get_vec_pos() };",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "    assert_eq!(bytes_mut.len(), 0);",
          "    assert_eq!(bytes_mut.cap(), 0);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), unsafe { bytes_mut.ptr.as_ptr().add(134217727) });",
          "    assert_eq!(bytes_mut.kind(), KIND_VEC);",
          "    assert!(bytes_mut.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.set_vec_pos(134217726) }; // One less than MAX_VEC_POS",
          "    let count = 1;",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bytes_mut.len(), 134217726);",
          "    assert_eq!(bytes_mut.cap(), 134217726);",
          "    assert_eq!(bytes_mut.spare_capacity_mut().len(), 134217726);",
          "    assert_eq!(unsafe { bytes_mut.get_vec_pos() }, 134217727);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), unsafe { bytes_mut.ptr.as_ptr().add(count) });",
          "    assert!(bytes_mut.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut bytes_mut = unsafe { BytesMut::with_capacity(134217727) };",
          "    unsafe { bytes_mut.set_vec_pos(134217726) }; // One less than MAX_VEC_POS",
          "    let count = 1;",
          "    unsafe { bytes_mut.advance_unchecked(count) };",
          "    assert_eq!(bytes_mut.len(), 134217726);",
          "    assert_eq!(bytes_mut.cap(), 134217726);",
          "    assert_eq!(bytes_mut.spare_capacity_mut().len(), 134217726);",
          "    assert_eq!(unsafe { bytes_mut.get_vec_pos() }, 134217727);",
          "    assert_eq!(bytes_mut.ptr.as_ptr(), unsafe { bytes_mut.ptr.as_ptr().add(count) });",
          "    assert!(bytes_mut.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]