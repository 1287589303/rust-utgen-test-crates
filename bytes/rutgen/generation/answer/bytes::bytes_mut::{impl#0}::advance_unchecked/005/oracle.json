[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::new();",
          "        buffer.reserve(10); // Ensure we have some capacity",
          "        buffer.advance_unchecked(0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(buffer.capacity(), 10);",
          "    assert_eq!(buffer.ptr.as_ptr(), buffer.ptr.as_ptr());",
          "    assert!(buffer.cap == 10);",
          "    unsafe { assert!(buffer.ptr != ptr::null_mut()); }",
          "    // Verify state after call without changing it when count is 0."
        ],
        "code": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::new();",
          "        buffer.reserve(10); // Ensure we have some capacity",
          "        buffer.advance_unchecked(0);",
          "    }",
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(buffer.capacity(), 10);",
          "    assert_eq!(buffer.ptr.as_ptr(), buffer.ptr.as_ptr());",
          "    assert!(buffer.cap == 10);",
          "    unsafe { assert!(buffer.ptr != ptr::null_mut()); }",
          "    // Verify state after call without changing it when count is 0.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::with_capacity(10);",
          "        buffer.advance_unchecked(11); // count is greater than capacity",
          "    }",
          "}"
        ],
        "oracle": [
          "    #[should_panic]",
          "    unsafe { buffer.advance_unchecked(0); } // count is 0, should be a no-op",
          "    ",
          "    #[should_panic]",
          "    unsafe { buffer.advance_unchecked(11); } // count exceeds current capacity, should panic"
        ],
        "code": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::with_capacity(10);",
          "        buffer.advance_unchecked(11); // count is greater than capacity",
          "    }",
          "    #[should_panic]",
          "    unsafe { buffer.advance_unchecked(0); } // count is 0, should be a no-op",
          "    ",
          "    #[should_panic]",
          "    unsafe { buffer.advance_unchecked(11); } // count exceeds current capacity, should panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::with_capacity(10);",
          "        buffer.advance_unchecked(11); // count is cap + 1",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 10); // len should remain unchanged",
          "    assert_eq!(buffer.cap(), 10); // capacity should remain unchanged",
          "    assert!(buffer.is_empty() == false); // buffer should not be empty",
          "    assert!(buffer.ptr.is_null() == false); // pointer should not be null",
          "    assert!(buffer.kind() == KIND_VEC); // kind should still be KIND_VEC"
        ],
        "code": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::with_capacity(10);",
          "        buffer.advance_unchecked(11); // count is cap + 1",
          "    }",
          "    assert_eq!(buffer.len(), 10); // len should remain unchanged",
          "    assert_eq!(buffer.cap(), 10); // capacity should remain unchanged",
          "    assert!(buffer.is_empty() == false); // buffer should not be empty",
          "    assert!(buffer.ptr.is_null() == false); // pointer should not be null",
          "    assert!(buffer.kind() == KIND_VEC); // kind should still be KIND_VEC",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::with_capacity(10);",
          "        buffer.advance_unchecked(usize::MAX); // count is maximum representable usize",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe {",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    buffer.advance_unchecked(0); // count == 0",
          "    }",
          "    }).is_err());",
          "    ",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe {",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    buffer.advance_unchecked(11); // count > self.cap",
          "    }",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    unsafe {",
          "        let mut buffer = BytesMut::with_capacity(10);",
          "        buffer.advance_unchecked(usize::MAX); // count is maximum representable usize",
          "    }",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe {",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    buffer.advance_unchecked(0); // count == 0",
          "    }",
          "    }).is_err());",
          "    ",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe {",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    buffer.advance_unchecked(11); // count > self.cap",
          "    }",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]