[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = BytesMut::new();",
          "    unsafe {",
          "        buffer.advance_unchecked(0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let mut buffer = BytesMut::new();",
          "    unsafe { buffer.advance_unchecked(0); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, buffer.cap); }",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    unsafe { buffer.advance_unchecked(buffer.cap); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, 0); }",
          "    let mut buffer = BytesMut::with_capacity(5);",
          "    unsafe { buffer.advance_unchecked(0); assert_eq!(buffer.len(), 5); assert_eq!(buffer.cap, 5); }",
          "    let mut buffer = BytesMut::new();",
          "    let count = 1;",
          "    unsafe { buffer.advance_unchecked(count); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, 0); }",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    unsafe { buffer.advance_unchecked(buffer.cap); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, 0); }"
        ],
        "code": [
          "{",
          "    let mut buffer = BytesMut::new();",
          "    unsafe {",
          "        buffer.advance_unchecked(0);",
          "    }",
          "    let mut buffer = BytesMut::new();",
          "    unsafe { buffer.advance_unchecked(0); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, buffer.cap); }",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    unsafe { buffer.advance_unchecked(buffer.cap); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, 0); }",
          "    let mut buffer = BytesMut::with_capacity(5);",
          "    unsafe { buffer.advance_unchecked(0); assert_eq!(buffer.len(), 5); assert_eq!(buffer.cap, 5); }",
          "    let mut buffer = BytesMut::new();",
          "    let count = 1;",
          "    unsafe { buffer.advance_unchecked(count); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, 0); }",
          "    let mut buffer = BytesMut::with_capacity(10);",
          "    unsafe { buffer.advance_unchecked(buffer.cap); assert_eq!(buffer.len(), 0); assert_eq!(buffer.cap, 0); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 10;",
          "    let mut buffer = BytesMut::with_capacity(cap);",
          "    unsafe {",
          "        buffer.advance_unchecked(cap);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(buffer.capacity(), cap);",
          "    assert!(buffer.ptr.as_ptr() != ptr::null_mut());",
          "    assert_eq!(buffer.cap, 0);",
          "    assert!(buffer.is_empty());"
        ],
        "code": [
          "{",
          "    let cap = 10;",
          "    let mut buffer = BytesMut::with_capacity(cap);",
          "    unsafe {",
          "        buffer.advance_unchecked(cap);",
          "    }",
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(buffer.capacity(), cap);",
          "    assert!(buffer.ptr.as_ptr() != ptr::null_mut());",
          "    assert_eq!(buffer.cap, 0);",
          "    assert!(buffer.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap = 5;",
          "    let mut buffer = BytesMut::with_capacity(cap);",
          "    unsafe {",
          "        buffer.advance_unchecked(3);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), cap - 3);",
          "    assert_eq!(buffer.cap, cap - 3);",
          "    assert!(buffer.ptr.as_ptr() != original_ptr);"
        ],
        "code": [
          "{",
          "    let cap = 5;",
          "    let mut buffer = BytesMut::with_capacity(cap);",
          "    unsafe {",
          "        buffer.advance_unchecked(3);",
          "    }",
          "    assert_eq!(buffer.len(), cap - 3);",
          "    assert_eq!(buffer.cap, cap - 3);",
          "    assert!(buffer.ptr.as_ptr() != original_ptr);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buffer = BytesMut::new();",
          "    unsafe {",
          "        buffer.advance_unchecked(0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(buffer.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let mut buffer = BytesMut::new();",
          "    unsafe {",
          "        buffer.advance_unchecked(0);",
          "    }",
          "    assert_eq!(buffer.len(), 0);",
          "    assert_eq!(buffer.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]