[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = TryGetError { requested: 0, available: 0 };",
          "    let _result: std::io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap(), &TryGetError { requested: 0, available: 0 });"
        ],
        "code": [
          "{",
          "    let error = TryGetError { requested: 0, available: 0 };",
          "    let _result: std::io::Error = error.into();",
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap(), &TryGetError { requested: 0, available: 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = TryGetError { requested: 0, available: 5 };",
          "    let _result: std::io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap().requested, 0);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap().available, 5);"
        ],
        "code": [
          "{",
          "    let error = TryGetError { requested: 0, available: 5 };",
          "    let _result: std::io::Error = error.into();",
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap().requested, 0);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap().available, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = TryGetError { requested: 5, available: 0 };",
          "    let _result: std::io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap(), &error);"
        ],
        "code": [
          "{",
          "    let error = TryGetError { requested: 5, available: 0 };",
          "    let _result: std::io::Error = error.into();",
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.get_ref().downcast_ref::<TryGetError>().unwrap(), &error);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = TryGetError { requested: 5, available: 5 };",
          "    let _result: std::io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.requested, 5);",
          "    assert_eq!(error.available, 5);",
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.to_string(), format!(\"{}\", error));"
        ],
        "code": [
          "{",
          "    let error = TryGetError { requested: 5, available: 5 };",
          "    let _result: std::io::Error = error.into();",
          "    assert_eq!(error.requested, 5);",
          "    assert_eq!(error.available, 5);",
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.to_string(), format!(\"{}\", error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = TryGetError { requested: 10, available: 5 };",
          "    let _result: std::io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.to_string(), \"TryGetError { requested: 10, available: 5 }\");",
          "    assert_eq!(error.requested, 10);",
          "    assert_eq!(error.available, 5);"
        ],
        "code": [
          "{",
          "    let error = TryGetError { requested: 10, available: 5 };",
          "    let _result: std::io::Error = error.into();",
          "    assert_eq!(_result.kind(), std::io::ErrorKind::Other);",
          "    assert_eq!(_result.to_string(), \"TryGetError { requested: 10, available: 5 }\");",
          "    assert_eq!(error.requested, 10);",
          "    assert_eq!(error.available, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = TryGetError { requested: 10, available: 10 };",
          "    let _result: std::io::Error = error.into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(error.requested, 10);",
          "    assert_eq!(error.available, 10);",
          "    assert!(std::io::Error::from(error).kind() == std::io::ErrorKind::Other);",
          "    assert!(std::io::Error::from(error).source().is_none());"
        ],
        "code": [
          "{",
          "    let error = TryGetError { requested: 10, available: 10 };",
          "    let _result: std::io::Error = error.into();",
          "    assert_eq!(error.requested, 10);",
          "    assert_eq!(error.available, 10);",
          "    assert!(std::io::Error::from(error).kind() == std::io::ErrorKind::Other);",
          "    assert!(std::io::Error::from(error).source().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]