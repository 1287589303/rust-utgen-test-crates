[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "struct OwnedLifetime {",
      "    ref_cnt: AtomicUsize,",
      "    drop: fn(*mut ()),",
      "}",
      "",
      "extern \"C\" fn drop_fn(_ptr: *mut ()) {",
      "    // Dummy drop function for testing purposes.",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ref_count = AtomicUsize::new(2);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0; // or any non-negative value",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    let ref_count = AtomicUsize::new(2);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert_eq!(ref_count.load(Ordering::Acquire), 1);",
          "    ",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert_eq!(ref_count.load(Ordering::Acquire), 0);",
          "    ",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert!(data.load(Ordering::Relaxed).is_null());",
          "    ",
          "    let ref_count = AtomicUsize::new(0);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert!(data.load(Ordering::Relaxed).is_null());"
        ],
        "code": [
          "{",
          "    let ref_count = AtomicUsize::new(2);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0; // or any non-negative value",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "    let ref_count = AtomicUsize::new(2);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert_eq!(ref_count.load(Ordering::Acquire), 1);",
          "    ",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert_eq!(ref_count.load(Ordering::Acquire), 0);",
          "    ",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert!(data.load(Ordering::Relaxed).is_null());",
          "    ",
          "    let ref_count = AtomicUsize::new(0);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "    unsafe { owned_drop(&mut data, ptr, len); }",
          "    assert!(data.load(Ordering::Relaxed).is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    unsafe {",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    }",
          "    ",
          "    unsafe {",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "    assert!(std::panic::catch_unwind(|| { owned_drop(&mut data, ptr, len); }).is_ok());",
          "    }",
          "    ",
          "    unsafe {",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    owned_drop(&mut data, std::ptr::null(), 0);",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), true);",
          "    }"
        ],
        "code": [
          "{",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "    unsafe {",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    }",
          "    ",
          "    unsafe {",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = std::ptr::null();",
          "    let len: usize = 0;",
          "    assert!(std::panic::catch_unwind(|| { owned_drop(&mut data, ptr, len); }).is_ok());",
          "    }",
          "    ",
          "    unsafe {",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    owned_drop(&mut data, std::ptr::null(), 0);",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), true);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let ref_count = AtomicUsize::new(0);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 0);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe { owned_drop(&mut data, ptr, len);",
          "    }).is_err());",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 1);",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe { owned_drop(&mut data, ptr, len);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let ref_count = AtomicUsize::new(0);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 0);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe { owned_drop(&mut data, ptr, len);",
          "    }).is_err());",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 1);",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    unsafe { owned_drop(&mut data, ptr, len);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 1);",
          "    unsafe { owned_drop(&mut data, ptr, 0); }",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 0);",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), true);"
        ],
        "code": [
          "{",
          "    let ref_count = AtomicUsize::new(1);",
          "    let data = AtomicPtr::new(Box::into_raw(Box::new(OwnedLifetime { ref_cnt: ref_count.clone(), drop: drop_fn })));",
          "    let ptr: *const u8 = data.load(Ordering::Relaxed);",
          "    let len: usize = 0;",
          "",
          "    unsafe {",
          "        owned_drop(&mut data, ptr, len);",
          "    }",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), false);",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 1);",
          "    unsafe { owned_drop(&mut data, ptr, 0); }",
          "    assert_eq!(ref_count.load(Ordering::Relaxed), 0);",
          "    assert_eq!(data.load(Ordering::Relaxed).is_null(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]