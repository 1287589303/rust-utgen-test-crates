[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\";",
          "    let result = buf.get_u128_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0x01020304050607080910111213141516, result);",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u128_ne()).is_err());",
          "    buf.advance(16);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.advance(1);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u128_ne()).is_err());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x10\\x11\\x12\\x13\\x14\\x15\\x16\";",
          "    let result = buf.get_u128_ne();",
          "    assert_eq!(0x01020304050607080910111213141516, result);",
          "    assert_eq!(buf.remaining(), 0);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u128_ne()).is_err());",
          "    buf.advance(16);",
          "    assert_eq!(buf.remaining(), 0);",
          "    buf.advance(1);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u128_ne()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let result = buf.get_u128_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0x01020304050607080910111213141516);",
          "    assert!(buf.remaining() < 16);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u128_ne()).is_err());",
          "    assert_eq!(buf.remaining(), 8);"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\";",
          "    let result = buf.get_u128_ne();",
          "    assert_eq!(result, 0x01020304050607080910111213141516);",
          "    assert!(buf.remaining() < 16);",
          "    assert!(std::panic::catch_unwind(|| buf.get_u128_ne()).is_err());",
          "    assert_eq!(buf.remaining(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut buf: &[u8] = b\"\\x10\\x20\\x30\\x40\\x50\\x60\\x70\\x80\\x90\\xa0\\xb0\\xc0\\xd0\\xe0\\xf0\\x00\";",
          "    let result = buf.get_u128_ne();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0x102030405060708090A0B0C0D0E0F00, result);",
          "    assert_panics!(buf.get_u128_ne());"
        ],
        "code": [
          "{",
          "    let mut buf: &[u8] = b\"\\x10\\x20\\x30\\x40\\x50\\x60\\x70\\x80\\x90\\xa0\\xb0\\xc0\\xd0\\xe0\\xf0\\x00\";",
          "    let result = buf.get_u128_ne();",
          "    assert_eq!(0x102030405060708090A0B0C0D0E0F00, result);",
          "    assert_panics!(buf.get_u128_ne());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]