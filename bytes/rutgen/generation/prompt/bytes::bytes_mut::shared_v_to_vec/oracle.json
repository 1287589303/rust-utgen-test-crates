{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/bytes_mut.rs\n// crate name is bytes\nuse core::iter::FromIterator;\nuse core::mem::{self, ManuallyDrop, MaybeUninit};\nuse core::ops::{Deref, DerefMut};\nuse core::ptr::{self, NonNull};\nuse core::{cmp, fmt, hash, isize, slice, usize};\nuse alloc::{\n    borrow::{Borrow, BorrowMut},\n    boxed::Box, string::String, vec, vec::Vec,\n};\nuse crate::buf::{IntoIter, UninitSlice};\nuse crate::bytes::Vtable;\n#[allow(unused)]\nuse crate::loom::sync::atomic::AtomicMut;\nuse crate::loom::sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse crate::{offset_from, Buf, BufMut, Bytes, TryGetError};\nstatic SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_v_clone,\n    into_vec: shared_v_to_vec,\n    into_mut: shared_v_to_mut,\n    is_unique: shared_v_is_unique,\n    drop: shared_v_drop,\n};\nconst _: [(); 0 - mem::align_of::<Shared>() % 2] = [];\nconst KIND_ARC: usize = 0b0;\nconst KIND_VEC: usize = 0b1;\nconst KIND_MASK: usize = 0b1;\nconst MAX_ORIGINAL_CAPACITY_WIDTH: usize = 17;\nconst MIN_ORIGINAL_CAPACITY_WIDTH: usize = 10;\nconst ORIGINAL_CAPACITY_MASK: usize = 0b11100;\nconst ORIGINAL_CAPACITY_OFFSET: usize = 2;\nconst VEC_POS_OFFSET: usize = 5;\nconst MAX_VEC_POS: usize = usize::MAX >> VEC_POS_OFFSET;\nconst NOT_VEC_POS_MASK: usize = 0b11111;\n#[cfg(target_pointer_width = \"64\")]\nconst PTR_WIDTH: usize = 64;\n#[cfg(target_pointer_width = \"32\")]\nconst PTR_WIDTH: usize = 32;\nstruct Shared {\n    vec: Vec<u8>,\n    original_capacity_repr: usize,\n    ref_count: AtomicUsize,\n}\nimpl Shared {\n    fn is_unique(&self) -> bool {\n        self.ref_count.load(Ordering::Acquire) == 1\n    }\n}\nunsafe fn shared_v_to_vec(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {\n    let shared: *mut Shared = data.load(Ordering::Relaxed).cast();\n    if (*shared).is_unique() {\n        let shared = &mut *shared;\n        let mut vec = mem::replace(&mut shared.vec, Vec::new());\n        release_shared(shared);\n        ptr::copy(ptr, vec.as_mut_ptr(), len);\n        vec.set_len(len);\n        vec\n    } else {\n        let v = slice::from_raw_parts(ptr, len).to_vec();\n        release_shared(shared);\n        v\n    }\n}\nunsafe fn release_shared(ptr: *mut Shared) {\n    if (*ptr).ref_count.fetch_sub(1, Ordering::Release) != 1 {\n        return;\n    }\n    (*ptr).ref_count.load(Ordering::Acquire);\n    drop(Box::from_raw(ptr));\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1793 unsafe fn shared_v_to_vec(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> Vec<u8> {\n1794     let shared: *mut Shared = data.load(Ordering::Relaxed).cast();\n1795 \n1796     if (*shared).is_unique() {\n1797         let shared = &mut *shared;\n1798 \n1799         // Drop shared\n1800         let mut vec = mem::replace(&mut shared.vec, Vec::new());\n1801         release_shared(shared);\n1802 \n1803         // Copy back buffer\n1804         ptr::copy(ptr, vec.as_mut_ptr(), len);\n1805         vec.set_len(len);\n1806 \n1807         vec\n1808     } else {\n1809         let v = slice::from_raw_parts(ptr, len).to_vec();\n1810         release_shared(shared);\n1811         v\n1812     }\n1813 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}