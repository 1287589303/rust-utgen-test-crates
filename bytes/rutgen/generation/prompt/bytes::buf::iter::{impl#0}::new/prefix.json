{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/iter.rs\n// crate name is bytes\nuse crate::Buf;\n#[derive(Debug)]\npub struct IntoIter<T> {\n    inner: T,\n}\nimpl<T> IntoIter<T> {\n    pub fn new(inner: T) -> IntoIter<T> {\n        IntoIter { inner }\n    }\n    pub fn into_inner(self) -> T {}\n    pub fn get_ref(&self) -> &T {}\n    pub fn get_mut(&mut self) -> &mut T {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates an iterator over the bytes contained by the buffer.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let buf = Bytes::from_static(b\"abc\");\n/// let mut iter = buf.into_iter();\n///\n/// assert_eq!(iter.next(), Some(b'a'));\n/// assert_eq!(iter.next(), Some(b'b'));\n/// assert_eq!(iter.next(), Some(b'c'));\n/// assert_eq!(iter.next(), None);\n/// ```\n41 pub fn new(inner: T) -> IntoIter<T> {\n42     IntoIter { inner }\n43 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}