{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/iter.rs\n// crate name is bytes\nuse crate::Buf;\n#[derive(Debug)]\npub struct IntoIter<T> {\n    inner: T,\n}\nimpl<T> IntoIter<T> {\n    pub fn new(inner: T) -> IntoIter<T> {\n        IntoIter { inner }\n    }\n    pub fn into_inner(self) -> T {}\n    pub fn get_ref(&self) -> &T {}\n    pub fn get_mut(&mut self) -> &mut T {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates an iterator over the bytes contained by the buffer.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::Bytes;\n///\n/// let buf = Bytes::from_static(b\"abc\");\n/// let mut iter = buf.into_iter();\n///\n/// assert_eq!(iter.next(), Some(b'a'));\n/// assert_eq!(iter.next(), Some(b'b'));\n/// assert_eq!(iter.next(), Some(b'c'));\n/// assert_eq!(iter.next(), None);\n/// ```\n41 pub fn new(inner: T) -> IntoIter<T> {\n42     IntoIter { inner }\n43 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}