{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is bytes\npub use crate::buf::{Buf, BufMut};\npub use crate::bytes::Bytes;\npub use crate::bytes_mut::BytesMut;\n#[inline(always)]\n#[cfg(feature = \"std\")]\nfn min_u64_usize(a: u64, b: usize) -> usize {\n    use core::convert::TryFrom;\n    match usize::try_from(a) {\n        Ok(a) => usize::min(a, b),\n        Err(_) => b,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n126 fn min_u64_usize(a: u64, b: usize) -> usize {\n127     use core::convert::TryFrom;\n128     match usize::try_from(a) {\n129         Ok(a) => usize::min(a, b),\n130         Err(_) => b,\n131     }\n132 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}