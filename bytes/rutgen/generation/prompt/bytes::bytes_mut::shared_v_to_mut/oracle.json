{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/bytes_mut.rs\n// crate name is bytes\nuse core::iter::FromIterator;\nuse core::mem::{self, ManuallyDrop, MaybeUninit};\nuse core::ops::{Deref, DerefMut};\nuse core::ptr::{self, NonNull};\nuse core::{cmp, fmt, hash, isize, slice, usize};\nuse alloc::{\n    borrow::{Borrow, BorrowMut},\n    boxed::Box, string::String, vec, vec::Vec,\n};\nuse crate::buf::{IntoIter, UninitSlice};\nuse crate::bytes::Vtable;\n#[allow(unused)]\nuse crate::loom::sync::atomic::AtomicMut;\nuse crate::loom::sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse crate::{offset_from, Buf, BufMut, Bytes, TryGetError};\nstatic SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_v_clone,\n    into_vec: shared_v_to_vec,\n    into_mut: shared_v_to_mut,\n    is_unique: shared_v_is_unique,\n    drop: shared_v_drop,\n};\nconst _: [(); 0 - mem::align_of::<Shared>() % 2] = [];\nconst KIND_ARC: usize = 0b0;\nconst KIND_VEC: usize = 0b1;\nconst KIND_MASK: usize = 0b1;\nconst MAX_ORIGINAL_CAPACITY_WIDTH: usize = 17;\nconst MIN_ORIGINAL_CAPACITY_WIDTH: usize = 10;\nconst ORIGINAL_CAPACITY_MASK: usize = 0b11100;\nconst ORIGINAL_CAPACITY_OFFSET: usize = 2;\nconst VEC_POS_OFFSET: usize = 5;\nconst MAX_VEC_POS: usize = usize::MAX >> VEC_POS_OFFSET;\nconst NOT_VEC_POS_MASK: usize = 0b11111;\n#[cfg(target_pointer_width = \"64\")]\nconst PTR_WIDTH: usize = 64;\n#[cfg(target_pointer_width = \"32\")]\nconst PTR_WIDTH: usize = 32;\npub struct BytesMut {\n    ptr: NonNull<u8>,\n    len: usize,\n    cap: usize,\n    data: *mut Shared,\n}\nstruct Shared {\n    vec: Vec<u8>,\n    original_capacity_repr: usize,\n    ref_count: AtomicUsize,\n}\nimpl BytesMut {\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> BytesMut {}\n    #[inline]\n    pub fn new() -> BytesMut {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn capacity(&self) -> usize {}\n    #[inline]\n    pub fn freeze(self) -> Bytes {}\n    pub fn zeroed(len: usize) -> BytesMut {}\n    #[must_use = \"consider BytesMut::truncate if you don't need the other half\"]\n    pub fn split_off(&mut self, at: usize) -> BytesMut {}\n    #[must_use = \"consider BytesMut::clear if you don't need the other half\"]\n    pub fn split(&mut self) -> BytesMut {}\n    #[must_use = \"consider BytesMut::advance if you don't need the other half\"]\n    pub fn split_to(&mut self, at: usize) -> BytesMut {}\n    pub fn truncate(&mut self, len: usize) {}\n    pub fn clear(&mut self) {}\n    pub fn resize(&mut self, new_len: usize, value: u8) {}\n    #[inline]\n    pub unsafe fn set_len(&mut self, len: usize) {}\n    #[inline]\n    pub fn reserve(&mut self, additional: usize) {}\n    fn reserve_inner(&mut self, additional: usize, allocate: bool) -> bool {}\n    #[inline]\n    #[must_use = \"consider BytesMut::reserve if you need an infallible reservation\"]\n    pub fn try_reclaim(&mut self, additional: usize) -> bool {}\n    #[inline]\n    pub fn extend_from_slice(&mut self, extend: &[u8]) {}\n    pub fn unsplit(&mut self, other: BytesMut) {}\n    #[inline]\n    pub(crate) fn from_vec(vec: Vec<u8>) -> BytesMut {\n        let mut vec = ManuallyDrop::new(vec);\n        let ptr = vptr(vec.as_mut_ptr());\n        let len = vec.len();\n        let cap = vec.capacity();\n        let original_capacity_repr = original_capacity_to_repr(cap);\n        let data = (original_capacity_repr << ORIGINAL_CAPACITY_OFFSET) | KIND_VEC;\n        BytesMut {\n            ptr,\n            len,\n            cap,\n            data: invalid_ptr(data),\n        }\n    }\n    #[inline]\n    fn as_slice(&self) -> &[u8] {}\n    #[inline]\n    fn as_slice_mut(&mut self) -> &mut [u8] {}\n    pub(crate) unsafe fn advance_unchecked(&mut self, count: usize) {}\n    fn try_unsplit(&mut self, other: BytesMut) -> Result<(), BytesMut> {}\n    #[inline]\n    fn kind(&self) -> usize {}\n    unsafe fn promote_to_shared(&mut self, ref_cnt: usize) {}\n    #[inline]\n    unsafe fn shallow_clone(&mut self) -> BytesMut {}\n    #[inline]\n    unsafe fn get_vec_pos(&self) -> usize {}\n    #[inline]\n    unsafe fn set_vec_pos(&mut self, pos: usize) {}\n    #[inline]\n    pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<u8>] {}\n}\nimpl Shared {\n    fn is_unique(&self) -> bool {\n        self.ref_count.load(Ordering::Acquire) == 1\n    }\n}\nunsafe fn shared_v_to_mut(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> BytesMut {\n    let shared: *mut Shared = data.load(Ordering::Relaxed).cast();\n    if (*shared).is_unique() {\n        let shared = &mut *shared;\n        let v = &mut shared.vec;\n        let v_capacity = v.capacity();\n        let v_ptr = v.as_mut_ptr();\n        let offset = offset_from(ptr as *mut u8, v_ptr);\n        let cap = v_capacity - offset;\n        let ptr = vptr(ptr as *mut u8);\n        BytesMut {\n            ptr,\n            len,\n            cap,\n            data: shared,\n        }\n    } else {\n        let v = slice::from_raw_parts(ptr, len).to_vec();\n        release_shared(shared);\n        BytesMut::from_vec(v)\n    }\n}\n#[inline]\nfn offset_from(dst: *const u8, original: *const u8) -> usize {\n    dst as usize - original as usize\n}\nunsafe fn release_shared(ptr: *mut Shared) {\n    if (*ptr).ref_count.fetch_sub(1, Ordering::Release) != 1 {\n        return;\n    }\n    (*ptr).ref_count.load(Ordering::Acquire);\n    drop(Box::from_raw(ptr));\n}\n#[inline]\nfn vptr(ptr: *mut u8) -> NonNull<u8> {\n    if cfg!(debug_assertions) {\n        NonNull::new(ptr).expect(\"Vec pointer should be non-null\")\n    } else {\n        unsafe { NonNull::new_unchecked(ptr) }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1815 unsafe fn shared_v_to_mut(data: &AtomicPtr<()>, ptr: *const u8, len: usize) -> BytesMut {\n1816     let shared: *mut Shared = data.load(Ordering::Relaxed).cast();\n1817 \n1818     if (*shared).is_unique() {\n1819         let shared = &mut *shared;\n1820 \n1821         // The capacity is always the original capacity of the buffer\n1822         // minus the offset from the start of the buffer\n1823         let v = &mut shared.vec;\n1824         let v_capacity = v.capacity();\n1825         let v_ptr = v.as_mut_ptr();\n1826         let offset = offset_from(ptr as *mut u8, v_ptr);\n1827         let cap = v_capacity - offset;\n1828 \n1829         let ptr = vptr(ptr as *mut u8);\n1830 \n1831         BytesMut {\n1832             ptr,\n1833             len,\n1834             cap,\n1835             data: shared,\n1836         }\n1837     } else {\n1838         let v = slice::from_raw_parts(ptr, len).to_vec();\n1839         release_shared(shared);\n1840         BytesMut::from_vec(v)\n1841     }\n1842 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}