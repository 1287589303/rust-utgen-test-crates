{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/uninit_slice.rs\n// crate name is bytes\nuse core::fmt;\nuse core::mem::MaybeUninit;\nuse core::ops::{\n    Index, IndexMut, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo,\n    RangeToInclusive,\n};\n#[repr(transparent)]\npub struct UninitSlice([MaybeUninit<u8>]);\nimpl UninitSlice {\n    #[inline]\n    pub fn new(slice: &mut [u8]) -> &mut UninitSlice {}\n    #[inline]\n    pub fn uninit(slice: &mut [MaybeUninit<u8>]) -> &mut UninitSlice {\n        unsafe { &mut *(slice as *mut [MaybeUninit<u8>] as *mut UninitSlice) }\n    }\n    fn uninit_ref(slice: &[MaybeUninit<u8>]) -> &UninitSlice {}\n    #[inline]\n    pub unsafe fn from_raw_parts_mut<'a>(\n        ptr: *mut u8,\n        len: usize,\n    ) -> &'a mut UninitSlice {\n        let maybe_init: &mut [MaybeUninit<u8>] = core::slice::from_raw_parts_mut(\n            ptr as *mut _,\n            len,\n        );\n        Self::uninit(maybe_init)\n    }\n    #[inline]\n    pub fn write_byte(&mut self, index: usize, byte: u8) {}\n    #[inline]\n    pub fn copy_from_slice(&mut self, src: &[u8]) {}\n    #[inline]\n    pub fn as_mut_ptr(&mut self) -> *mut u8 {}\n    #[inline]\n    pub unsafe fn as_uninit_slice_mut(&mut self) -> &mut [MaybeUninit<u8>] {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a `&mut UninitSlice` from a pointer and a length.\n///\n/// # Safety\n///\n/// The caller must ensure that `ptr` references a valid memory region owned\n/// by the caller representing a byte slice for the duration of `'a`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::buf::UninitSlice;\n///\n/// let bytes = b\"hello world\".to_vec();\n/// let ptr = bytes.as_ptr() as *mut _;\n/// let len = bytes.len();\n///\n/// let slice = unsafe { UninitSlice::from_raw_parts_mut(ptr, len) };\n/// ```\n82 pub unsafe fn from_raw_parts_mut<'a>(ptr: *mut u8, len: usize) -> &'a mut UninitSlice {\n83     let maybe_init: &mut [MaybeUninit<u8>] =\n84         core::slice::from_raw_parts_mut(ptr as *mut _, len);\n85     Self::uninit(maybe_init)\n86 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}