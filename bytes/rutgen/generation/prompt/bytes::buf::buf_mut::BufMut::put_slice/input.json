{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/buf_mut.rs\n// crate name is bytes\nuse crate::buf::{limit, Chain, Limit, UninitSlice};\n#[cfg(feature = \"std\")]\nuse crate::buf::{writer, Writer};\nuse crate::{panic_advance, panic_does_not_fit, TryGetError};\nuse core::{mem, ptr, usize};\nuse alloc::{boxed::Box, vec::Vec};\npub unsafe trait BufMut {\n    fn remaining_mut(&self) -> usize;\n    unsafe fn advance_mut(&mut self, cnt: usize);\n    #[inline]\n    fn has_remaining_mut(&self) -> bool;\n    #[cfg_attr(docsrs, doc(alias = \"bytes_mut\"))]\n    fn chunk_mut(&mut self) -> &mut UninitSlice;\n    #[inline]\n    fn put<T: super::Buf>(&mut self, mut src: T)\n    where\n        Self: Sized;\n    #[inline]\n    fn put_slice(&mut self, mut src: &[u8]) {\n        if self.remaining_mut() < src.len() {\n            panic_advance(\n                &TryGetError {\n                    requested: src.len(),\n                    available: self.remaining_mut(),\n                },\n            );\n        }\n        while !src.is_empty() {\n            let dst = self.chunk_mut();\n            let cnt = usize::min(src.len(), dst.len());\n            dst[..cnt].copy_from_slice(&src[..cnt]);\n            src = &src[cnt..];\n            unsafe { self.advance_mut(cnt) };\n        }\n    }\n    #[inline]\n    fn put_bytes(&mut self, val: u8, mut cnt: usize);\n    #[inline]\n    fn put_u8(&mut self, n: u8);\n    #[inline]\n    fn put_i8(&mut self, n: i8);\n    #[inline]\n    fn put_u16(&mut self, n: u16);\n    #[inline]\n    fn put_u16_le(&mut self, n: u16);\n    #[inline]\n    fn put_u16_ne(&mut self, n: u16);\n    #[inline]\n    fn put_i16(&mut self, n: i16);\n    #[inline]\n    fn put_i16_le(&mut self, n: i16);\n    #[inline]\n    fn put_i16_ne(&mut self, n: i16);\n    #[inline]\n    fn put_u32(&mut self, n: u32);\n    #[inline]\n    fn put_u32_le(&mut self, n: u32);\n    #[inline]\n    fn put_u32_ne(&mut self, n: u32);\n    #[inline]\n    fn put_i32(&mut self, n: i32);\n    #[inline]\n    fn put_i32_le(&mut self, n: i32);\n    #[inline]\n    fn put_i32_ne(&mut self, n: i32);\n    #[inline]\n    fn put_u64(&mut self, n: u64);\n    #[inline]\n    fn put_u64_le(&mut self, n: u64);\n    #[inline]\n    fn put_u64_ne(&mut self, n: u64);\n    #[inline]\n    fn put_i64(&mut self, n: i64);\n    #[inline]\n    fn put_i64_le(&mut self, n: i64);\n    #[inline]\n    fn put_i64_ne(&mut self, n: i64);\n    #[inline]\n    fn put_u128(&mut self, n: u128);\n    #[inline]\n    fn put_u128_le(&mut self, n: u128);\n    #[inline]\n    fn put_u128_ne(&mut self, n: u128);\n    #[inline]\n    fn put_i128(&mut self, n: i128);\n    #[inline]\n    fn put_i128_le(&mut self, n: i128);\n    #[inline]\n    fn put_i128_ne(&mut self, n: i128);\n    #[inline]\n    fn put_uint(&mut self, n: u64, nbytes: usize);\n    #[inline]\n    fn put_uint_le(&mut self, n: u64, nbytes: usize);\n    #[inline]\n    fn put_uint_ne(&mut self, n: u64, nbytes: usize);\n    #[inline]\n    fn put_int(&mut self, n: i64, nbytes: usize);\n    #[inline]\n    fn put_int_le(&mut self, n: i64, nbytes: usize);\n    #[inline]\n    fn put_int_ne(&mut self, n: i64, nbytes: usize);\n    #[inline]\n    fn put_f32(&mut self, n: f32);\n    #[inline]\n    fn put_f32_le(&mut self, n: f32);\n    #[inline]\n    fn put_f32_ne(&mut self, n: f32);\n    #[inline]\n    fn put_f64(&mut self, n: f64);\n    #[inline]\n    fn put_f64_le(&mut self, n: f64);\n    #[inline]\n    fn put_f64_ne(&mut self, n: f64);\n    #[inline]\n    fn limit(self, limit: usize) -> Limit<Self>\n    where\n        Self: Sized,\n    {\n        limit::new(self, limit)\n    }\n    #[cfg(feature = \"std\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\n    #[inline]\n    fn writer(self) -> Writer<Self>\n    where\n        Self: Sized,\n    {\n        writer::new(self)\n    }\n    #[inline]\n    fn chain_mut<U: BufMut>(self, next: U) -> Chain<Self, U>\n    where\n        Self: Sized,\n    {\n        Chain::new(self, next)\n    }\n}\n#[repr(transparent)]\npub struct UninitSlice([MaybeUninit<u8>]);\n#[derive(Debug, PartialEq, Eq)]\npub struct TryGetError {\n    /// The number of bytes necessary to get the value\n    pub requested: usize,\n    /// The number of bytes available in the buffer\n    pub available: usize,\n}\nimpl UninitSlice {\n    #[inline]\n    pub fn new(slice: &mut [u8]) -> &mut UninitSlice {}\n    #[inline]\n    pub fn uninit(slice: &mut [MaybeUninit<u8>]) -> &mut UninitSlice {}\n    fn uninit_ref(slice: &[MaybeUninit<u8>]) -> &UninitSlice {}\n    #[inline]\n    pub unsafe fn from_raw_parts_mut<'a>(\n        ptr: *mut u8,\n        len: usize,\n    ) -> &'a mut UninitSlice {}\n    #[inline]\n    pub fn write_byte(&mut self, index: usize, byte: u8) {}\n    #[inline]\n    pub fn copy_from_slice(&mut self, src: &[u8]) {\n        use core::ptr;\n        assert_eq!(self.len(), src.len());\n        unsafe {\n            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());\n        }\n    }\n    #[inline]\n    pub fn as_mut_ptr(&mut self) -> *mut u8 {}\n    #[inline]\n    pub unsafe fn as_uninit_slice_mut(&mut self) -> &mut [MaybeUninit<u8>] {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.0.len()\n    }\n}\n#[cold]\nfn panic_advance(error_info: &TryGetError) -> ! {\n    panic!(\n        \"advance out of bounds: the len is {} but advancing by {}\", error_info.available,\n        error_info.requested\n    );\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Transfer bytes into `self` from `src` and advance the cursor by the\n/// number of bytes written.\n///\n/// `self` must have enough remaining capacity to contain all of `src`.\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut dst = [0; 6];\n///\n/// {\n///     let mut buf = &mut dst[..];\n///     buf.put_slice(b\"hello\");\n///\n///     assert_eq!(1, buf.remaining_mut());\n/// }\n///\n/// assert_eq!(b\"hello\\0\", &dst);\n/// ```\n246 fn put_slice(&mut self, mut src: &[u8]) {\n247     if self.remaining_mut() < src.len() {\n248         panic_advance(&TryGetError {\n249             requested: src.len(),\n250             available: self.remaining_mut(),\n251         });\n252     }\n253 \n254     while !src.is_empty() {\n255         let dst = self.chunk_mut();\n256         let cnt = usize::min(src.len(), dst.len());\n257 \n258         dst[..cnt].copy_from_slice(&src[..cnt]);\n259         src = &src[cnt..];\n260 \n261         // SAFETY: We just initialized `cnt` bytes in `self`.\n262         unsafe { self.advance_mut(cnt) };\n263     }\n264 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}