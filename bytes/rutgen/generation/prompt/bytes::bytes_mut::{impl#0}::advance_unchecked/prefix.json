{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/bytes_mut.rs\n// crate name is bytes\nuse core::iter::FromIterator;\nuse core::mem::{self, ManuallyDrop, MaybeUninit};\nuse core::ops::{Deref, DerefMut};\nuse core::ptr::{self, NonNull};\nuse core::{cmp, fmt, hash, isize, slice, usize};\nuse alloc::{\n    borrow::{Borrow, BorrowMut},\n    boxed::Box, string::String, vec, vec::Vec,\n};\nuse crate::buf::{IntoIter, UninitSlice};\nuse crate::bytes::Vtable;\n#[allow(unused)]\nuse crate::loom::sync::atomic::AtomicMut;\nuse crate::loom::sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse crate::{offset_from, Buf, BufMut, Bytes, TryGetError};\nstatic SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_v_clone,\n    into_vec: shared_v_to_vec,\n    into_mut: shared_v_to_mut,\n    is_unique: shared_v_is_unique,\n    drop: shared_v_drop,\n};\nconst _: [(); 0 - mem::align_of::<Shared>() % 2] = [];\nconst KIND_ARC: usize = 0b0;\nconst KIND_VEC: usize = 0b1;\nconst KIND_MASK: usize = 0b1;\nconst MAX_ORIGINAL_CAPACITY_WIDTH: usize = 17;\nconst MIN_ORIGINAL_CAPACITY_WIDTH: usize = 10;\nconst ORIGINAL_CAPACITY_MASK: usize = 0b11100;\nconst ORIGINAL_CAPACITY_OFFSET: usize = 2;\nconst VEC_POS_OFFSET: usize = 5;\nconst MAX_VEC_POS: usize = usize::MAX >> VEC_POS_OFFSET;\nconst NOT_VEC_POS_MASK: usize = 0b11111;\n#[cfg(target_pointer_width = \"64\")]\nconst PTR_WIDTH: usize = 64;\n#[cfg(target_pointer_width = \"32\")]\nconst PTR_WIDTH: usize = 32;\npub struct BytesMut {\n    ptr: NonNull<u8>,\n    len: usize,\n    cap: usize,\n    data: *mut Shared,\n}\nstruct Shared {\n    vec: Vec<u8>,\n    original_capacity_repr: usize,\n    ref_count: AtomicUsize,\n}\nstruct Shared {\n    buf: *mut u8,\n    cap: usize,\n    ref_cnt: AtomicUsize,\n}\nimpl BytesMut {\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> BytesMut {}\n    #[inline]\n    pub fn new() -> BytesMut {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn capacity(&self) -> usize {}\n    #[inline]\n    pub fn freeze(self) -> Bytes {}\n    pub fn zeroed(len: usize) -> BytesMut {}\n    #[must_use = \"consider BytesMut::truncate if you don't need the other half\"]\n    pub fn split_off(&mut self, at: usize) -> BytesMut {}\n    #[must_use = \"consider BytesMut::clear if you don't need the other half\"]\n    pub fn split(&mut self) -> BytesMut {}\n    #[must_use = \"consider BytesMut::advance if you don't need the other half\"]\n    pub fn split_to(&mut self, at: usize) -> BytesMut {}\n    pub fn truncate(&mut self, len: usize) {}\n    pub fn clear(&mut self) {}\n    pub fn resize(&mut self, new_len: usize, value: u8) {}\n    #[inline]\n    pub unsafe fn set_len(&mut self, len: usize) {}\n    #[inline]\n    pub fn reserve(&mut self, additional: usize) {}\n    fn reserve_inner(&mut self, additional: usize, allocate: bool) -> bool {}\n    #[inline]\n    #[must_use = \"consider BytesMut::reserve if you need an infallible reservation\"]\n    pub fn try_reclaim(&mut self, additional: usize) -> bool {}\n    #[inline]\n    pub fn extend_from_slice(&mut self, extend: &[u8]) {}\n    pub fn unsplit(&mut self, other: BytesMut) {}\n    #[inline]\n    pub(crate) fn from_vec(vec: Vec<u8>) -> BytesMut {}\n    #[inline]\n    fn as_slice(&self) -> &[u8] {}\n    #[inline]\n    fn as_slice_mut(&mut self) -> &mut [u8] {}\n    pub(crate) unsafe fn advance_unchecked(&mut self, count: usize) {\n        if count == 0 {\n            return;\n        }\n        debug_assert!(count <= self.cap, \"internal: set_start out of bounds\");\n        let kind = self.kind();\n        if kind == KIND_VEC {\n            let pos = self.get_vec_pos() + count;\n            if pos <= MAX_VEC_POS {\n                self.set_vec_pos(pos);\n            } else {\n                self.promote_to_shared(1);\n            }\n        }\n        self.ptr = vptr(self.ptr.as_ptr().add(count));\n        self.len = self.len.checked_sub(count).unwrap_or(0);\n        self.cap -= count;\n    }\n    fn try_unsplit(&mut self, other: BytesMut) -> Result<(), BytesMut> {}\n    #[inline]\n    fn kind(&self) -> usize {\n        self.data as usize & KIND_MASK\n    }\n    unsafe fn promote_to_shared(&mut self, ref_cnt: usize) {\n        debug_assert_eq!(self.kind(), KIND_VEC);\n        debug_assert!(ref_cnt == 1 || ref_cnt == 2);\n        let original_capacity_repr = (self.data as usize & ORIGINAL_CAPACITY_MASK)\n            >> ORIGINAL_CAPACITY_OFFSET;\n        let off = (self.data as usize) >> VEC_POS_OFFSET;\n        let shared = Box::new(Shared {\n            vec: rebuild_vec(self.ptr.as_ptr(), self.len, self.cap, off),\n            original_capacity_repr,\n            ref_count: AtomicUsize::new(ref_cnt),\n        });\n        let shared = Box::into_raw(shared);\n        debug_assert_eq!(shared as usize & KIND_MASK, KIND_ARC);\n        self.data = shared;\n    }\n    #[inline]\n    unsafe fn shallow_clone(&mut self) -> BytesMut {}\n    #[inline]\n    unsafe fn get_vec_pos(&self) -> usize {\n        debug_assert_eq!(self.kind(), KIND_VEC);\n        self.data as usize >> VEC_POS_OFFSET\n    }\n    #[inline]\n    unsafe fn set_vec_pos(&mut self, pos: usize) {\n        debug_assert_eq!(self.kind(), KIND_VEC);\n        debug_assert!(pos <= MAX_VEC_POS);\n        self.data = invalid_ptr(\n            (pos << VEC_POS_OFFSET) | (self.data as usize & NOT_VEC_POS_MASK),\n        );\n    }\n    #[inline]\n    pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<u8>] {}\n}\n#[inline]\nfn vptr(ptr: *mut u8) -> NonNull<u8> {\n    if cfg!(debug_assertions) {\n        NonNull::new(ptr).expect(\"Vec pointer should be non-null\")\n    } else {\n        unsafe { NonNull::new_unchecked(ptr) }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Advance the buffer without bounds checking.\n///\n/// # SAFETY\n///\n/// The caller must ensure that `count` <= `self.cap`.\n956 pub(crate) unsafe fn advance_unchecked(&mut self, count: usize) {\n957     // Setting the start to 0 is a no-op, so return early if this is the\n958     // case.\n959     if count == 0 {\n960         return;\n961     }\n962 \n963     debug_assert!(count <= self.cap, \"internal: set_start out of bounds\");\n964 \n965     let kind = self.kind();\n966 \n967     if kind == KIND_VEC {\n968         // Setting the start when in vec representation is a little more\n969         // complicated. First, we have to track how far ahead the\n970         // \"start\" of the byte buffer from the beginning of the vec. We\n971         // also have to ensure that we don't exceed the maximum shift.\n972         let pos = self.get_vec_pos() + count;\n973 \n974         if pos <= MAX_VEC_POS {\n975             self.set_vec_pos(pos);\n976         } else {\n977             // The repr must be upgraded to ARC. This will never happen\n978             // on 64 bit systems and will only happen on 32 bit systems\n979             // when shifting past 134,217,727 bytes. As such, we don't\n980             // worry too much about performance here.\n981             self.promote_to_shared(/*ref_count = */ 1);\n982         }\n983     }\n984 \n985     // Updating the start of the view is setting `ptr` to point to the\n986     // new start and updating the `len` field to reflect the new length\n987     // of the view.\n988     self.ptr = vptr(self.ptr.as_ptr().add(count));\n989     self.len = self.len.checked_sub(count).unwrap_or(0);\n990     self.cap -= count;\n991 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}