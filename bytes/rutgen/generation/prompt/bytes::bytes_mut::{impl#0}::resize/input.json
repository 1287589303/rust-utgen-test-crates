{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/bytes_mut.rs\n// crate name is bytes\nuse core::iter::FromIterator;\nuse core::mem::{self, ManuallyDrop, MaybeUninit};\nuse core::ops::{Deref, DerefMut};\nuse core::ptr::{self, NonNull};\nuse core::{cmp, fmt, hash, isize, slice, usize};\nuse alloc::{\n    borrow::{Borrow, BorrowMut},\n    boxed::Box, string::String, vec, vec::Vec,\n};\nuse crate::buf::{IntoIter, UninitSlice};\nuse crate::bytes::Vtable;\n#[allow(unused)]\nuse crate::loom::sync::atomic::AtomicMut;\nuse crate::loom::sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse crate::{offset_from, Buf, BufMut, Bytes, TryGetError};\nstatic SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_v_clone,\n    into_vec: shared_v_to_vec,\n    into_mut: shared_v_to_mut,\n    is_unique: shared_v_is_unique,\n    drop: shared_v_drop,\n};\nconst _: [(); 0 - mem::align_of::<Shared>() % 2] = [];\nconst KIND_ARC: usize = 0b0;\nconst KIND_VEC: usize = 0b1;\nconst KIND_MASK: usize = 0b1;\nconst MAX_ORIGINAL_CAPACITY_WIDTH: usize = 17;\nconst MIN_ORIGINAL_CAPACITY_WIDTH: usize = 10;\nconst ORIGINAL_CAPACITY_MASK: usize = 0b11100;\nconst ORIGINAL_CAPACITY_OFFSET: usize = 2;\nconst VEC_POS_OFFSET: usize = 5;\nconst MAX_VEC_POS: usize = usize::MAX >> VEC_POS_OFFSET;\nconst NOT_VEC_POS_MASK: usize = 0b11111;\n#[cfg(target_pointer_width = \"64\")]\nconst PTR_WIDTH: usize = 64;\n#[cfg(target_pointer_width = \"32\")]\nconst PTR_WIDTH: usize = 32;\npub struct BytesMut {\n    ptr: NonNull<u8>,\n    len: usize,\n    cap: usize,\n    data: *mut Shared,\n}\nstruct Shared {\n    vec: Vec<u8>,\n    original_capacity_repr: usize,\n    ref_count: AtomicUsize,\n}\nstruct Shared {\n    buf: *mut u8,\n    cap: usize,\n    ref_cnt: AtomicUsize,\n}\nimpl BytesMut {\n    #[inline]\n    pub fn with_capacity(capacity: usize) -> BytesMut {}\n    #[inline]\n    pub fn new() -> BytesMut {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.len\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn capacity(&self) -> usize {}\n    #[inline]\n    pub fn freeze(self) -> Bytes {}\n    pub fn zeroed(len: usize) -> BytesMut {}\n    #[must_use = \"consider BytesMut::truncate if you don't need the other half\"]\n    pub fn split_off(&mut self, at: usize) -> BytesMut {}\n    #[must_use = \"consider BytesMut::clear if you don't need the other half\"]\n    pub fn split(&mut self) -> BytesMut {}\n    #[must_use = \"consider BytesMut::advance if you don't need the other half\"]\n    pub fn split_to(&mut self, at: usize) -> BytesMut {}\n    pub fn truncate(&mut self, len: usize) {\n        if len <= self.len() {\n            unsafe { self.set_len(len) };\n        }\n    }\n    pub fn clear(&mut self) {}\n    pub fn resize(&mut self, new_len: usize, value: u8) {\n        let additional = if let Some(additional) = new_len.checked_sub(self.len()) {\n            additional\n        } else {\n            self.truncate(new_len);\n            return;\n        };\n        if additional == 0 {\n            return;\n        }\n        self.reserve(additional);\n        let dst = self.spare_capacity_mut().as_mut_ptr();\n        unsafe { ptr::write_bytes(dst, value, additional) };\n        unsafe { self.set_len(new_len) };\n    }\n    #[inline]\n    pub unsafe fn set_len(&mut self, len: usize) {\n        debug_assert!(len <= self.cap, \"set_len out of bounds\");\n        self.len = len;\n    }\n    #[inline]\n    pub fn reserve(&mut self, additional: usize) {\n        let len = self.len();\n        let rem = self.capacity() - len;\n        if additional <= rem {\n            return;\n        }\n        let _ = self.reserve_inner(additional, true);\n    }\n    fn reserve_inner(&mut self, additional: usize, allocate: bool) -> bool {}\n    #[inline]\n    #[must_use = \"consider BytesMut::reserve if you need an infallible reservation\"]\n    pub fn try_reclaim(&mut self, additional: usize) -> bool {}\n    #[inline]\n    pub fn extend_from_slice(&mut self, extend: &[u8]) {}\n    pub fn unsplit(&mut self, other: BytesMut) {}\n    #[inline]\n    pub(crate) fn from_vec(vec: Vec<u8>) -> BytesMut {}\n    #[inline]\n    fn as_slice(&self) -> &[u8] {}\n    #[inline]\n    fn as_slice_mut(&mut self) -> &mut [u8] {}\n    pub(crate) unsafe fn advance_unchecked(&mut self, count: usize) {}\n    fn try_unsplit(&mut self, other: BytesMut) -> Result<(), BytesMut> {}\n    #[inline]\n    fn kind(&self) -> usize {}\n    unsafe fn promote_to_shared(&mut self, ref_cnt: usize) {}\n    #[inline]\n    unsafe fn shallow_clone(&mut self) -> BytesMut {}\n    #[inline]\n    unsafe fn get_vec_pos(&self) -> usize {}\n    #[inline]\n    unsafe fn set_vec_pos(&mut self, pos: usize) {}\n    #[inline]\n    pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<u8>] {\n        unsafe {\n            let ptr = self.ptr.as_ptr().add(self.len);\n            let len = self.cap - self.len;\n            slice::from_raw_parts_mut(ptr.cast(), len)\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Resizes the buffer so that `len` is equal to `new_len`.\n///\n/// If `new_len` is greater than `len`, the buffer is extended by the\n/// difference with each additional byte set to `value`. If `new_len` is\n/// less than `len`, the buffer is simply truncated.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BytesMut;\n///\n/// let mut buf = BytesMut::new();\n///\n/// buf.resize(3, 0x1);\n/// assert_eq!(&buf[..], &[0x1, 0x1, 0x1]);\n///\n/// buf.resize(2, 0x2);\n/// assert_eq!(&buf[..], &[0x1, 0x1]);\n///\n/// buf.resize(4, 0x3);\n/// assert_eq!(&buf[..], &[0x1, 0x1, 0x3, 0x3]);\n/// ```\n479 pub fn resize(&mut self, new_len: usize, value: u8) {\n480     let additional = if let Some(additional) = new_len.checked_sub(self.len()) {\n481         additional\n482     } else {\n483         self.truncate(new_len);\n484         return;\n485     };\n486 \n487     if additional == 0 {\n488         return;\n489     }\n490 \n491     self.reserve(additional);\n492     let dst = self.spare_capacity_mut().as_mut_ptr();\n493     // SAFETY: `spare_capacity_mut` returns a valid, properly aligned pointer and we've\n494     // reserved enough space to write `additional` bytes.\n495     unsafe { ptr::write_bytes(dst, value, additional) };\n496 \n497     // SAFETY: There are at least `new_len` initialized bytes in the buffer so no\n498     // uninitialized bytes are being exposed.\n499     unsafe { self.set_len(new_len) };\n500 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}