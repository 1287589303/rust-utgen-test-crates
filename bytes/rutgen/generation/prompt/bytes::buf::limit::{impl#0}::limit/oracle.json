{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/limit.rs\n// crate name is bytes\nuse crate::buf::UninitSlice;\nuse crate::BufMut;\nuse core::cmp;\n#[derive(Debug)]\npub struct Limit<T> {\n    inner: T,\n    limit: usize,\n}\nimpl<T> Limit<T> {\n    pub fn into_inner(self) -> T {}\n    pub fn get_ref(&self) -> &T {}\n    pub fn get_mut(&mut self) -> &mut T {}\n    pub fn limit(&self) -> usize {\n        self.limit\n    }\n    pub fn set_limit(&mut self, lim: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the maximum number of bytes that can be written\n///\n/// # Note\n///\n/// If the inner `BufMut` has fewer bytes than indicated by this method then\n/// that is the actual number of available bytes.\n44 pub fn limit(&self) -> usize {\n45     self.limit\n46 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}