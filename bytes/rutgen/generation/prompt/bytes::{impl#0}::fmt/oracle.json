{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is bytes\npub use crate::buf::{Buf, BufMut};\npub use crate::bytes::Bytes;\npub use crate::bytes_mut::BytesMut;\n#[derive(Debug, PartialEq, Eq)]\npub struct TryGetError {\n    /// The number of bytes necessary to get the value\n    pub requested: usize,\n    /// The number of bytes available in the buffer\n    pub available: usize,\n}\nimpl core::fmt::Display for TryGetError {\n    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {\n        write!(\n            f,\n            \"Not enough bytes remaining in buffer to read value (requested {} but only {} available)\",\n            self.requested, self.available\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n149 fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {\n150     write!(\n151         f,\n152         \"Not enough bytes remaining in buffer to read value (requested {} but only {} available)\",\n153         self.requested,\n154         self.available\n155     )\n156 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}