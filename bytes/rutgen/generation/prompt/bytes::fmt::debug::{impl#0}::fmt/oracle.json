{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/fmt/debug.rs\n// crate name is bytes\nuse core::fmt::{Debug, Formatter, Result};\nuse super::BytesRef;\nuse crate::{Bytes, BytesMut};\nstruct BytesRef<'a>(&'a [u8]);\nimpl Debug for BytesRef<'_> {\n    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n        write!(f, \"b\\\"\")?;\n        for &b in self.0 {\n            if b == b'\\n' {\n                write!(f, \"\\\\n\")?;\n            } else if b == b'\\r' {\n                write!(f, \"\\\\r\")?;\n            } else if b == b'\\t' {\n                write!(f, \"\\\\t\")?;\n            } else if b == b'\\\\' || b == b'\"' {\n                write!(f, \"\\\\{}\", b as char)?;\n            } else if b == b'\\0' {\n                write!(f, \"\\\\0\")?;\n            } else if (0x20..0x7f).contains(&b) {\n                write!(f, \"{}\", b as char)?;\n            } else {\n                write!(f, \"\\\\x{:02x}\", b)?;\n            }\n        }\n        write!(f, \"\\\"\")?;\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n13 fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n14     write!(f, \"b\\\"\")?;\n15     for &b in self.0 {\n16         // https://doc.rust-lang.org/reference/tokens.html#byte-escapes\n17         if b == b'\\n' {\n18             write!(f, \"\\\\n\")?;\n19         } else if b == b'\\r' {\n20             write!(f, \"\\\\r\")?;\n21         } else if b == b'\\t' {\n22             write!(f, \"\\\\t\")?;\n23         } else if b == b'\\\\' || b == b'\"' {\n24             write!(f, \"\\\\{}\", b as char)?;\n25         } else if b == b'\\0' {\n26             write!(f, \"\\\\0\")?;\n27         // ASCII printable\n28         } else if (0x20..0x7f).contains(&b) {\n29             write!(f, \"{}\", b as char)?;\n30         } else {\n31             write!(f, \"\\\\x{:02x}\", b)?;\n32         }\n33     }\n34     write!(f, \"\\\"\")?;\n35     Ok(())\n36 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}