{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/take.rs\n// crate name is bytes\nuse crate::Buf;\nuse core::cmp;\n#[cfg(feature = \"std\")]\nuse std::io::IoSlice;\npub trait Buf {\n    fn remaining(&self) -> usize;\n    #[cfg_attr(docsrs, doc(alias = \"bytes\"))]\n    fn chunk(&self) -> &[u8];\n    #[cfg(feature = \"std\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\n    fn chunks_vectored<'a>(&'a self, dst: &mut [IoSlice<'a>]) -> usize {\n        if dst.is_empty() {\n            return 0;\n        }\n        if self.has_remaining() {\n            dst[0] = IoSlice::new(self.chunk());\n            1\n        } else {\n            0\n        }\n    }\n    fn advance(&mut self, cnt: usize);\n    fn has_remaining(&self) -> bool;\n    fn copy_to_slice(&mut self, dst: &mut [u8]);\n    fn get_u8(&mut self) -> u8;\n    fn get_i8(&mut self) -> i8;\n    fn get_u16(&mut self) -> u16;\n    fn get_u16_le(&mut self) -> u16;\n    fn get_u16_ne(&mut self) -> u16;\n    fn get_i16(&mut self) -> i16;\n    fn get_i16_le(&mut self) -> i16;\n    fn get_i16_ne(&mut self) -> i16;\n    fn get_u32(&mut self) -> u32;\n    fn get_u32_le(&mut self) -> u32;\n    fn get_u32_ne(&mut self) -> u32;\n    fn get_i32(&mut self) -> i32;\n    fn get_i32_le(&mut self) -> i32;\n    fn get_i32_ne(&mut self) -> i32;\n    fn get_u64(&mut self) -> u64;\n    fn get_u64_le(&mut self) -> u64;\n    fn get_u64_ne(&mut self) -> u64;\n    fn get_i64(&mut self) -> i64;\n    fn get_i64_le(&mut self) -> i64;\n    fn get_i64_ne(&mut self) -> i64;\n    fn get_u128(&mut self) -> u128;\n    fn get_u128_le(&mut self) -> u128;\n    fn get_u128_ne(&mut self) -> u128;\n    fn get_i128(&mut self) -> i128;\n    fn get_i128_le(&mut self) -> i128;\n    fn get_i128_ne(&mut self) -> i128;\n    fn get_uint(&mut self, nbytes: usize) -> u64;\n    fn get_uint_le(&mut self, nbytes: usize) -> u64;\n    fn get_uint_ne(&mut self, nbytes: usize) -> u64;\n    fn get_int(&mut self, nbytes: usize) -> i64;\n    fn get_int_le(&mut self, nbytes: usize) -> i64;\n    fn get_int_ne(&mut self, nbytes: usize) -> i64;\n    fn get_f32(&mut self) -> f32;\n    fn get_f32_le(&mut self) -> f32;\n    fn get_f32_ne(&mut self) -> f32;\n    fn get_f64(&mut self) -> f64;\n    fn get_f64_le(&mut self) -> f64;\n    fn get_f64_ne(&mut self) -> f64;\n    fn try_copy_to_slice(&mut self, mut dst: &mut [u8]) -> Result<(), TryGetError>;\n    fn try_get_u8(&mut self) -> Result<u8, TryGetError>;\n    fn try_get_i8(&mut self) -> Result<i8, TryGetError>;\n    fn try_get_u16(&mut self) -> Result<u16, TryGetError>;\n    fn try_get_u16_le(&mut self) -> Result<u16, TryGetError>;\n    fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError>;\n    fn try_get_i16(&mut self) -> Result<i16, TryGetError>;\n    fn try_get_i16_le(&mut self) -> Result<i16, TryGetError>;\n    fn try_get_i16_ne(&mut self) -> Result<i16, TryGetError>;\n    fn try_get_u32(&mut self) -> Result<u32, TryGetError>;\n    fn try_get_u32_le(&mut self) -> Result<u32, TryGetError>;\n    fn try_get_u32_ne(&mut self) -> Result<u32, TryGetError>;\n    fn try_get_i32(&mut self) -> Result<i32, TryGetError>;\n    fn try_get_i32_le(&mut self) -> Result<i32, TryGetError>;\n    fn try_get_i32_ne(&mut self) -> Result<i32, TryGetError>;\n    fn try_get_u64(&mut self) -> Result<u64, TryGetError>;\n    fn try_get_u64_le(&mut self) -> Result<u64, TryGetError>;\n    fn try_get_u64_ne(&mut self) -> Result<u64, TryGetError>;\n    fn try_get_i64(&mut self) -> Result<i64, TryGetError>;\n    fn try_get_i64_le(&mut self) -> Result<i64, TryGetError>;\n    fn try_get_i64_ne(&mut self) -> Result<i64, TryGetError>;\n    fn try_get_u128(&mut self) -> Result<u128, TryGetError>;\n    fn try_get_u128_le(&mut self) -> Result<u128, TryGetError>;\n    fn try_get_u128_ne(&mut self) -> Result<u128, TryGetError>;\n    fn try_get_i128(&mut self) -> Result<i128, TryGetError>;\n    fn try_get_i128_le(&mut self) -> Result<i128, TryGetError>;\n    fn try_get_i128_ne(&mut self) -> Result<i128, TryGetError>;\n    fn try_get_uint(&mut self, nbytes: usize) -> Result<u64, TryGetError>;\n    fn try_get_uint_le(&mut self, nbytes: usize) -> Result<u64, TryGetError>;\n    fn try_get_uint_ne(&mut self, nbytes: usize) -> Result<u64, TryGetError>;\n    fn try_get_int(&mut self, nbytes: usize) -> Result<i64, TryGetError>;\n    fn try_get_int_le(&mut self, nbytes: usize) -> Result<i64, TryGetError>;\n    fn try_get_int_ne(&mut self, nbytes: usize) -> Result<i64, TryGetError>;\n    fn try_get_f32(&mut self) -> Result<f32, TryGetError>;\n    fn try_get_f32_le(&mut self) -> Result<f32, TryGetError>;\n    fn try_get_f32_ne(&mut self) -> Result<f32, TryGetError>;\n    fn try_get_f64(&mut self) -> Result<f64, TryGetError>;\n    fn try_get_f64_le(&mut self) -> Result<f64, TryGetError>;\n    fn try_get_f64_ne(&mut self) -> Result<f64, TryGetError>;\n    fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes;\n    fn take(self, limit: usize) -> Take<Self>\n    where\n        Self: Sized,\n    {\n        take::new(self, limit)\n    }\n    fn chain<U: Buf>(self, next: U) -> Chain<Self, U>\n    where\n        Self: Sized,\n    {\n        Chain::new(self, next)\n    }\n    #[cfg(feature = \"std\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\n    fn reader(self) -> Reader<Self>\n    where\n        Self: Sized,\n    {\n        reader::new(self)\n    }\n}\n#[derive(Debug)]\npub struct Take<T> {\n    inner: T,\n    limit: usize,\n}\nimpl<T: Buf> Buf for Take<T> {\n    fn remaining(&self) -> usize {}\n    fn chunk(&self) -> &[u8] {}\n    fn advance(&mut self, cnt: usize) {}\n    fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {}\n    #[cfg(feature = \"std\")]\n    fn chunks_vectored<'a>(&'a self, dst: &mut [IoSlice<'a>]) -> usize {\n        if self.limit == 0 {\n            return 0;\n        }\n        const LEN: usize = 16;\n        let mut slices: [IoSlice<'a>; LEN] = [\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n            IoSlice::new(&[]),\n        ];\n        let cnt = self.inner.chunks_vectored(&mut slices[..dst.len().min(LEN)]);\n        let mut limit = self.limit;\n        for (i, (dst, slice)) in dst[..cnt].iter_mut().zip(slices.iter()).enumerate() {\n            if let Some(buf) = slice.get(..limit) {\n                let buf = unsafe { std::mem::transmute::<&[u8], &'a [u8]>(buf) };\n                *dst = IoSlice::new(buf);\n                return i + 1;\n            } else {\n                let buf = unsafe { std::mem::transmute::<&[u8], &'a [u8]>(slice) };\n                *dst = IoSlice::new(buf);\n                limit -= slice.len();\n            }\n        }\n        cnt\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n160 fn chunks_vectored<'a>(&'a self, dst: &mut [IoSlice<'a>]) -> usize {\n161     if self.limit == 0 {\n162         return 0;\n163     }\n164 \n165     const LEN: usize = 16;\n166     let mut slices: [IoSlice<'a>; LEN] = [\n167         IoSlice::new(&[]),\n168         IoSlice::new(&[]),\n169         IoSlice::new(&[]),\n170         IoSlice::new(&[]),\n171         IoSlice::new(&[]),\n172         IoSlice::new(&[]),\n173         IoSlice::new(&[]),\n174         IoSlice::new(&[]),\n175         IoSlice::new(&[]),\n176         IoSlice::new(&[]),\n177         IoSlice::new(&[]),\n178         IoSlice::new(&[]),\n179         IoSlice::new(&[]),\n180         IoSlice::new(&[]),\n181         IoSlice::new(&[]),\n182         IoSlice::new(&[]),\n183     ];\n184 \n185     let cnt = self\n186         .inner\n187         .chunks_vectored(&mut slices[..dst.len().min(LEN)]);\n188     let mut limit = self.limit;\n189     for (i, (dst, slice)) in dst[..cnt].iter_mut().zip(slices.iter()).enumerate() {\n190         if let Some(buf) = slice.get(..limit) {\n191             // SAFETY: We could do this safely with `IoSlice::advance` if we had a larger MSRV.\n192             let buf = unsafe { std::mem::transmute::<&[u8], &'a [u8]>(buf) };\n193             *dst = IoSlice::new(buf);\n194             return i + 1;\n195         } else {\n196             // SAFETY: We could do this safely with `IoSlice::advance` if we had a larger MSRV.\n197             let buf = unsafe { std::mem::transmute::<&[u8], &'a [u8]>(slice) };\n198             *dst = IoSlice::new(buf);\n199             limit -= slice.len();\n200         }\n201     }\n202     cnt\n203 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}