{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/bytes.rs\n// crate name is bytes\nuse core::iter::FromIterator;\nuse core::mem::{self, ManuallyDrop};\nuse core::ops::{Deref, RangeBounds};\nuse core::ptr::NonNull;\nuse core::{cmp, fmt, hash, ptr, slice, usize};\nuse alloc::{\n    alloc::{dealloc, Layout},\n    borrow::Borrow, boxed::Box, string::String, vec::Vec,\n};\nuse crate::buf::IntoIter;\n#[allow(unused)]\nuse crate::loom::sync::atomic::AtomicMut;\nuse crate::loom::sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse crate::{offset_from, Buf, BytesMut};\nstatic OWNED_VTABLE: Vtable = Vtable {\n    clone: owned_clone,\n    into_vec: owned_to_vec,\n    into_mut: owned_to_mut,\n    is_unique: owned_is_unique,\n    drop: owned_drop,\n};\nstatic PROMOTABLE_EVEN_VTABLE: Vtable = Vtable {\n    clone: promotable_even_clone,\n    into_vec: promotable_even_to_vec,\n    into_mut: promotable_even_to_mut,\n    is_unique: promotable_is_unique,\n    drop: promotable_even_drop,\n};\nstatic PROMOTABLE_ODD_VTABLE: Vtable = Vtable {\n    clone: promotable_odd_clone,\n    into_vec: promotable_odd_to_vec,\n    into_mut: promotable_odd_to_mut,\n    is_unique: promotable_is_unique,\n    drop: promotable_odd_drop,\n};\nstatic SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_clone,\n    into_vec: shared_to_vec,\n    into_mut: shared_to_mut,\n    is_unique: shared_is_unique,\n    drop: shared_drop,\n};\nconst STATIC_VTABLE: Vtable = Vtable {\n    clone: static_clone,\n    into_vec: static_to_vec,\n    into_mut: static_to_mut,\n    is_unique: static_is_unique,\n    drop: static_drop,\n};\nconst _: [(); 0 - mem::align_of::<Shared>() % 2] = [];\nconst KIND_ARC: usize = 0b0;\nconst KIND_VEC: usize = 0b1;\nconst KIND_MASK: usize = 0b1;\npub struct Bytes {\n    ptr: *const u8,\n    len: usize,\n    data: AtomicPtr<()>,\n    vtable: &'static Vtable,\n}\n#[repr(C)]\nstruct OwnedLifetime {\n    ref_cnt: AtomicUsize,\n    drop: unsafe fn(*mut ()),\n}\npub(crate) struct Vtable {\n    /// fn(data, ptr, len)\n    pub clone: unsafe fn(&AtomicPtr<()>, *const u8, usize) -> Bytes,\n    /// fn(data, ptr, len)\n    ///\n    /// `into_*` consumes the `Bytes`, returning the respective value.\n    pub into_vec: unsafe fn(&AtomicPtr<()>, *const u8, usize) -> Vec<u8>,\n    pub into_mut: unsafe fn(&AtomicPtr<()>, *const u8, usize) -> BytesMut,\n    /// fn(data)\n    pub is_unique: unsafe fn(&AtomicPtr<()>) -> bool,\n    /// fn(data, ptr, len)\n    pub drop: unsafe fn(&mut AtomicPtr<()>, *const u8, usize),\n}\n#[repr(C)]\nstruct Owned<T> {\n    lifetime: OwnedLifetime,\n    owner: T,\n}\nimpl Bytes {\n    #[inline]\n    #[cfg(not(all(loom, test)))]\n    pub const fn new() -> Self {\n        const EMPTY: &[u8] = &[];\n        Bytes::from_static(EMPTY)\n    }\n    #[cfg(all(loom, test))]\n    pub fn new() -> Self {\n        const EMPTY: &[u8] = &[];\n        Bytes::from_static(EMPTY)\n    }\n    #[inline]\n    #[cfg(not(all(loom, test)))]\n    pub const fn from_static(bytes: &'static [u8]) -> Self {\n        Bytes {\n            ptr: bytes.as_ptr(),\n            len: bytes.len(),\n            data: AtomicPtr::new(ptr::null_mut()),\n            vtable: &STATIC_VTABLE,\n        }\n    }\n    #[cfg(all(loom, test))]\n    pub fn from_static(bytes: &'static [u8]) -> Self {\n        Bytes {\n            ptr: bytes.as_ptr(),\n            len: bytes.len(),\n            data: AtomicPtr::new(ptr::null_mut()),\n            vtable: &STATIC_VTABLE,\n        }\n    }\n    fn new_empty_with_ptr(ptr: *const u8) -> Self {\n        debug_assert!(! ptr.is_null());\n        let ptr = without_provenance(ptr as usize);\n        Bytes {\n            ptr,\n            len: 0,\n            data: AtomicPtr::new(ptr::null_mut()),\n            vtable: &STATIC_VTABLE,\n        }\n    }\n    pub fn from_owner<T>(owner: T) -> Self\n    where\n        T: AsRef<[u8]> + Send + 'static,\n    {\n        let owned = Box::into_raw(\n            Box::new(Owned {\n                lifetime: OwnedLifetime {\n                    ref_cnt: AtomicUsize::new(1),\n                    drop: owned_box_and_drop::<T>,\n                },\n                owner,\n            }),\n        );\n        let mut ret = Bytes {\n            ptr: NonNull::dangling().as_ptr(),\n            len: 0,\n            data: AtomicPtr::new(owned.cast()),\n            vtable: &OWNED_VTABLE,\n        };\n        let buf = unsafe { &*owned }.owner.as_ref();\n        ret.ptr = buf.as_ptr();\n        ret.len = buf.len();\n        ret\n    }\n    #[inline]\n    pub const fn len(&self) -> usize {}\n    #[inline]\n    pub const fn is_empty(&self) -> bool {}\n    pub fn is_unique(&self) -> bool {}\n    pub fn copy_from_slice(data: &[u8]) -> Self {\n        data.to_vec().into()\n    }\n    pub fn slice(&self, range: impl RangeBounds<usize>) -> Self {\n        use core::ops::Bound;\n        let len = self.len();\n        let begin = match range.start_bound() {\n            Bound::Included(&n) => n,\n            Bound::Excluded(&n) => n.checked_add(1).expect(\"out of range\"),\n            Bound::Unbounded => 0,\n        };\n        let end = match range.end_bound() {\n            Bound::Included(&n) => n.checked_add(1).expect(\"out of range\"),\n            Bound::Excluded(&n) => n,\n            Bound::Unbounded => len,\n        };\n        assert!(\n            begin <= end, \"range start must not be greater than end: {:?} <= {:?}\",\n            begin, end,\n        );\n        assert!(end <= len, \"range end out of bounds: {:?} <= {:?}\", end, len,);\n        if end == begin {\n            return Bytes::new();\n        }\n        let mut ret = self.clone();\n        ret.len = end - begin;\n        ret.ptr = unsafe { ret.ptr.add(begin) };\n        ret\n    }\n    pub fn slice_ref(&self, subset: &[u8]) -> Self {\n        if subset.is_empty() {\n            return Bytes::new();\n        }\n        let bytes_p = self.as_ptr() as usize;\n        let bytes_len = self.len();\n        let sub_p = subset.as_ptr() as usize;\n        let sub_len = subset.len();\n        assert!(\n            sub_p >= bytes_p,\n            \"subset pointer ({:p}) is smaller than self pointer ({:p})\", subset.as_ptr(),\n            self.as_ptr(),\n        );\n        assert!(\n            sub_p + sub_len <= bytes_p + bytes_len,\n            \"subset is out of bounds: self = ({:p}, {}), subset = ({:p}, {})\", self\n            .as_ptr(), bytes_len, subset.as_ptr(), sub_len,\n        );\n        let sub_offset = sub_p - bytes_p;\n        self.slice(sub_offset..(sub_offset + sub_len))\n    }\n    #[must_use = \"consider Bytes::truncate if you don't need the other half\"]\n    pub fn split_off(&mut self, at: usize) -> Self {\n        if at == self.len() {\n            return Bytes::new_empty_with_ptr(self.ptr.wrapping_add(at));\n        }\n        if at == 0 {\n            return mem::replace(self, Bytes::new_empty_with_ptr(self.ptr));\n        }\n        assert!(\n            at <= self.len(), \"split_off out of bounds: {:?} <= {:?}\", at, self.len(),\n        );\n        let mut ret = self.clone();\n        self.len = at;\n        unsafe { ret.inc_start(at) };\n        ret\n    }\n    #[must_use = \"consider Bytes::advance if you don't need the other half\"]\n    pub fn split_to(&mut self, at: usize) -> Self {\n        if at == self.len() {\n            let end_ptr = self.ptr.wrapping_add(at);\n            return mem::replace(self, Bytes::new_empty_with_ptr(end_ptr));\n        }\n        if at == 0 {\n            return Bytes::new_empty_with_ptr(self.ptr);\n        }\n        assert!(\n            at <= self.len(), \"split_to out of bounds: {:?} <= {:?}\", at, self.len(),\n        );\n        let mut ret = self.clone();\n        unsafe { self.inc_start(at) };\n        ret.len = at;\n        ret\n    }\n    #[inline]\n    pub fn truncate(&mut self, len: usize) {}\n    #[inline]\n    pub fn clear(&mut self) {}\n    pub fn try_into_mut(self) -> Result<BytesMut, Bytes> {}\n    #[inline]\n    pub(crate) unsafe fn with_vtable(\n        ptr: *const u8,\n        len: usize,\n        data: AtomicPtr<()>,\n        vtable: &'static Vtable,\n    ) -> Bytes {}\n    #[inline]\n    fn as_slice(&self) -> &[u8] {}\n    #[inline]\n    unsafe fn inc_start(&mut self, by: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create [Bytes] with a buffer whose lifetime is controlled\n/// via an explicit owner.\n///\n/// A common use case is to zero-copy construct from mapped memory.\n///\n/// ```\n/// # struct File;\n/// #\n/// # impl File {\n/// #     pub fn open(_: &str) -> Result<Self, ()> {\n/// #         Ok(Self)\n/// #     }\n/// # }\n/// #\n/// # mod memmap2 {\n/// #     pub struct Mmap;\n/// #\n/// #     impl Mmap {\n/// #         pub unsafe fn map(_file: &super::File) -> Result<Self, ()> {\n/// #             Ok(Self)\n/// #         }\n/// #     }\n/// #\n/// #     impl AsRef<[u8]> for Mmap {\n/// #         fn as_ref(&self) -> &[u8] {\n/// #             b\"buf\"\n/// #         }\n/// #     }\n/// # }\n/// use bytes::Bytes;\n/// use memmap2::Mmap;\n///\n/// # fn main() -> Result<(), ()> {\n/// let file = File::open(\"upload_bundle.tar.gz\")?;\n/// let mmap = unsafe { Mmap::map(&file) }?;\n/// let b = Bytes::from_owner(mmap);\n/// # Ok(())\n/// # }\n/// ```\n///\n/// The `owner` will be transferred to the constructed [Bytes] object, which\n/// will ensure it is dropped once all remaining clones of the constructed\n/// object are dropped. The owner will then be responsible for dropping the\n/// specified region of memory as part of its [Drop] implementation.\n///\n/// Note that converting [Bytes] constructed from an owner into a [BytesMut]\n/// will always create a deep copy of the buffer into newly allocated memory.\n251 pub fn from_owner<T>(owner: T) -> Self\n252 where\n253     T: AsRef<[u8]> + Send + 'static,\n254 {\n255     // Safety & Miri:\n256     // The ownership of `owner` is first transferred to the `Owned` wrapper and `Bytes` object.\n257     // This ensures that the owner is pinned in memory, allowing us to call `.as_ref()` safely\n258     // since the lifetime of the owner is controlled by the lifetime of the new `Bytes` object,\n259     // and the lifetime of the resulting borrowed `&[u8]` matches that of the owner.\n260     // Note that this remains safe so long as we only call `.as_ref()` once.\n261     //\n262     // There are some additional special considerations here:\n263     //   * We rely on Bytes's Drop impl to clean up memory should `.as_ref()` panic.\n264     //   * Setting the `ptr` and `len` on the bytes object last (after moving the owner to\n265     //     Bytes) allows Miri checks to pass since it avoids obtaining the `&[u8]` slice\n266     //     from a stack-owned Box.\n267     // More details on this: https://github.com/tokio-rs/bytes/pull/742/#discussion_r1813375863\n268     //                  and: https://github.com/tokio-rs/bytes/pull/742/#discussion_r1813316032\n269 \n270     let owned = Box::into_raw(Box::new(Owned {\n271         lifetime: OwnedLifetime {\n272             ref_cnt: AtomicUsize::new(1),\n273             drop: owned_box_and_drop::<T>,\n274         },\n275         owner,\n276     }));\n277 \n278     let mut ret = Bytes {\n279         ptr: NonNull::dangling().as_ptr(),\n280         len: 0,\n281         data: AtomicPtr::new(owned.cast()),\n282         vtable: &OWNED_VTABLE,\n283     };\n284 \n285     let buf = unsafe { &*owned }.owner.as_ref();\n286     ret.ptr = buf.as_ptr();\n287     ret.len = buf.len();\n288 \n289     ret\n290 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}