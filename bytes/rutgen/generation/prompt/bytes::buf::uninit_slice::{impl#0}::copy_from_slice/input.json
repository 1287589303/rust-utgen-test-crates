{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/uninit_slice.rs\n// crate name is bytes\nuse core::fmt;\nuse core::mem::MaybeUninit;\nuse core::ops::{\n    Index, IndexMut, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo,\n    RangeToInclusive,\n};\n#[repr(transparent)]\npub struct UninitSlice([MaybeUninit<u8>]);\nimpl UninitSlice {\n    #[inline]\n    pub fn new(slice: &mut [u8]) -> &mut UninitSlice {}\n    #[inline]\n    pub fn uninit(slice: &mut [MaybeUninit<u8>]) -> &mut UninitSlice {}\n    fn uninit_ref(slice: &[MaybeUninit<u8>]) -> &UninitSlice {}\n    #[inline]\n    pub unsafe fn from_raw_parts_mut<'a>(\n        ptr: *mut u8,\n        len: usize,\n    ) -> &'a mut UninitSlice {}\n    #[inline]\n    pub fn write_byte(&mut self, index: usize, byte: u8) {}\n    #[inline]\n    pub fn copy_from_slice(&mut self, src: &[u8]) {\n        use core::ptr;\n        assert_eq!(self.len(), src.len());\n        unsafe {\n            ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());\n        }\n    }\n    #[inline]\n    pub fn as_mut_ptr(&mut self) -> *mut u8 {\n        self.0.as_mut_ptr() as *mut _\n    }\n    #[inline]\n    pub unsafe fn as_uninit_slice_mut(&mut self) -> &mut [MaybeUninit<u8>] {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.0.len()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Copies bytes from `src` into `self`.\n///\n/// The length of `src` must be the same as `self`.\n///\n/// # Panics\n///\n/// The function panics if `src` has a different length than `self`.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::buf::UninitSlice;\n///\n/// let mut data = [b'f', b'o', b'o'];\n/// let slice = unsafe { UninitSlice::from_raw_parts_mut(data.as_mut_ptr(), 3) };\n///\n/// slice.copy_from_slice(b\"bar\");\n///\n/// assert_eq!(b\"bar\", &data[..]);\n/// ```\n134 pub fn copy_from_slice(&mut self, src: &[u8]) {\n135     use core::ptr;\n136 \n137     assert_eq!(self.len(), src.len());\n138 \n139     unsafe {\n140         ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());\n141     }\n142 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}