{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/uninit_slice.rs\n// crate name is bytes\nuse core::fmt;\nuse core::mem::MaybeUninit;\nuse core::ops::{\n    Index, IndexMut, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo,\n    RangeToInclusive,\n};\n#[repr(transparent)]\npub struct UninitSlice([MaybeUninit<u8>]);\nimpl UninitSlice {\n    #[inline]\n    pub fn new(slice: &mut [u8]) -> &mut UninitSlice {}\n    #[inline]\n    pub fn uninit(slice: &mut [MaybeUninit<u8>]) -> &mut UninitSlice {}\n    fn uninit_ref(slice: &[MaybeUninit<u8>]) -> &UninitSlice {}\n    #[inline]\n    pub unsafe fn from_raw_parts_mut<'a>(\n        ptr: *mut u8,\n        len: usize,\n    ) -> &'a mut UninitSlice {}\n    #[inline]\n    pub fn write_byte(&mut self, index: usize, byte: u8) {}\n    #[inline]\n    pub fn copy_from_slice(&mut self, src: &[u8]) {}\n    #[inline]\n    pub fn as_mut_ptr(&mut self) -> *mut u8 {}\n    #[inline]\n    pub unsafe fn as_uninit_slice_mut(&mut self) -> &mut [MaybeUninit<u8>] {\n        &mut self.0\n    }\n    #[inline]\n    pub fn len(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a `&mut [MaybeUninit<u8>]` to this slice's buffer.\n///\n/// # Safety\n///\n/// The caller **must not** read from the referenced memory and **must not** write\n/// **uninitialized** bytes to the slice either. This is because `BufMut` implementation\n/// that created the `UninitSlice` knows which parts are initialized. Writing uninitialized\n/// bytes to the slice may cause the `BufMut` to read those bytes and trigger undefined\n/// behavior.\n///\n/// # Examples\n///\n/// ```\n/// use bytes::BufMut;\n///\n/// let mut data = [0, 1, 2];\n/// let mut slice = &mut data[..];\n/// unsafe {\n///     let uninit_slice = BufMut::chunk_mut(&mut slice).as_uninit_slice_mut();\n/// };\n/// ```\n187 pub unsafe fn as_uninit_slice_mut(&mut self) -> &mut [MaybeUninit<u8>] {\n188     &mut self.0\n189 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}