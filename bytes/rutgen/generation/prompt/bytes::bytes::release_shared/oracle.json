{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/bytes.rs\n// crate name is bytes\nuse core::iter::FromIterator;\nuse core::mem::{self, ManuallyDrop};\nuse core::ops::{Deref, RangeBounds};\nuse core::ptr::NonNull;\nuse core::{cmp, fmt, hash, ptr, slice, usize};\nuse alloc::{\n    alloc::{dealloc, Layout},\n    borrow::Borrow, boxed::Box, string::String, vec::Vec,\n};\nuse crate::buf::IntoIter;\n#[allow(unused)]\nuse crate::loom::sync::atomic::AtomicMut;\nuse crate::loom::sync::atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse crate::{offset_from, Buf, BytesMut};\nstatic OWNED_VTABLE: Vtable = Vtable {\n    clone: owned_clone,\n    into_vec: owned_to_vec,\n    into_mut: owned_to_mut,\n    is_unique: owned_is_unique,\n    drop: owned_drop,\n};\nstatic PROMOTABLE_EVEN_VTABLE: Vtable = Vtable {\n    clone: promotable_even_clone,\n    into_vec: promotable_even_to_vec,\n    into_mut: promotable_even_to_mut,\n    is_unique: promotable_is_unique,\n    drop: promotable_even_drop,\n};\nstatic PROMOTABLE_ODD_VTABLE: Vtable = Vtable {\n    clone: promotable_odd_clone,\n    into_vec: promotable_odd_to_vec,\n    into_mut: promotable_odd_to_mut,\n    is_unique: promotable_is_unique,\n    drop: promotable_odd_drop,\n};\nstatic SHARED_VTABLE: Vtable = Vtable {\n    clone: shared_clone,\n    into_vec: shared_to_vec,\n    into_mut: shared_to_mut,\n    is_unique: shared_is_unique,\n    drop: shared_drop,\n};\nconst STATIC_VTABLE: Vtable = Vtable {\n    clone: static_clone,\n    into_vec: static_to_vec,\n    into_mut: static_to_mut,\n    is_unique: static_is_unique,\n    drop: static_drop,\n};\nconst _: [(); 0 - mem::align_of::<Shared>() % 2] = [];\nconst KIND_ARC: usize = 0b0;\nconst KIND_VEC: usize = 0b1;\nconst KIND_MASK: usize = 0b1;\nstruct Shared {\n    buf: *mut u8,\n    cap: usize,\n    ref_cnt: AtomicUsize,\n}\nunsafe fn release_shared(ptr: *mut Shared) {\n    if (*ptr).ref_cnt.fetch_sub(1, Ordering::Release) != 1 {\n        return;\n    }\n    (*ptr).ref_cnt.load(Ordering::Acquire);\n    drop(Box::from_raw(ptr));\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1564 unsafe fn release_shared(ptr: *mut Shared) {\n1565     // `Shared` storage... follow the drop steps from Arc.\n1566     if (*ptr).ref_cnt.fetch_sub(1, Ordering::Release) != 1 {\n1567         return;\n1568     }\n1569 \n1570     // This fence is needed to prevent reordering of use of the data and\n1571     // deletion of the data.  Because it is marked `Release`, the decreasing\n1572     // of the reference count synchronizes with this `Acquire` fence. This\n1573     // means that use of the data happens before decreasing the reference\n1574     // count, which happens before this fence, which happens before the\n1575     // deletion of the data.\n1576     //\n1577     // As explained in the [Boost documentation][1],\n1578     //\n1579     // > It is important to enforce any possible access to the object in one\n1580     // > thread (through an existing reference) to *happen before* deleting\n1581     // > the object in a different thread. This is achieved by a \"release\"\n1582     // > operation after dropping a reference (any access to the object\n1583     // > through this reference must obviously happened before), and an\n1584     // > \"acquire\" operation before deleting the object.\n1585     //\n1586     // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n1587     //\n1588     // Thread sanitizer does not support atomic fences. Use an atomic load\n1589     // instead.\n1590     (*ptr).ref_cnt.load(Ordering::Acquire);\n1591 \n1592     // Drop the data\n1593     drop(Box::from_raw(ptr));\n1594 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}