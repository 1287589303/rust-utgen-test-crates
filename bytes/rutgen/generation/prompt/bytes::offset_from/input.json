{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is bytes\npub use crate::buf::{Buf, BufMut};\npub use crate::bytes::Bytes;\npub use crate::bytes_mut::BytesMut;\n#[inline]\nfn offset_from(dst: *const u8, original: *const u8) -> usize {\n    dst as usize - original as usize\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Precondition: dst >= original\n///\n/// The following line is equivalent to:\n///\n/// ```rust,ignore\n/// self.ptr.as_ptr().offset_from(ptr) as usize;\n/// ```\n///\n/// But due to min rust is 1.39 and it is only stabilized\n/// in 1.47, we cannot use it.\n197 fn offset_from(dst: *const u8, original: *const u8) -> usize {\n198     dst as usize - original as usize\n199 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}