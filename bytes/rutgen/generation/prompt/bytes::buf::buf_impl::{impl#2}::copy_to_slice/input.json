{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/buf_impl.rs\n// crate name is bytes\n#[cfg(feature = \"std\")]\nuse crate::buf::{reader, Reader};\nuse crate::buf::{take, Chain, Take};\n#[cfg(feature = \"std\")]\nuse crate::{min_u64_usize, saturating_sub_usize_u64};\nuse crate::{panic_advance, panic_does_not_fit, TryGetError};\n#[cfg(feature = \"std\")]\nuse std::io::IoSlice;\nuse alloc::boxed::Box;\npub trait Buf {\n    fn remaining(&self) -> usize;\n    #[cfg_attr(docsrs, doc(alias = \"bytes\"))]\n    fn chunk(&self) -> &[u8];\n    #[cfg(feature = \"std\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\n    fn chunks_vectored<'a>(&'a self, dst: &mut [IoSlice<'a>]) -> usize {\n        if dst.is_empty() {\n            return 0;\n        }\n        if self.has_remaining() {\n            dst[0] = IoSlice::new(self.chunk());\n            1\n        } else {\n            0\n        }\n    }\n    fn advance(&mut self, cnt: usize);\n    fn has_remaining(&self) -> bool {\n        self.remaining() > 0\n    }\n    fn copy_to_slice(&mut self, dst: &mut [u8]) {\n        self.try_copy_to_slice(dst).unwrap_or_else(|error| panic_advance(&error));\n    }\n    fn get_u8(&mut self) -> u8 {\n        if self.remaining() < 1 {\n            panic_advance(\n                &TryGetError {\n                    requested: 1,\n                    available: 0,\n                },\n            )\n        }\n        let ret = self.chunk()[0];\n        self.advance(1);\n        ret\n    }\n    fn get_i8(&mut self) -> i8 {\n        if self.remaining() < 1 {\n            panic_advance(\n                &TryGetError {\n                    requested: 1,\n                    available: 0,\n                },\n            );\n        }\n        let ret = self.chunk()[0] as i8;\n        self.advance(1);\n        ret\n    }\n    fn get_u16(&mut self) -> u16 {\n        buf_get_impl!(self, u16::from_be_bytes);\n    }\n    fn get_u16_le(&mut self) -> u16 {\n        buf_get_impl!(self, u16::from_le_bytes);\n    }\n    fn get_u16_ne(&mut self) -> u16 {\n        buf_get_impl!(self, u16::from_ne_bytes);\n    }\n    fn get_i16(&mut self) -> i16 {\n        buf_get_impl!(self, i16::from_be_bytes);\n    }\n    fn get_i16_le(&mut self) -> i16 {\n        buf_get_impl!(self, i16::from_le_bytes);\n    }\n    fn get_i16_ne(&mut self) -> i16 {\n        buf_get_impl!(self, i16::from_ne_bytes);\n    }\n    fn get_u32(&mut self) -> u32 {\n        buf_get_impl!(self, u32::from_be_bytes);\n    }\n    fn get_u32_le(&mut self) -> u32 {\n        buf_get_impl!(self, u32::from_le_bytes);\n    }\n    fn get_u32_ne(&mut self) -> u32 {\n        buf_get_impl!(self, u32::from_ne_bytes);\n    }\n    fn get_i32(&mut self) -> i32 {\n        buf_get_impl!(self, i32::from_be_bytes);\n    }\n    fn get_i32_le(&mut self) -> i32 {\n        buf_get_impl!(self, i32::from_le_bytes);\n    }\n    fn get_i32_ne(&mut self) -> i32 {\n        buf_get_impl!(self, i32::from_ne_bytes);\n    }\n    fn get_u64(&mut self) -> u64 {\n        buf_get_impl!(self, u64::from_be_bytes);\n    }\n    fn get_u64_le(&mut self) -> u64 {\n        buf_get_impl!(self, u64::from_le_bytes);\n    }\n    fn get_u64_ne(&mut self) -> u64 {\n        buf_get_impl!(self, u64::from_ne_bytes);\n    }\n    fn get_i64(&mut self) -> i64 {\n        buf_get_impl!(self, i64::from_be_bytes);\n    }\n    fn get_i64_le(&mut self) -> i64 {\n        buf_get_impl!(self, i64::from_le_bytes);\n    }\n    fn get_i64_ne(&mut self) -> i64 {\n        buf_get_impl!(self, i64::from_ne_bytes);\n    }\n    fn get_u128(&mut self) -> u128 {\n        buf_get_impl!(self, u128::from_be_bytes);\n    }\n    fn get_u128_le(&mut self) -> u128 {\n        buf_get_impl!(self, u128::from_le_bytes);\n    }\n    fn get_u128_ne(&mut self) -> u128 {\n        buf_get_impl!(self, u128::from_ne_bytes);\n    }\n    fn get_i128(&mut self) -> i128 {\n        buf_get_impl!(self, i128::from_be_bytes);\n    }\n    fn get_i128_le(&mut self) -> i128 {\n        buf_get_impl!(self, i128::from_le_bytes);\n    }\n    fn get_i128_ne(&mut self) -> i128 {\n        buf_get_impl!(self, i128::from_ne_bytes);\n    }\n    fn get_uint(&mut self, nbytes: usize) -> u64 {\n        buf_get_impl!(be => self, u64, nbytes);\n    }\n    fn get_uint_le(&mut self, nbytes: usize) -> u64 {\n        buf_get_impl!(le => self, u64, nbytes);\n    }\n    fn get_uint_ne(&mut self, nbytes: usize) -> u64 {\n        if cfg!(target_endian = \"big\") {\n            self.get_uint(nbytes)\n        } else {\n            self.get_uint_le(nbytes)\n        }\n    }\n    fn get_int(&mut self, nbytes: usize) -> i64 {\n        sign_extend(self.get_uint(nbytes), nbytes)\n    }\n    fn get_int_le(&mut self, nbytes: usize) -> i64 {\n        sign_extend(self.get_uint_le(nbytes), nbytes)\n    }\n    fn get_int_ne(&mut self, nbytes: usize) -> i64 {\n        if cfg!(target_endian = \"big\") {\n            self.get_int(nbytes)\n        } else {\n            self.get_int_le(nbytes)\n        }\n    }\n    fn get_f32(&mut self) -> f32 {\n        f32::from_bits(self.get_u32())\n    }\n    fn get_f32_le(&mut self) -> f32 {\n        f32::from_bits(self.get_u32_le())\n    }\n    fn get_f32_ne(&mut self) -> f32 {\n        f32::from_bits(self.get_u32_ne())\n    }\n    fn get_f64(&mut self) -> f64 {\n        f64::from_bits(self.get_u64())\n    }\n    fn get_f64_le(&mut self) -> f64 {\n        f64::from_bits(self.get_u64_le())\n    }\n    fn get_f64_ne(&mut self) -> f64 {\n        f64::from_bits(self.get_u64_ne())\n    }\n    fn try_copy_to_slice(&mut self, mut dst: &mut [u8]) -> Result<(), TryGetError> {\n        if self.remaining() < dst.len() {\n            return Err(TryGetError {\n                requested: dst.len(),\n                available: self.remaining(),\n            });\n        }\n        while !dst.is_empty() {\n            let src = self.chunk();\n            let cnt = usize::min(src.len(), dst.len());\n            dst[..cnt].copy_from_slice(&src[..cnt]);\n            dst = &mut dst[cnt..];\n            self.advance(cnt);\n        }\n        Ok(())\n    }\n    fn try_get_u8(&mut self) -> Result<u8, TryGetError> {\n        if self.remaining() < 1 {\n            return Err(TryGetError {\n                requested: 1,\n                available: self.remaining(),\n            });\n        }\n        let ret = self.chunk()[0];\n        self.advance(1);\n        Ok(ret)\n    }\n    fn try_get_i8(&mut self) -> Result<i8, TryGetError> {\n        if self.remaining() < 1 {\n            return Err(TryGetError {\n                requested: 1,\n                available: self.remaining(),\n            });\n        }\n        let ret = self.chunk()[0] as i8;\n        self.advance(1);\n        Ok(ret)\n    }\n    fn try_get_u16(&mut self) -> Result<u16, TryGetError> {\n        buf_try_get_impl!(self, u16::from_be_bytes)\n    }\n    fn try_get_u16_le(&mut self) -> Result<u16, TryGetError> {\n        buf_try_get_impl!(self, u16::from_le_bytes)\n    }\n    fn try_get_u16_ne(&mut self) -> Result<u16, TryGetError> {\n        buf_try_get_impl!(self, u16::from_ne_bytes)\n    }\n    fn try_get_i16(&mut self) -> Result<i16, TryGetError> {\n        buf_try_get_impl!(self, i16::from_be_bytes)\n    }\n    fn try_get_i16_le(&mut self) -> Result<i16, TryGetError> {\n        buf_try_get_impl!(self, i16::from_le_bytes)\n    }\n    fn try_get_i16_ne(&mut self) -> Result<i16, TryGetError> {\n        buf_try_get_impl!(self, i16::from_ne_bytes)\n    }\n    fn try_get_u32(&mut self) -> Result<u32, TryGetError> {\n        buf_try_get_impl!(self, u32::from_be_bytes)\n    }\n    fn try_get_u32_le(&mut self) -> Result<u32, TryGetError> {\n        buf_try_get_impl!(self, u32::from_le_bytes)\n    }\n    fn try_get_u32_ne(&mut self) -> Result<u32, TryGetError> {\n        buf_try_get_impl!(self, u32::from_ne_bytes)\n    }\n    fn try_get_i32(&mut self) -> Result<i32, TryGetError> {\n        buf_try_get_impl!(self, i32::from_be_bytes)\n    }\n    fn try_get_i32_le(&mut self) -> Result<i32, TryGetError> {\n        buf_try_get_impl!(self, i32::from_le_bytes)\n    }\n    fn try_get_i32_ne(&mut self) -> Result<i32, TryGetError> {\n        buf_try_get_impl!(self, i32::from_ne_bytes)\n    }\n    fn try_get_u64(&mut self) -> Result<u64, TryGetError> {\n        buf_try_get_impl!(self, u64::from_be_bytes)\n    }\n    fn try_get_u64_le(&mut self) -> Result<u64, TryGetError> {\n        buf_try_get_impl!(self, u64::from_le_bytes)\n    }\n    fn try_get_u64_ne(&mut self) -> Result<u64, TryGetError> {\n        buf_try_get_impl!(self, u64::from_ne_bytes)\n    }\n    fn try_get_i64(&mut self) -> Result<i64, TryGetError> {\n        buf_try_get_impl!(self, i64::from_be_bytes)\n    }\n    fn try_get_i64_le(&mut self) -> Result<i64, TryGetError> {\n        buf_try_get_impl!(self, i64::from_le_bytes)\n    }\n    fn try_get_i64_ne(&mut self) -> Result<i64, TryGetError> {\n        buf_try_get_impl!(self, i64::from_ne_bytes)\n    }\n    fn try_get_u128(&mut self) -> Result<u128, TryGetError> {\n        buf_try_get_impl!(self, u128::from_be_bytes)\n    }\n    fn try_get_u128_le(&mut self) -> Result<u128, TryGetError> {\n        buf_try_get_impl!(self, u128::from_le_bytes)\n    }\n    fn try_get_u128_ne(&mut self) -> Result<u128, TryGetError> {\n        buf_try_get_impl!(self, u128::from_ne_bytes)\n    }\n    fn try_get_i128(&mut self) -> Result<i128, TryGetError> {\n        buf_try_get_impl!(self, i128::from_be_bytes)\n    }\n    fn try_get_i128_le(&mut self) -> Result<i128, TryGetError> {\n        buf_try_get_impl!(self, i128::from_le_bytes)\n    }\n    fn try_get_i128_ne(&mut self) -> Result<i128, TryGetError> {\n        buf_try_get_impl!(self, i128::from_ne_bytes)\n    }\n    fn try_get_uint(&mut self, nbytes: usize) -> Result<u64, TryGetError> {\n        buf_try_get_impl!(be => self, u64, nbytes);\n    }\n    fn try_get_uint_le(&mut self, nbytes: usize) -> Result<u64, TryGetError> {\n        buf_try_get_impl!(le => self, u64, nbytes);\n    }\n    fn try_get_uint_ne(&mut self, nbytes: usize) -> Result<u64, TryGetError> {\n        if cfg!(target_endian = \"big\") {\n            self.try_get_uint(nbytes)\n        } else {\n            self.try_get_uint_le(nbytes)\n        }\n    }\n    fn try_get_int(&mut self, nbytes: usize) -> Result<i64, TryGetError> {\n        buf_try_get_impl!(be => self, i64, nbytes);\n    }\n    fn try_get_int_le(&mut self, nbytes: usize) -> Result<i64, TryGetError> {\n        buf_try_get_impl!(le => self, i64, nbytes);\n    }\n    fn try_get_int_ne(&mut self, nbytes: usize) -> Result<i64, TryGetError> {\n        if cfg!(target_endian = \"big\") {\n            self.try_get_int(nbytes)\n        } else {\n            self.try_get_int_le(nbytes)\n        }\n    }\n    fn try_get_f32(&mut self) -> Result<f32, TryGetError> {\n        Ok(f32::from_bits(self.try_get_u32()?))\n    }\n    fn try_get_f32_le(&mut self) -> Result<f32, TryGetError> {\n        Ok(f32::from_bits(self.try_get_u32_le()?))\n    }\n    fn try_get_f32_ne(&mut self) -> Result<f32, TryGetError> {\n        Ok(f32::from_bits(self.try_get_u32_ne()?))\n    }\n    fn try_get_f64(&mut self) -> Result<f64, TryGetError> {\n        Ok(f64::from_bits(self.try_get_u64()?))\n    }\n    fn try_get_f64_le(&mut self) -> Result<f64, TryGetError> {\n        Ok(f64::from_bits(self.try_get_u64_le()?))\n    }\n    fn try_get_f64_ne(&mut self) -> Result<f64, TryGetError> {\n        Ok(f64::from_bits(self.try_get_u64_ne()?))\n    }\n    fn copy_to_bytes(&mut self, len: usize) -> crate::Bytes {\n        use super::BufMut;\n        if self.remaining() < len {\n            panic_advance(\n                &TryGetError {\n                    requested: len,\n                    available: self.remaining(),\n                },\n            );\n        }\n        let mut ret = crate::BytesMut::with_capacity(len);\n        ret.put(self.take(len));\n        ret.freeze()\n    }\n    fn take(self, limit: usize) -> Take<Self>\n    where\n        Self: Sized,\n    {\n        take::new(self, limit)\n    }\n    fn chain<U: Buf>(self, next: U) -> Chain<Self, U>\n    where\n        Self: Sized,\n    {\n        Chain::new(self, next)\n    }\n    #[cfg(feature = \"std\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\n    fn reader(self) -> Reader<Self>\n    where\n        Self: Sized,\n    {\n        reader::new(self)\n    }\n}\npub unsafe trait BufMut {\n    fn remaining_mut(&self) -> usize;\n    unsafe fn advance_mut(&mut self, cnt: usize);\n    #[inline]\n    fn has_remaining_mut(&self) -> bool;\n    #[cfg_attr(docsrs, doc(alias = \"bytes_mut\"))]\n    fn chunk_mut(&mut self) -> &mut UninitSlice;\n    #[inline]\n    fn put<T: super::Buf>(&mut self, mut src: T)\n    where\n        Self: Sized;\n    #[inline]\n    fn put_slice(&mut self, mut src: &[u8]);\n    #[inline]\n    fn put_bytes(&mut self, val: u8, mut cnt: usize);\n    #[inline]\n    fn put_u8(&mut self, n: u8);\n    #[inline]\n    fn put_i8(&mut self, n: i8);\n    #[inline]\n    fn put_u16(&mut self, n: u16);\n    #[inline]\n    fn put_u16_le(&mut self, n: u16);\n    #[inline]\n    fn put_u16_ne(&mut self, n: u16);\n    #[inline]\n    fn put_i16(&mut self, n: i16);\n    #[inline]\n    fn put_i16_le(&mut self, n: i16);\n    #[inline]\n    fn put_i16_ne(&mut self, n: i16);\n    #[inline]\n    fn put_u32(&mut self, n: u32);\n    #[inline]\n    fn put_u32_le(&mut self, n: u32);\n    #[inline]\n    fn put_u32_ne(&mut self, n: u32);\n    #[inline]\n    fn put_i32(&mut self, n: i32);\n    #[inline]\n    fn put_i32_le(&mut self, n: i32);\n    #[inline]\n    fn put_i32_ne(&mut self, n: i32);\n    #[inline]\n    fn put_u64(&mut self, n: u64);\n    #[inline]\n    fn put_u64_le(&mut self, n: u64);\n    #[inline]\n    fn put_u64_ne(&mut self, n: u64);\n    #[inline]\n    fn put_i64(&mut self, n: i64);\n    #[inline]\n    fn put_i64_le(&mut self, n: i64);\n    #[inline]\n    fn put_i64_ne(&mut self, n: i64);\n    #[inline]\n    fn put_u128(&mut self, n: u128);\n    #[inline]\n    fn put_u128_le(&mut self, n: u128);\n    #[inline]\n    fn put_u128_ne(&mut self, n: u128);\n    #[inline]\n    fn put_i128(&mut self, n: i128);\n    #[inline]\n    fn put_i128_le(&mut self, n: i128);\n    #[inline]\n    fn put_i128_ne(&mut self, n: i128);\n    #[inline]\n    fn put_uint(&mut self, n: u64, nbytes: usize);\n    #[inline]\n    fn put_uint_le(&mut self, n: u64, nbytes: usize);\n    #[inline]\n    fn put_uint_ne(&mut self, n: u64, nbytes: usize);\n    #[inline]\n    fn put_int(&mut self, n: i64, nbytes: usize);\n    #[inline]\n    fn put_int_le(&mut self, n: i64, nbytes: usize);\n    #[inline]\n    fn put_int_ne(&mut self, n: i64, nbytes: usize);\n    #[inline]\n    fn put_f32(&mut self, n: f32);\n    #[inline]\n    fn put_f32_le(&mut self, n: f32);\n    #[inline]\n    fn put_f32_ne(&mut self, n: f32);\n    #[inline]\n    fn put_f64(&mut self, n: f64);\n    #[inline]\n    fn put_f64_le(&mut self, n: f64);\n    #[inline]\n    fn put_f64_ne(&mut self, n: f64);\n    #[inline]\n    fn limit(self, limit: usize) -> Limit<Self>\n    where\n        Self: Sized,\n    {\n        limit::new(self, limit)\n    }\n    #[cfg(feature = \"std\")]\n    #[cfg_attr(docsrs, doc(cfg(feature = \"std\")))]\n    #[inline]\n    fn writer(self) -> Writer<Self>\n    where\n        Self: Sized,\n    {\n        writer::new(self)\n    }\n    #[inline]\n    fn chain_mut<U: BufMut>(self, next: U) -> Chain<Self, U>\n    where\n        Self: Sized,\n    {\n        Chain::new(self, next)\n    }\n}\n#[derive(Debug, PartialEq, Eq)]\npub struct TryGetError {\n    /// The number of bytes necessary to get the value\n    pub requested: usize,\n    /// The number of bytes available in the buffer\n    pub available: usize,\n}\nimpl Buf for &[u8] {\n    #[inline]\n    fn remaining(&self) -> usize {}\n    #[inline]\n    fn chunk(&self) -> &[u8] {}\n    #[inline]\n    fn advance(&mut self, cnt: usize) {}\n    #[inline]\n    fn copy_to_slice(&mut self, dst: &mut [u8]) {\n        if self.len() < dst.len() {\n            panic_advance(\n                &TryGetError {\n                    requested: dst.len(),\n                    available: self.len(),\n                },\n            );\n        }\n        dst.copy_from_slice(&self[..dst.len()]);\n        self.advance(dst.len());\n    }\n}\n#[cold]\nfn panic_advance(error_info: &TryGetError) -> ! {\n    panic!(\n        \"advance out of bounds: the len is {} but advancing by {}\", error_info.available,\n        error_info.requested\n    );\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2913 fn copy_to_slice(&mut self, dst: &mut [u8]) {\n2914     if self.len() < dst.len() {\n2915         panic_advance(&TryGetError {\n2916             requested: dst.len(),\n2917             available: self.len(),\n2918         });\n2919     }\n2920 \n2921     dst.copy_from_slice(&self[..dst.len()]);\n2922     self.advance(dst.len());\n2923 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}