{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is bytes\npub use crate::buf::{Buf, BufMut};\npub use crate::bytes::Bytes;\npub use crate::bytes_mut::BytesMut;\n#[inline(never)]\n#[cold]\nfn abort() -> ! {\n    #[cfg(feature = \"std\")]\n    {\n        std::process::abort();\n    }\n    #[cfg(not(feature = \"std\"))]\n    {\n        struct Abort;\n        impl Drop for Abort {\n            fn drop(&mut self) {\n                panic!();\n            }\n        }\n        let _a = Abort;\n        panic!(\"abort\");\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 95 fn abort() -> ! {\n 96     #[cfg(feature = \"std\")]\n 97     {\n 98         std::process::abort();\n 99     }\n100 \n101     #[cfg(not(feature = \"std\"))]\n102     {\n103         struct Abort;\n104         impl Drop for Abort {\n105             fn drop(&mut self) {\n106                 panic!();\n107             }\n108         }\n109         let _a = Abort;\n110         panic!(\"abort\");\n111     }\n112 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}