{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/buf/take.rs\n// crate name is bytes\nuse crate::Buf;\nuse core::cmp;\n#[cfg(feature = \"std\")]\nuse std::io::IoSlice;\n#[derive(Debug)]\npub struct Take<T> {\n    inner: T,\n    limit: usize,\n}\nimpl<T> Take<T> {\n    pub fn into_inner(self) -> T {}\n    pub fn get_ref(&self) -> &T {}\n    pub fn get_mut(&mut self) -> &mut T {}\n    pub fn limit(&self) -> usize {\n        self.limit\n    }\n    pub fn set_limit(&mut self, lim: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the maximum number of bytes that can be read.\n///\n/// # Note\n///\n/// If the inner `Buf` has fewer bytes than indicated by this method then\n/// that is the actual number of available bytes.\n///\n/// # Examples\n///\n/// ```rust\n/// use bytes::Buf;\n///\n/// let mut buf = b\"hello world\".take(2);\n///\n/// assert_eq!(2, buf.limit());\n/// assert_eq!(b'h', buf.get_u8());\n/// assert_eq!(1, buf.limit());\n/// ```\n102 pub fn limit(&self) -> usize {\n103     self.limit\n104 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}